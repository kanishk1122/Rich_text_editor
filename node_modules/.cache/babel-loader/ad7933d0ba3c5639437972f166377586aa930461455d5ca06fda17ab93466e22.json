{"ast":null,"code":"import { TextNode } from \"lexical\";\nexport class ColoredTextNode extends TextNode {\n  constructor(text) {\n    let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let backgroundColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(text);\n    this.__color = color;\n    this.__backgroundColor = backgroundColor;\n  }\n  static getType() {\n    return \"colored-text\";\n  }\n  static clone(node) {\n    return new ColoredTextNode(node.__text, node.__color, node.__backgroundColor);\n  }\n  createDOM(config) {\n    const dom = super.createDOM(config);\n    if (this.__color) {\n      dom.style.color = this.__color;\n    }\n    if (this.__backgroundColor) {\n      dom.style.backgroundColor = this.__backgroundColor;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom) {\n    const isUpdated = super.updateDOM(prevNode, dom);\n    if (this.__color !== prevNode.__color) {\n      dom.style.color = this.__color || \"\";\n    }\n    if (this.__backgroundColor !== prevNode.__backgroundColor) {\n      dom.style.backgroundColor = this.__backgroundColor || \"\";\n    }\n    return isUpdated;\n  }\n  setColor(color) {\n    const writable = this.getWritable();\n    writable.__color = color;\n  }\n  setBackgroundColor(backgroundColor) {\n    const writable = this.getWritable();\n    writable.__backgroundColor = backgroundColor;\n  }\n  static importJSON(serializedNode) {\n    const node = new ColoredTextNode(serializedNode.text, serializedNode.color, serializedNode.backgroundColor);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: \"colored-text\",\n      color: this.__color,\n      backgroundColor: this.__backgroundColor\n    };\n  }\n}","map":{"version":3,"names":["TextNode","ColoredTextNode","constructor","text","color","arguments","length","undefined","backgroundColor","__color","__backgroundColor","getType","clone","node","__text","createDOM","config","dom","style","updateDOM","prevNode","isUpdated","setColor","writable","getWritable","setBackgroundColor","importJSON","serializedNode","exportJSON","type"],"sources":["/media/ks/My thing/test/textditor/src/nodes/ColoredTextNode.js"],"sourcesContent":["import { TextNode } from \"lexical\";\n\nexport class ColoredTextNode extends TextNode {\n  constructor(text, color = null, backgroundColor = null) {\n    super(text);\n    this.__color = color;\n    this.__backgroundColor = backgroundColor;\n  }\n\n  static getType() {\n    return \"colored-text\";\n  }\n\n  static clone(node) {\n    return new ColoredTextNode(node.__text, node.__color, node.__backgroundColor);\n  }\n\n  createDOM(config) {\n    const dom = super.createDOM(config);\n    if (this.__color) {\n      dom.style.color = this.__color;\n    }\n    if (this.__backgroundColor) {\n      dom.style.backgroundColor = this.__backgroundColor;\n    }\n    return dom;\n  }\n\n  updateDOM(prevNode, dom) {\n    const isUpdated = super.updateDOM(prevNode, dom);\n    if (this.__color !== prevNode.__color) {\n      dom.style.color = this.__color || \"\";\n    }\n    if (this.__backgroundColor !== prevNode.__backgroundColor) {\n      dom.style.backgroundColor = this.__backgroundColor || \"\";\n    }\n    return isUpdated;\n  }\n\n  setColor(color) {\n    const writable = this.getWritable();\n    writable.__color = color;\n  }\n\n  setBackgroundColor(backgroundColor) {\n    const writable = this.getWritable();\n    writable.__backgroundColor = backgroundColor;\n  }\n\n  static importJSON(serializedNode) {\n    const node = new ColoredTextNode(serializedNode.text, serializedNode.color, serializedNode.backgroundColor);\n    return node;\n  }\n\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: \"colored-text\",\n      color: this.__color,\n      backgroundColor: this.__backgroundColor\n    };\n  }\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAElC,OAAO,MAAMC,eAAe,SAASD,QAAQ,CAAC;EAC5CE,WAAWA,CAACC,IAAI,EAAwC;IAAA,IAAtCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAAA,IAAEG,eAAe,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACpD,KAAK,CAACF,IAAI,CAAC;IACX,IAAI,CAACM,OAAO,GAAGL,KAAK;IACpB,IAAI,CAACM,iBAAiB,GAAGF,eAAe;EAC1C;EAEA,OAAOG,OAAOA,CAAA,EAAG;IACf,OAAO,cAAc;EACvB;EAEA,OAAOC,KAAKA,CAACC,IAAI,EAAE;IACjB,OAAO,IAAIZ,eAAe,CAACY,IAAI,CAACC,MAAM,EAAED,IAAI,CAACJ,OAAO,EAAEI,IAAI,CAACH,iBAAiB,CAAC;EAC/E;EAEAK,SAASA,CAACC,MAAM,EAAE;IAChB,MAAMC,GAAG,GAAG,KAAK,CAACF,SAAS,CAACC,MAAM,CAAC;IACnC,IAAI,IAAI,CAACP,OAAO,EAAE;MAChBQ,GAAG,CAACC,KAAK,CAACd,KAAK,GAAG,IAAI,CAACK,OAAO;IAChC;IACA,IAAI,IAAI,CAACC,iBAAiB,EAAE;MAC1BO,GAAG,CAACC,KAAK,CAACV,eAAe,GAAG,IAAI,CAACE,iBAAiB;IACpD;IACA,OAAOO,GAAG;EACZ;EAEAE,SAASA,CAACC,QAAQ,EAAEH,GAAG,EAAE;IACvB,MAAMI,SAAS,GAAG,KAAK,CAACF,SAAS,CAACC,QAAQ,EAAEH,GAAG,CAAC;IAChD,IAAI,IAAI,CAACR,OAAO,KAAKW,QAAQ,CAACX,OAAO,EAAE;MACrCQ,GAAG,CAACC,KAAK,CAACd,KAAK,GAAG,IAAI,CAACK,OAAO,IAAI,EAAE;IACtC;IACA,IAAI,IAAI,CAACC,iBAAiB,KAAKU,QAAQ,CAACV,iBAAiB,EAAE;MACzDO,GAAG,CAACC,KAAK,CAACV,eAAe,GAAG,IAAI,CAACE,iBAAiB,IAAI,EAAE;IAC1D;IACA,OAAOW,SAAS;EAClB;EAEAC,QAAQA,CAAClB,KAAK,EAAE;IACd,MAAMmB,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;IACnCD,QAAQ,CAACd,OAAO,GAAGL,KAAK;EAC1B;EAEAqB,kBAAkBA,CAACjB,eAAe,EAAE;IAClC,MAAMe,QAAQ,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;IACnCD,QAAQ,CAACb,iBAAiB,GAAGF,eAAe;EAC9C;EAEA,OAAOkB,UAAUA,CAACC,cAAc,EAAE;IAChC,MAAMd,IAAI,GAAG,IAAIZ,eAAe,CAAC0B,cAAc,CAACxB,IAAI,EAAEwB,cAAc,CAACvB,KAAK,EAAEuB,cAAc,CAACnB,eAAe,CAAC;IAC3G,OAAOK,IAAI;EACb;EAEAe,UAAUA,CAAA,EAAG;IACX,OAAO;MACL,GAAG,KAAK,CAACA,UAAU,CAAC,CAAC;MACrBC,IAAI,EAAE,cAAc;MACpBzB,KAAK,EAAE,IAAI,CAACK,OAAO;MACnBD,eAAe,EAAE,IAAI,CAACE;IACxB,CAAC;EACH;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}