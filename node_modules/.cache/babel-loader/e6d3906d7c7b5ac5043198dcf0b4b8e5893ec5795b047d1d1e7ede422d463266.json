{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $insertDataTransferForRichText, copyToClipboard } from '@lexical/clipboard';\nimport { $shouldOverrideDefaultCharacterSelection, $moveCharacter } from '@lexical/selection';\nimport { addClassNamesToElement, isHTMLElement, objectKlassEquals, mergeRegister, $findMatchingParent, $getNearestBlockElementAncestorOrThrow } from '@lexical/utils';\nimport { createCommand, ElementNode, $createParagraphNode, $applyNodeReplacement, CLICK_COMMAND, $getSelection, $isNodeSelection, DELETE_CHARACTER_COMMAND, $isRangeSelection, COMMAND_PRIORITY_EDITOR, DELETE_WORD_COMMAND, DELETE_LINE_COMMAND, CONTROLLED_TEXT_INSERTION_COMMAND, REMOVE_TEXT_COMMAND, FORMAT_TEXT_COMMAND, FORMAT_ELEMENT_COMMAND, $isElementNode, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, $insertNodes, $createTabNode, INDENT_CONTENT_COMMAND, OUTDENT_CONTENT_COMMAND, KEY_ARROW_UP_COMMAND, $getAdjacentNode, $isDecoratorNode, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_BACKSPACE_COMMAND, $isRootNode, KEY_DELETE_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, DROP_COMMAND, $getNearestNodeFromDOMNode, $createRangeSelection, $isTextNode, $normalizeSelection__EXPERIMENTAL, $setSelection, DRAGSTART_COMMAND, DRAGOVER_COMMAND, SELECT_ALL_COMMAND, $selectAll, COPY_COMMAND, CUT_COMMAND, PASTE_COMMAND, isSelectionCapturedInDecoratorInput, $getRoot } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction caretFromPoint(x, y) {\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\n    const range = document.caretRangeFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.startContainer,\n      offset: range.startOffset\n    };\n    // @ts-ignore\n  } else if (document.caretPositionFromPoint !== 'undefined') {\n    // @ts-ignore FF - no types\n    const range = document.caretPositionFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.offsetNode,\n      offset: range.offset\n    };\n  } else {\n    // Gracefully handle IE\n    return null;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DRAG_DROP_PASTE = createCommand('DRAG_DROP_PASTE_FILE');\n/** @noInheritDoc */\nclass QuoteNode extends ElementNode {\n  static getType() {\n    return 'quote';\n  }\n  static clone(node) {\n    return new QuoteNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const element = document.createElement('blockquote');\n    addClassNamesToElement(element, config.theme.quote);\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      blockquote: node => ({\n        conversion: $convertBlockquoteElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createQuoteNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'quote'\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newBlock = $createParagraphNode();\n    const direction = this.getDirection();\n    newBlock.setDirection(direction);\n    this.insertAfter(newBlock, restoreSelection);\n    return newBlock;\n  }\n  collapseAtStart() {\n    const paragraph = $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n  canMergeWhenEmpty() {\n    return true;\n  }\n}\nfunction $createQuoteNode() {\n  return $applyNodeReplacement(new QuoteNode());\n}\nfunction $isQuoteNode(node) {\n  return node instanceof QuoteNode;\n}\n/** @noInheritDoc */\nclass HeadingNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'heading';\n  }\n  static clone(node) {\n    return new HeadingNode(node.__tag, node.__key);\n  }\n  constructor(tag, key) {\n    super(key);\n    this.__tag = tag;\n  }\n  getTag() {\n    return this.__tag;\n  }\n\n  // View\n\n  createDOM(config) {\n    const tag = this.__tag;\n    const element = document.createElement(tag);\n    const theme = config.theme;\n    const classNames = theme.heading;\n    if (classNames !== undefined) {\n      const className = classNames[tag];\n      addClassNamesToElement(element, className);\n    }\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      h1: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h2: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h3: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h4: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h5: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h6: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      p: node => {\n        // domNode is a <p> since we matched it by nodeName\n        const paragraph = node;\n        const firstChild = paragraph.firstChild;\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\n          return {\n            conversion: () => ({\n              node: null\n            }),\n            priority: 3\n          };\n        }\n        return null;\n      },\n      span: node => {\n        if (isGoogleDocsTitle(node)) {\n          return {\n            conversion: domNode => {\n              return {\n                node: $createHeadingNode('h1')\n              };\n            },\n            priority: 3\n          };\n        }\n        return null;\n      }\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createHeadingNode(serializedNode.tag);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      tag: this.getTag(),\n      type: 'heading',\n      version: 1\n    };\n  }\n\n  // Mutation\n  insertNewAfter(selection) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const anchorOffet = selection ? selection.anchor.offset : 0;\n    const lastDesc = this.getLastDescendant();\n    const isAtEnd = !lastDesc || selection && selection.anchor.key === lastDesc.getKey() && anchorOffet === lastDesc.getTextContentSize();\n    const newElement = isAtEnd || !selection ? $createParagraphNode() : $createHeadingNode(this.getTag());\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    if (anchorOffet === 0 && !this.isEmpty() && selection) {\n      const paragraph = $createParagraphNode();\n      paragraph.select();\n      this.replace(paragraph, true);\n    }\n    return newElement;\n  }\n  collapseAtStart() {\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => newElement.append(child));\n    this.replace(newElement);\n    return true;\n  }\n  extractWithChild() {\n    return true;\n  }\n}\nfunction isGoogleDocsTitle(domNode) {\n  if (domNode.nodeName.toLowerCase() === 'span') {\n    return domNode.style.fontSize === '26pt';\n  }\n  return false;\n}\nfunction $convertHeadingElement(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  let node = null;\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\n    node = $createHeadingNode(nodeName);\n    if (element.style !== null) {\n      node.setFormat(element.style.textAlign);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $convertBlockquoteElement(element) {\n  const node = $createQuoteNode();\n  if (element.style !== null) {\n    node.setFormat(element.style.textAlign);\n  }\n  return {\n    node\n  };\n}\nfunction $createHeadingNode(headingTag) {\n  return $applyNodeReplacement(new HeadingNode(headingTag));\n}\nfunction $isHeadingNode(node) {\n  return node instanceof HeadingNode;\n}\nfunction onPasteForRichText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = $getSelection();\n    const clipboardData = objectKlassEquals(event, InputEvent) || objectKlassEquals(event, KeyboardEvent) ? null : event.clipboardData;\n    if (clipboardData != null && selection !== null) {\n      $insertDataTransferForRichText(clipboardData, selection, editor);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\nasync function onCutForRichText(event, editor) {\n  await copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n  editor.update(() => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      selection.removeText();\n    } else if ($isNodeSelection(selection)) {\n      selection.getNodes().forEach(node => node.remove());\n    }\n  });\n}\n\n// Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\n// in certain occasions, we want to know whether it was a file transfer, as opposed to text. We\n// control this with the first boolean flag.\nfunction eventFiles(event) {\n  let dataTransfer = null;\n  if (objectKlassEquals(event, DragEvent)) {\n    dataTransfer = event.dataTransfer;\n  } else if (objectKlassEquals(event, ClipboardEvent)) {\n    dataTransfer = event.clipboardData;\n  }\n  if (dataTransfer === null) {\n    return [false, [], false];\n  }\n  const types = dataTransfer.types;\n  const hasFiles = types.includes('Files');\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\n}\nfunction $handleIndentAndOutdent(indentOrOutdent) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection)) {\n    return false;\n  }\n  const alreadyHandled = new Set();\n  const nodes = selection.getNodes();\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const key = node.getKey();\n    if (alreadyHandled.has(key)) {\n      continue;\n    }\n    const parentBlock = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n    if (parentBlock === null) {\n      continue;\n    }\n    const parentKey = parentBlock.getKey();\n    if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\n      alreadyHandled.add(parentKey);\n      indentOrOutdent(parentBlock);\n    }\n  }\n  return alreadyHandled.size > 0;\n}\nfunction $isTargetWithinDecorator(target) {\n  const node = $getNearestNodeFromDOMNode(target);\n  return $isDecoratorNode(node);\n}\nfunction $isSelectionAtEndOfRoot(selection) {\n  const focus = selection.focus;\n  return focus.key === 'root' && focus.offset === $getRoot().getChildrenSize();\n}\nfunction registerRichText(editor) {\n  const removeListener = mergeRegister(editor.registerCommand(CLICK_COMMAND, payload => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      selection.clear();\n      return true;\n    }\n    return false;\n  }, 0), editor.registerCommand(DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_WORD_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteWord(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_LINE_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteLine(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = $getSelection();\n    if (typeof eventOrText === 'string') {\n      if (selection !== null) {\n        selection.insertText(eventOrText);\n      }\n    } else {\n      if (selection === null) {\n        return false;\n      }\n      const dataTransfer = eventOrText.dataTransfer;\n      if (dataTransfer != null) {\n        $insertDataTransferForRichText(dataTransfer, selection, editor);\n      } else if ($isRangeSelection(selection)) {\n        const data = eventOrText.data;\n        if (data) {\n          selection.insertText(data);\n        }\n        return true;\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(REMOVE_TEXT_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.removeText();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_TEXT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.formatText(format);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_ELEMENT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection) && !$isNodeSelection(selection)) {\n      return false;\n    }\n    const nodes = selection.getNodes();\n    for (const node of nodes) {\n      const element = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n      if (element !== null) {\n        element.setFormat(format);\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertParagraph();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_TAB_COMMAND, () => {\n    $insertNodes([$createTabNode()]);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      block.setIndent(indent + 1);\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(OUTDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      if (indent > 0) {\n        block.setIndent(indent - 1);\n      }\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_UP_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectPrevious();\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      const possibleNode = $getAdjacentNode(selection.focus, true);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectPrevious();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      if ($isSelectionAtEndOfRoot(selection)) {\n        event.preventDefault();\n        return true;\n      }\n      const possibleNode = $getAdjacentNode(selection.focus, false);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectNext();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_LEFT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectPrevious();\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    if ($shouldOverrideDefaultCharacterSelection(selection, true)) {\n      const isHoldingShift = event.shiftKey;\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, true);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_RIGHT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    const isHoldingShift = event.shiftKey;\n    if ($shouldOverrideDefaultCharacterSelection(selection, false)) {\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, false);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_BACKSPACE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    const {\n      anchor\n    } = selection;\n    const anchorNode = anchor.getNode();\n    if (selection.isCollapsed() && anchor.offset === 0 && !$isRootNode(anchorNode)) {\n      const element = $getNearestBlockElementAncestorOrThrow(anchorNode);\n      if (element.getIndent() > 0) {\n        return editor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined);\n      }\n    }\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, true);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_DELETE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, false);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ENTER_COMMAND, event => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n      event.preventDefault();\n      if (event.shiftKey) {\n        return editor.dispatchCommand(INSERT_LINE_BREAK_COMMAND, false);\n      }\n    }\n    return editor.dispatchCommand(INSERT_PARAGRAPH_COMMAND, undefined);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ESCAPE_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    editor.blur();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DROP_COMMAND, event => {\n    const [, files] = eventFiles(event);\n    if (files.length > 0) {\n      const x = event.clientX;\n      const y = event.clientY;\n      const eventRange = caretFromPoint(x, y);\n      if (eventRange !== null) {\n        const {\n          offset: domOffset,\n          node: domNode\n        } = eventRange;\n        const node = $getNearestNodeFromDOMNode(domNode);\n        if (node !== null) {\n          const selection = $createRangeSelection();\n          if ($isTextNode(node)) {\n            selection.anchor.set(node.getKey(), domOffset, 'text');\n            selection.focus.set(node.getKey(), domOffset, 'text');\n          } else {\n            const parentKey = node.getParentOrThrow().getKey();\n            const offset = node.getIndexWithinParent() + 1;\n            selection.anchor.set(parentKey, offset, 'element');\n            selection.focus.set(parentKey, offset, 'element');\n          }\n          const normalizedSelection = $normalizeSelection__EXPERIMENTAL(selection);\n          $setSelection(normalizedSelection);\n        }\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      }\n      event.preventDefault();\n      return true;\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGSTART_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGOVER_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    const x = event.clientX;\n    const y = event.clientY;\n    const eventRange = caretFromPoint(x, y);\n    if (eventRange !== null) {\n      const node = $getNearestNodeFromDOMNode(eventRange.node);\n      if ($isDecoratorNode(node)) {\n        // Show browser caret as the user is dragging the media across the screen. Won't work\n        // for DecoratorNode nor it's relevant.\n        event.preventDefault();\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(SELECT_ALL_COMMAND, () => {\n    $selectAll();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(COPY_COMMAND, event => {\n    copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CUT_COMMAND, event => {\n    onCutForRichText(event, editor);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(PASTE_COMMAND, event => {\n    const [, files, hasTextContent] = eventFiles(event);\n    if (files.length > 0 && !hasTextContent) {\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      return true;\n    }\n\n    // if inputs then paste within the input ignore creating a new node on paste event\n    if (isSelectionCapturedInDecoratorInput(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (selection !== null) {\n      onPasteForRichText(event, editor);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\nexport { $createHeadingNode, $createQuoteNode, $isHeadingNode, $isQuoteNode, DRAG_DROP_PASTE, HeadingNode, QuoteNode, eventFiles, registerRichText };","map":{"version":3,"names":["$insertDataTransferForRichText","copyToClipboard","$shouldOverrideDefaultCharacterSelection","$moveCharacter","addClassNamesToElement","isHTMLElement","objectKlassEquals","mergeRegister","$findMatchingParent","$getNearestBlockElementAncestorOrThrow","createCommand","ElementNode","$createParagraphNode","$applyNodeReplacement","CLICK_COMMAND","$getSelection","$isNodeSelection","DELETE_CHARACTER_COMMAND","$isRangeSelection","COMMAND_PRIORITY_EDITOR","DELETE_WORD_COMMAND","DELETE_LINE_COMMAND","CONTROLLED_TEXT_INSERTION_COMMAND","REMOVE_TEXT_COMMAND","FORMAT_TEXT_COMMAND","FORMAT_ELEMENT_COMMAND","$isElementNode","INSERT_LINE_BREAK_COMMAND","INSERT_PARAGRAPH_COMMAND","INSERT_TAB_COMMAND","$insertNodes","$createTabNode","INDENT_CONTENT_COMMAND","OUTDENT_CONTENT_COMMAND","KEY_ARROW_UP_COMMAND","$getAdjacentNode","$isDecoratorNode","KEY_ARROW_DOWN_COMMAND","KEY_ARROW_LEFT_COMMAND","KEY_ARROW_RIGHT_COMMAND","KEY_BACKSPACE_COMMAND","$isRootNode","KEY_DELETE_COMMAND","KEY_ENTER_COMMAND","KEY_ESCAPE_COMMAND","DROP_COMMAND","$getNearestNodeFromDOMNode","$createRangeSelection","$isTextNode","$normalizeSelection__EXPERIMENTAL","$setSelection","DRAGSTART_COMMAND","DRAGOVER_COMMAND","SELECT_ALL_COMMAND","$selectAll","COPY_COMMAND","CUT_COMMAND","PASTE_COMMAND","isSelectionCapturedInDecoratorInput","$getRoot","caretFromPoint","x","y","document","caretRangeFromPoint","range","node","startContainer","offset","startOffset","caretPositionFromPoint","offsetNode","CAN_USE_DOM","window","createElement","documentMode","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","test","navigator","userAgent","IS_IOS","MSStream","IS_CHROME","IS_APPLE_WEBKIT","DRAG_DROP_PASTE","QuoteNode","getType","clone","__key","constructor","key","createDOM","config","element","theme","quote","updateDOM","prevNode","dom","importDOM","blockquote","conversion","$convertBlockquoteElement","priority","exportDOM","editor","isEmpty","append","formatType","getFormatType","style","textAlign","direction","getDirection","dir","importJSON","serializedNode","$createQuoteNode","setFormat","format","setIndent","indent","setDirection","exportJSON","type","insertNewAfter","_","restoreSelection","newBlock","insertAfter","collapseAtStart","paragraph","children","getChildren","forEach","child","replace","canMergeWhenEmpty","$isQuoteNode","HeadingNode","__tag","tag","getTag","classNames","heading","undefined","className","h1","$convertHeadingElement","h2","h3","h4","h5","h6","p","firstChild","isGoogleDocsTitle","span","domNode","$createHeadingNode","version","selection","arguments","length","anchorOffet","anchor","lastDesc","getLastDescendant","isAtEnd","getKey","getTextContentSize","newElement","select","extractWithChild","nodeName","toLowerCase","fontSize","headingTag","$isHeadingNode","onPasteForRichText","event","preventDefault","update","clipboardData","KeyboardEvent","onCutForRichText","ClipboardEvent","removeText","getNodes","remove","eventFiles","dataTransfer","DragEvent","types","hasFiles","includes","hasContent","Array","from","files","$handleIndentAndOutdent","indentOrOutdent","alreadyHandled","Set","nodes","i","has","parentBlock","parentNode","isInline","parentKey","canIndent","add","size","$isTargetWithinDecorator","target","$isSelectionAtEndOfRoot","focus","getChildrenSize","registerRichText","removeListener","registerCommand","payload","clear","isBackward","deleteCharacter","deleteWord","deleteLine","eventOrText","insertText","data","formatText","selectStart","insertLineBreak","insertParagraph","block","getIndent","selectPrevious","possibleNode","shiftKey","isIsolated","selectNext","isHoldingShift","anchorNode","getNode","isCollapsed","dispatchCommand","blur","clientX","clientY","eventRange","domOffset","set","getParentOrThrow","getIndexWithinParent","normalizedSelection","isFileTransfer","hasTextContent"],"sources":["/media/ks/My thing/test/textditor_Using_lixical/node_modules/@lexical/rich-text/LexicalRichText.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { $insertDataTransferForRichText, copyToClipboard } from '@lexical/clipboard';\nimport { $shouldOverrideDefaultCharacterSelection, $moveCharacter } from '@lexical/selection';\nimport { addClassNamesToElement, isHTMLElement, objectKlassEquals, mergeRegister, $findMatchingParent, $getNearestBlockElementAncestorOrThrow } from '@lexical/utils';\nimport { createCommand, ElementNode, $createParagraphNode, $applyNodeReplacement, CLICK_COMMAND, $getSelection, $isNodeSelection, DELETE_CHARACTER_COMMAND, $isRangeSelection, COMMAND_PRIORITY_EDITOR, DELETE_WORD_COMMAND, DELETE_LINE_COMMAND, CONTROLLED_TEXT_INSERTION_COMMAND, REMOVE_TEXT_COMMAND, FORMAT_TEXT_COMMAND, FORMAT_ELEMENT_COMMAND, $isElementNode, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, $insertNodes, $createTabNode, INDENT_CONTENT_COMMAND, OUTDENT_CONTENT_COMMAND, KEY_ARROW_UP_COMMAND, $getAdjacentNode, $isDecoratorNode, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_BACKSPACE_COMMAND, $isRootNode, KEY_DELETE_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, DROP_COMMAND, $getNearestNodeFromDOMNode, $createRangeSelection, $isTextNode, $normalizeSelection__EXPERIMENTAL, $setSelection, DRAGSTART_COMMAND, DRAGOVER_COMMAND, SELECT_ALL_COMMAND, $selectAll, COPY_COMMAND, CUT_COMMAND, PASTE_COMMAND, isSelectionCapturedInDecoratorInput, $getRoot } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction caretFromPoint(x, y) {\n  if (typeof document.caretRangeFromPoint !== 'undefined') {\n    const range = document.caretRangeFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.startContainer,\n      offset: range.startOffset\n    };\n    // @ts-ignore\n  } else if (document.caretPositionFromPoint !== 'undefined') {\n    // @ts-ignore FF - no types\n    const range = document.caretPositionFromPoint(x, y);\n    if (range === null) {\n      return null;\n    }\n    return {\n      node: range.offsetNode,\n      offset: range.offset\n    };\n  } else {\n    // Gracefully handle IE\n    return null;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DRAG_DROP_PASTE = createCommand('DRAG_DROP_PASTE_FILE');\n/** @noInheritDoc */\nclass QuoteNode extends ElementNode {\n  static getType() {\n    return 'quote';\n  }\n  static clone(node) {\n    return new QuoteNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const element = document.createElement('blockquote');\n    addClassNamesToElement(element, config.theme.quote);\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      blockquote: node => ({\n        conversion: $convertBlockquoteElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createQuoteNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'quote'\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newBlock = $createParagraphNode();\n    const direction = this.getDirection();\n    newBlock.setDirection(direction);\n    this.insertAfter(newBlock, restoreSelection);\n    return newBlock;\n  }\n  collapseAtStart() {\n    const paragraph = $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n  canMergeWhenEmpty() {\n    return true;\n  }\n}\nfunction $createQuoteNode() {\n  return $applyNodeReplacement(new QuoteNode());\n}\nfunction $isQuoteNode(node) {\n  return node instanceof QuoteNode;\n}\n/** @noInheritDoc */\nclass HeadingNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'heading';\n  }\n  static clone(node) {\n    return new HeadingNode(node.__tag, node.__key);\n  }\n  constructor(tag, key) {\n    super(key);\n    this.__tag = tag;\n  }\n  getTag() {\n    return this.__tag;\n  }\n\n  // View\n\n  createDOM(config) {\n    const tag = this.__tag;\n    const element = document.createElement(tag);\n    const theme = config.theme;\n    const classNames = theme.heading;\n    if (classNames !== undefined) {\n      const className = classNames[tag];\n      addClassNamesToElement(element, className);\n    }\n    return element;\n  }\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      h1: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h2: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h3: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h4: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h5: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      h6: node => ({\n        conversion: $convertHeadingElement,\n        priority: 0\n      }),\n      p: node => {\n        // domNode is a <p> since we matched it by nodeName\n        const paragraph = node;\n        const firstChild = paragraph.firstChild;\n        if (firstChild !== null && isGoogleDocsTitle(firstChild)) {\n          return {\n            conversion: () => ({\n              node: null\n            }),\n            priority: 3\n          };\n        }\n        return null;\n      },\n      span: node => {\n        if (isGoogleDocsTitle(node)) {\n          return {\n            conversion: domNode => {\n              return {\n                node: $createHeadingNode('h1')\n              };\n            },\n            priority: 3\n          };\n        }\n        return null;\n      }\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createHeadingNode(serializedNode.tag);\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      tag: this.getTag(),\n      type: 'heading',\n      version: 1\n    };\n  }\n\n  // Mutation\n  insertNewAfter(selection, restoreSelection = true) {\n    const anchorOffet = selection ? selection.anchor.offset : 0;\n    const lastDesc = this.getLastDescendant();\n    const isAtEnd = !lastDesc || selection && selection.anchor.key === lastDesc.getKey() && anchorOffet === lastDesc.getTextContentSize();\n    const newElement = isAtEnd || !selection ? $createParagraphNode() : $createHeadingNode(this.getTag());\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    if (anchorOffet === 0 && !this.isEmpty() && selection) {\n      const paragraph = $createParagraphNode();\n      paragraph.select();\n      this.replace(paragraph, true);\n    }\n    return newElement;\n  }\n  collapseAtStart() {\n    const newElement = !this.isEmpty() ? $createHeadingNode(this.getTag()) : $createParagraphNode();\n    const children = this.getChildren();\n    children.forEach(child => newElement.append(child));\n    this.replace(newElement);\n    return true;\n  }\n  extractWithChild() {\n    return true;\n  }\n}\nfunction isGoogleDocsTitle(domNode) {\n  if (domNode.nodeName.toLowerCase() === 'span') {\n    return domNode.style.fontSize === '26pt';\n  }\n  return false;\n}\nfunction $convertHeadingElement(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  let node = null;\n  if (nodeName === 'h1' || nodeName === 'h2' || nodeName === 'h3' || nodeName === 'h4' || nodeName === 'h5' || nodeName === 'h6') {\n    node = $createHeadingNode(nodeName);\n    if (element.style !== null) {\n      node.setFormat(element.style.textAlign);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $convertBlockquoteElement(element) {\n  const node = $createQuoteNode();\n  if (element.style !== null) {\n    node.setFormat(element.style.textAlign);\n  }\n  return {\n    node\n  };\n}\nfunction $createHeadingNode(headingTag) {\n  return $applyNodeReplacement(new HeadingNode(headingTag));\n}\nfunction $isHeadingNode(node) {\n  return node instanceof HeadingNode;\n}\nfunction onPasteForRichText(event, editor) {\n  event.preventDefault();\n  editor.update(() => {\n    const selection = $getSelection();\n    const clipboardData = objectKlassEquals(event, InputEvent) || objectKlassEquals(event, KeyboardEvent) ? null : event.clipboardData;\n    if (clipboardData != null && selection !== null) {\n      $insertDataTransferForRichText(clipboardData, selection, editor);\n    }\n  }, {\n    tag: 'paste'\n  });\n}\nasync function onCutForRichText(event, editor) {\n  await copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n  editor.update(() => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      selection.removeText();\n    } else if ($isNodeSelection(selection)) {\n      selection.getNodes().forEach(node => node.remove());\n    }\n  });\n}\n\n// Clipboard may contain files that we aren't allowed to read. While the event is arguably useless,\n// in certain occasions, we want to know whether it was a file transfer, as opposed to text. We\n// control this with the first boolean flag.\nfunction eventFiles(event) {\n  let dataTransfer = null;\n  if (objectKlassEquals(event, DragEvent)) {\n    dataTransfer = event.dataTransfer;\n  } else if (objectKlassEquals(event, ClipboardEvent)) {\n    dataTransfer = event.clipboardData;\n  }\n  if (dataTransfer === null) {\n    return [false, [], false];\n  }\n  const types = dataTransfer.types;\n  const hasFiles = types.includes('Files');\n  const hasContent = types.includes('text/html') || types.includes('text/plain');\n  return [hasFiles, Array.from(dataTransfer.files), hasContent];\n}\nfunction $handleIndentAndOutdent(indentOrOutdent) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection)) {\n    return false;\n  }\n  const alreadyHandled = new Set();\n  const nodes = selection.getNodes();\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const key = node.getKey();\n    if (alreadyHandled.has(key)) {\n      continue;\n    }\n    const parentBlock = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n    if (parentBlock === null) {\n      continue;\n    }\n    const parentKey = parentBlock.getKey();\n    if (parentBlock.canIndent() && !alreadyHandled.has(parentKey)) {\n      alreadyHandled.add(parentKey);\n      indentOrOutdent(parentBlock);\n    }\n  }\n  return alreadyHandled.size > 0;\n}\nfunction $isTargetWithinDecorator(target) {\n  const node = $getNearestNodeFromDOMNode(target);\n  return $isDecoratorNode(node);\n}\nfunction $isSelectionAtEndOfRoot(selection) {\n  const focus = selection.focus;\n  return focus.key === 'root' && focus.offset === $getRoot().getChildrenSize();\n}\nfunction registerRichText(editor) {\n  const removeListener = mergeRegister(editor.registerCommand(CLICK_COMMAND, payload => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      selection.clear();\n      return true;\n    }\n    return false;\n  }, 0), editor.registerCommand(DELETE_CHARACTER_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteCharacter(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_WORD_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteWord(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DELETE_LINE_COMMAND, isBackward => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.deleteLine(isBackward);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CONTROLLED_TEXT_INSERTION_COMMAND, eventOrText => {\n    const selection = $getSelection();\n    if (typeof eventOrText === 'string') {\n      if (selection !== null) {\n        selection.insertText(eventOrText);\n      }\n    } else {\n      if (selection === null) {\n        return false;\n      }\n      const dataTransfer = eventOrText.dataTransfer;\n      if (dataTransfer != null) {\n        $insertDataTransferForRichText(dataTransfer, selection, editor);\n      } else if ($isRangeSelection(selection)) {\n        const data = eventOrText.data;\n        if (data) {\n          selection.insertText(data);\n        }\n        return true;\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(REMOVE_TEXT_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.removeText();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_TEXT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.formatText(format);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(FORMAT_ELEMENT_COMMAND, format => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection) && !$isNodeSelection(selection)) {\n      return false;\n    }\n    const nodes = selection.getNodes();\n    for (const node of nodes) {\n      const element = $findMatchingParent(node, parentNode => $isElementNode(parentNode) && !parentNode.isInline());\n      if (element !== null) {\n        element.setFormat(format);\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_LINE_BREAK_COMMAND, selectStart => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertLineBreak(selectStart);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_PARAGRAPH_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    selection.insertParagraph();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INSERT_TAB_COMMAND, () => {\n    $insertNodes([$createTabNode()]);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(INDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      block.setIndent(indent + 1);\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(OUTDENT_CONTENT_COMMAND, () => {\n    return $handleIndentAndOutdent(block => {\n      const indent = block.getIndent();\n      if (indent > 0) {\n        block.setIndent(indent - 1);\n      }\n    });\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_UP_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectPrevious();\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      const possibleNode = $getAdjacentNode(selection.focus, true);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectPrevious();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    } else if ($isRangeSelection(selection)) {\n      if ($isSelectionAtEndOfRoot(selection)) {\n        event.preventDefault();\n        return true;\n      }\n      const possibleNode = $getAdjacentNode(selection.focus, false);\n      if (!event.shiftKey && $isDecoratorNode(possibleNode) && !possibleNode.isIsolated() && !possibleNode.isInline()) {\n        possibleNode.selectNext();\n        event.preventDefault();\n        return true;\n      }\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_LEFT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectPrevious();\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    if ($shouldOverrideDefaultCharacterSelection(selection, true)) {\n      const isHoldingShift = event.shiftKey;\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, true);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ARROW_RIGHT_COMMAND, event => {\n    const selection = $getSelection();\n    if ($isNodeSelection(selection) && !$isTargetWithinDecorator(event.target)) {\n      // If selection is on a node, let's try and move selection\n      // back to being a range selection.\n      const nodes = selection.getNodes();\n      if (nodes.length > 0) {\n        event.preventDefault();\n        nodes[0].selectNext(0, 0);\n        return true;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    const isHoldingShift = event.shiftKey;\n    if ($shouldOverrideDefaultCharacterSelection(selection, false)) {\n      event.preventDefault();\n      $moveCharacter(selection, isHoldingShift, false);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_BACKSPACE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    const {\n      anchor\n    } = selection;\n    const anchorNode = anchor.getNode();\n    if (selection.isCollapsed() && anchor.offset === 0 && !$isRootNode(anchorNode)) {\n      const element = $getNearestBlockElementAncestorOrThrow(anchorNode);\n      if (element.getIndent() > 0) {\n        return editor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined);\n      }\n    }\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, true);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_DELETE_COMMAND, event => {\n    if ($isTargetWithinDecorator(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    event.preventDefault();\n    return editor.dispatchCommand(DELETE_CHARACTER_COMMAND, false);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ENTER_COMMAND, event => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    if (event !== null) {\n      // If we have beforeinput, then we can avoid blocking\n      // the default behavior. This ensures that the iOS can\n      // intercept that we're actually inserting a paragraph,\n      // and autocomplete, autocapitalize etc work as intended.\n      // This can also cause a strange performance issue in\n      // Safari, where there is a noticeable pause due to\n      // preventing the key down of enter.\n      if ((IS_IOS || IS_SAFARI || IS_APPLE_WEBKIT) && CAN_USE_BEFORE_INPUT) {\n        return false;\n      }\n      event.preventDefault();\n      if (event.shiftKey) {\n        return editor.dispatchCommand(INSERT_LINE_BREAK_COMMAND, false);\n      }\n    }\n    return editor.dispatchCommand(INSERT_PARAGRAPH_COMMAND, undefined);\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(KEY_ESCAPE_COMMAND, () => {\n    const selection = $getSelection();\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    editor.blur();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DROP_COMMAND, event => {\n    const [, files] = eventFiles(event);\n    if (files.length > 0) {\n      const x = event.clientX;\n      const y = event.clientY;\n      const eventRange = caretFromPoint(x, y);\n      if (eventRange !== null) {\n        const {\n          offset: domOffset,\n          node: domNode\n        } = eventRange;\n        const node = $getNearestNodeFromDOMNode(domNode);\n        if (node !== null) {\n          const selection = $createRangeSelection();\n          if ($isTextNode(node)) {\n            selection.anchor.set(node.getKey(), domOffset, 'text');\n            selection.focus.set(node.getKey(), domOffset, 'text');\n          } else {\n            const parentKey = node.getParentOrThrow().getKey();\n            const offset = node.getIndexWithinParent() + 1;\n            selection.anchor.set(parentKey, offset, 'element');\n            selection.focus.set(parentKey, offset, 'element');\n          }\n          const normalizedSelection = $normalizeSelection__EXPERIMENTAL(selection);\n          $setSelection(normalizedSelection);\n        }\n        editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      }\n      event.preventDefault();\n      return true;\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGSTART_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(DRAGOVER_COMMAND, event => {\n    const [isFileTransfer] = eventFiles(event);\n    const selection = $getSelection();\n    if (isFileTransfer && !$isRangeSelection(selection)) {\n      return false;\n    }\n    const x = event.clientX;\n    const y = event.clientY;\n    const eventRange = caretFromPoint(x, y);\n    if (eventRange !== null) {\n      const node = $getNearestNodeFromDOMNode(eventRange.node);\n      if ($isDecoratorNode(node)) {\n        // Show browser caret as the user is dragging the media across the screen. Won't work\n        // for DecoratorNode nor it's relevant.\n        event.preventDefault();\n      }\n    }\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(SELECT_ALL_COMMAND, () => {\n    $selectAll();\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(COPY_COMMAND, event => {\n    copyToClipboard(editor, objectKlassEquals(event, ClipboardEvent) ? event : null);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(CUT_COMMAND, event => {\n    onCutForRichText(event, editor);\n    return true;\n  }, COMMAND_PRIORITY_EDITOR), editor.registerCommand(PASTE_COMMAND, event => {\n    const [, files, hasTextContent] = eventFiles(event);\n    if (files.length > 0 && !hasTextContent) {\n      editor.dispatchCommand(DRAG_DROP_PASTE, files);\n      return true;\n    }\n\n    // if inputs then paste within the input ignore creating a new node on paste event\n    if (isSelectionCapturedInDecoratorInput(event.target)) {\n      return false;\n    }\n    const selection = $getSelection();\n    if (selection !== null) {\n      onPasteForRichText(event, editor);\n      return true;\n    }\n    return false;\n  }, COMMAND_PRIORITY_EDITOR));\n  return removeListener;\n}\n\nexport { $createHeadingNode, $createQuoteNode, $isHeadingNode, $isQuoteNode, DRAG_DROP_PASTE, HeadingNode, QuoteNode, eventFiles, registerRichText };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}