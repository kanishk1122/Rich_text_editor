{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getSelection, $isNodeSelection, $createNodeSelection, $setSelection, $getNodeByKey } from 'lexical';\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction isNodeSelected(editor, key) {\n  return editor.getEditorState().read(() => {\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      return false;\n    }\n    return node.isSelected();\n  });\n}\nfunction useLexicalNodeSelection(key) {\n  const [editor] = useLexicalComposerContext();\n  const [isSelected, setIsSelected] = useState(() => isNodeSelected(editor, key));\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = editor.registerUpdateListener(() => {\n      if (isMounted) {\n        setIsSelected(isNodeSelected(editor, key));\n      }\n    });\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [editor, key]);\n  const setSelected = useCallback(selected => {\n    editor.update(() => {\n      let selection = $getSelection();\n      if (!$isNodeSelection(selection)) {\n        selection = $createNodeSelection();\n        $setSelection(selection);\n      }\n      if ($isNodeSelection(selection)) {\n        if (selected) {\n          selection.add(key);\n        } else {\n          selection.delete(key);\n        }\n      }\n    });\n  }, [editor, key]);\n  const clearSelected = useCallback(() => {\n    editor.update(() => {\n      const selection = $getSelection();\n      if ($isNodeSelection(selection)) {\n        selection.clear();\n      }\n    });\n  }, [editor]);\n  return [isSelected, setSelected, clearSelected];\n}\nexport { useLexicalNodeSelection };","map":{"version":3,"names":["useLexicalComposerContext","$getSelection","$isNodeSelection","$createNodeSelection","$setSelection","$getNodeByKey","useState","useEffect","useCallback","isNodeSelected","editor","key","getEditorState","read","node","isSelected","useLexicalNodeSelection","setIsSelected","isMounted","unregister","registerUpdateListener","setSelected","selected","update","selection","add","delete","clearSelected","clear"],"sources":["/media/ks/My thing/test/textditor_Using_lixical/node_modules/@lexical/react/useLexicalNodeSelection.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { $getSelection, $isNodeSelection, $createNodeSelection, $setSelection, $getNodeByKey } from 'lexical';\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction isNodeSelected(editor, key) {\n  return editor.getEditorState().read(() => {\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      return false;\n    }\n    return node.isSelected();\n  });\n}\nfunction useLexicalNodeSelection(key) {\n  const [editor] = useLexicalComposerContext();\n  const [isSelected, setIsSelected] = useState(() => isNodeSelected(editor, key));\n  useEffect(() => {\n    let isMounted = true;\n    const unregister = editor.registerUpdateListener(() => {\n      if (isMounted) {\n        setIsSelected(isNodeSelected(editor, key));\n      }\n    });\n    return () => {\n      isMounted = false;\n      unregister();\n    };\n  }, [editor, key]);\n  const setSelected = useCallback(selected => {\n    editor.update(() => {\n      let selection = $getSelection();\n      if (!$isNodeSelection(selection)) {\n        selection = $createNodeSelection();\n        $setSelection(selection);\n      }\n      if ($isNodeSelection(selection)) {\n        if (selected) {\n          selection.add(key);\n        } else {\n          selection.delete(key);\n        }\n      }\n    });\n  }, [editor, key]);\n  const clearSelected = useCallback(() => {\n    editor.update(() => {\n      const selection = $getSelection();\n      if ($isNodeSelection(selection)) {\n        selection.clear();\n      }\n    });\n  }, [editor]);\n  return [isSelected, setSelected, clearSelected];\n}\n\nexport { useLexicalNodeSelection };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,aAAa,EAAEC,gBAAgB,EAAEC,oBAAoB,EAAEC,aAAa,EAAEC,aAAa,QAAQ,SAAS;AAC7G,SAASC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,cAAcA,CAACC,MAAM,EAAEC,GAAG,EAAE;EACnC,OAAOD,MAAM,CAACE,cAAc,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;IACxC,MAAMC,IAAI,GAAGT,aAAa,CAACM,GAAG,CAAC;IAC/B,IAAIG,IAAI,KAAK,IAAI,EAAE;MACjB,OAAO,KAAK;IACd;IACA,OAAOA,IAAI,CAACC,UAAU,CAAC,CAAC;EAC1B,CAAC,CAAC;AACJ;AACA,SAASC,uBAAuBA,CAACL,GAAG,EAAE;EACpC,MAAM,CAACD,MAAM,CAAC,GAAGV,yBAAyB,CAAC,CAAC;EAC5C,MAAM,CAACe,UAAU,EAAEE,aAAa,CAAC,GAAGX,QAAQ,CAAC,MAAMG,cAAc,CAACC,MAAM,EAAEC,GAAG,CAAC,CAAC;EAC/EJ,SAAS,CAAC,MAAM;IACd,IAAIW,SAAS,GAAG,IAAI;IACpB,MAAMC,UAAU,GAAGT,MAAM,CAACU,sBAAsB,CAAC,MAAM;MACrD,IAAIF,SAAS,EAAE;QACbD,aAAa,CAACR,cAAc,CAACC,MAAM,EAAEC,GAAG,CAAC,CAAC;MAC5C;IACF,CAAC,CAAC;IACF,OAAO,MAAM;MACXO,SAAS,GAAG,KAAK;MACjBC,UAAU,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,CAACT,MAAM,EAAEC,GAAG,CAAC,CAAC;EACjB,MAAMU,WAAW,GAAGb,WAAW,CAACc,QAAQ,IAAI;IAC1CZ,MAAM,CAACa,MAAM,CAAC,MAAM;MAClB,IAAIC,SAAS,GAAGvB,aAAa,CAAC,CAAC;MAC/B,IAAI,CAACC,gBAAgB,CAACsB,SAAS,CAAC,EAAE;QAChCA,SAAS,GAAGrB,oBAAoB,CAAC,CAAC;QAClCC,aAAa,CAACoB,SAAS,CAAC;MAC1B;MACA,IAAItB,gBAAgB,CAACsB,SAAS,CAAC,EAAE;QAC/B,IAAIF,QAAQ,EAAE;UACZE,SAAS,CAACC,GAAG,CAACd,GAAG,CAAC;QACpB,CAAC,MAAM;UACLa,SAAS,CAACE,MAAM,CAACf,GAAG,CAAC;QACvB;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACD,MAAM,EAAEC,GAAG,CAAC,CAAC;EACjB,MAAMgB,aAAa,GAAGnB,WAAW,CAAC,MAAM;IACtCE,MAAM,CAACa,MAAM,CAAC,MAAM;MAClB,MAAMC,SAAS,GAAGvB,aAAa,CAAC,CAAC;MACjC,IAAIC,gBAAgB,CAACsB,SAAS,CAAC,EAAE;QAC/BA,SAAS,CAACI,KAAK,CAAC,CAAC;MACnB;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAClB,MAAM,CAAC,CAAC;EACZ,OAAO,CAACK,UAAU,EAAEM,WAAW,EAAEM,aAAa,CAAC;AACjD;AAEA,SAASX,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}