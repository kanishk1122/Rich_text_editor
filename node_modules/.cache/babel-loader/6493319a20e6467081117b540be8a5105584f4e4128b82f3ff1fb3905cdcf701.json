{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { INSERT_ORDERED_LIST_COMMAND, insertList, INSERT_UNORDERED_LIST_COMMAND, REMOVE_LIST_COMMAND, removeList, $handleListInsertParagraph, ListNode, ListItemNode } from '@lexical/list';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useEffect } from 'react';\nimport { mergeRegister } from '@lexical/utils';\nimport { COMMAND_PRIORITY_LOW, INSERT_PARAGRAPH_COMMAND } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useList(editor) {\n  useEffect(() => {\n    return mergeRegister(editor.registerCommand(INSERT_ORDERED_LIST_COMMAND, () => {\n      insertList(editor, 'number');\n      return true;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(INSERT_UNORDERED_LIST_COMMAND, () => {\n      insertList(editor, 'bullet');\n      return true;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(REMOVE_LIST_COMMAND, () => {\n      removeList(editor);\n      return true;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(INSERT_PARAGRAPH_COMMAND, () => {\n      const hasHandledInsertParagraph = $handleListInsertParagraph();\n      if (hasHandledInsertParagraph) {\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW));\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction ListPlugin() {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([ListNode, ListItemNode])) {\n      throw new Error('ListPlugin: ListNode and/or ListItemNode not registered on editor');\n    }\n  }, [editor]);\n  useList(editor);\n  return null;\n}\nexport { ListPlugin };","map":{"version":3,"names":["INSERT_ORDERED_LIST_COMMAND","insertList","INSERT_UNORDERED_LIST_COMMAND","REMOVE_LIST_COMMAND","removeList","$handleListInsertParagraph","ListNode","ListItemNode","useLexicalComposerContext","useEffect","mergeRegister","COMMAND_PRIORITY_LOW","INSERT_PARAGRAPH_COMMAND","useList","editor","registerCommand","hasHandledInsertParagraph","ListPlugin","hasNodes","Error"],"sources":["/media/ks/My thing/test/textditor/node_modules/@lexical/react/LexicalListPlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { INSERT_ORDERED_LIST_COMMAND, insertList, INSERT_UNORDERED_LIST_COMMAND, REMOVE_LIST_COMMAND, removeList, $handleListInsertParagraph, ListNode, ListItemNode } from '@lexical/list';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { useEffect } from 'react';\nimport { mergeRegister } from '@lexical/utils';\nimport { COMMAND_PRIORITY_LOW, INSERT_PARAGRAPH_COMMAND } from 'lexical';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction useList(editor) {\n  useEffect(() => {\n    return mergeRegister(editor.registerCommand(INSERT_ORDERED_LIST_COMMAND, () => {\n      insertList(editor, 'number');\n      return true;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(INSERT_UNORDERED_LIST_COMMAND, () => {\n      insertList(editor, 'bullet');\n      return true;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(REMOVE_LIST_COMMAND, () => {\n      removeList(editor);\n      return true;\n    }, COMMAND_PRIORITY_LOW), editor.registerCommand(INSERT_PARAGRAPH_COMMAND, () => {\n      const hasHandledInsertParagraph = $handleListInsertParagraph();\n      if (hasHandledInsertParagraph) {\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW));\n  }, [editor]);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction ListPlugin() {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([ListNode, ListItemNode])) {\n      throw new Error('ListPlugin: ListNode and/or ListItemNode not registered on editor');\n    }\n  }, [editor]);\n  useList(editor);\n  return null;\n}\n\nexport { ListPlugin };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,2BAA2B,EAAEC,UAAU,EAAEC,6BAA6B,EAAEC,mBAAmB,EAAEC,UAAU,EAAEC,0BAA0B,EAAEC,QAAQ,EAAEC,YAAY,QAAQ,eAAe;AAC3L,SAASC,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,SAASC,oBAAoB,EAAEC,wBAAwB,QAAQ,SAAS;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,OAAOA,CAACC,MAAM,EAAE;EACvBL,SAAS,CAAC,MAAM;IACd,OAAOC,aAAa,CAACI,MAAM,CAACC,eAAe,CAACf,2BAA2B,EAAE,MAAM;MAC7EC,UAAU,CAACa,MAAM,EAAE,QAAQ,CAAC;MAC5B,OAAO,IAAI;IACb,CAAC,EAAEH,oBAAoB,CAAC,EAAEG,MAAM,CAACC,eAAe,CAACb,6BAA6B,EAAE,MAAM;MACpFD,UAAU,CAACa,MAAM,EAAE,QAAQ,CAAC;MAC5B,OAAO,IAAI;IACb,CAAC,EAAEH,oBAAoB,CAAC,EAAEG,MAAM,CAACC,eAAe,CAACZ,mBAAmB,EAAE,MAAM;MAC1EC,UAAU,CAACU,MAAM,CAAC;MAClB,OAAO,IAAI;IACb,CAAC,EAAEH,oBAAoB,CAAC,EAAEG,MAAM,CAACC,eAAe,CAACH,wBAAwB,EAAE,MAAM;MAC/E,MAAMI,yBAAyB,GAAGX,0BAA0B,CAAC,CAAC;MAC9D,IAAIW,yBAAyB,EAAE;QAC7B,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,EAAEL,oBAAoB,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACG,MAAM,CAAC,CAAC;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASG,UAAUA,CAAA,EAAG;EACpB,MAAM,CAACH,MAAM,CAAC,GAAGN,yBAAyB,CAAC,CAAC;EAC5CC,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,MAAM,CAACI,QAAQ,CAAC,CAACZ,QAAQ,EAAEC,YAAY,CAAC,CAAC,EAAE;MAC9C,MAAM,IAAIY,KAAK,CAAC,mEAAmE,CAAC;IACtF;EACF,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EACZD,OAAO,CAACC,MAAM,CAAC;EACf,OAAO,IAAI;AACb;AAEA,SAASG,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}