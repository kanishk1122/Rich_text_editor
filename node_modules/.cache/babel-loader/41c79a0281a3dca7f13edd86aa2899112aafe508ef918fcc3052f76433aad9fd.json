{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar link = require('@lexical/link');\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar lexical = require('lexical');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction LinkPlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([link.LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n  }, [editor]);\n  react.useEffect(() => {\n    return editor.registerCommand(link.TOGGLE_LINK_COMMAND, payload => {\n      if (typeof payload === 'string' || payload === null) {\n        link.toggleLink(payload);\n      } else {\n        const {\n          url,\n          target,\n          rel\n        } = payload;\n        link.toggleLink(url, {\n          rel,\n          target\n        });\n      }\n      return true;\n    }, lexical.COMMAND_PRIORITY_EDITOR);\n  }, [editor]);\n  return null;\n}\nexports.LinkPlugin = LinkPlugin;","map":{"version":3,"names":["link","require","LexicalComposerContext","lexical","react","LinkPlugin","editor","useLexicalComposerContext","useEffect","hasNodes","LinkNode","Error","registerCommand","TOGGLE_LINK_COMMAND","payload","toggleLink","url","target","rel","COMMAND_PRIORITY_EDITOR","exports"],"sources":["/media/ks/My thing/test/textditor/node_modules/@lexical/react/LexicalLinkPlugin.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar link = require('@lexical/link');\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar lexical = require('lexical');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction LinkPlugin() {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    if (!editor.hasNodes([link.LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n  }, [editor]);\n  react.useEffect(() => {\n    return editor.registerCommand(link.TOGGLE_LINK_COMMAND, payload => {\n      if (typeof payload === 'string' || payload === null) {\n        link.toggleLink(payload);\n      } else {\n        const {\n          url,\n          target,\n          rel\n        } = payload;\n        link.toggleLink(url, {\n          rel,\n          target\n        });\n      }\n\n      return true;\n    }, lexical.COMMAND_PRIORITY_EDITOR);\n  }, [editor]);\n  return null;\n}\n\nexports.LinkPlugin = LinkPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAe,CAAC;AACnC,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,uCAAuC,CAAC;AAC7E,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAChC,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,UAAUA,CAAA,EAAG;EACpB,MAAM,CAACC,MAAM,CAAC,GAAGJ,sBAAsB,CAACK,yBAAyB,CAAC,CAAC;EACnEH,KAAK,CAACI,SAAS,CAAC,MAAM;IACpB,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAACT,IAAI,CAACU,QAAQ,CAAC,CAAC,EAAE;MACrC,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;IAClE;EACF,CAAC,EAAE,CAACL,MAAM,CAAC,CAAC;EACZF,KAAK,CAACI,SAAS,CAAC,MAAM;IACpB,OAAOF,MAAM,CAACM,eAAe,CAACZ,IAAI,CAACa,mBAAmB,EAAEC,OAAO,IAAI;MACjE,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAAE;QACnDd,IAAI,CAACe,UAAU,CAACD,OAAO,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM;UACJE,GAAG;UACHC,MAAM;UACNC;QACF,CAAC,GAAGJ,OAAO;QACXd,IAAI,CAACe,UAAU,CAACC,GAAG,EAAE;UACnBE,GAAG;UACHD;QACF,CAAC,CAAC;MACJ;MAEA,OAAO,IAAI;IACb,CAAC,EAAEd,OAAO,CAACgB,uBAAuB,CAAC;EACrC,CAAC,EAAE,CAACb,MAAM,CAAC,CAAC;EACZ,OAAO,IAAI;AACb;AAEAc,OAAO,CAACf,UAAU,GAAGA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}