{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { createLexicalComposerContext, LexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { createEditor, $getRoot, $createParagraphNode, $getSelection } from 'lexical';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE_OPTIONS = {\n  tag: 'history-merge'\n};\nfunction LexicalComposer(_ref) {\n  let {\n    initialConfig,\n    children\n  } = _ref;\n  const composerContext = useMemo(() => {\n    const {\n      theme,\n      namespace,\n      nodes,\n      onError,\n      editorState: initialEditorState,\n      html\n    } = initialConfig;\n    const context = createLexicalComposerContext(null, theme);\n    const editor = createEditor({\n      editable: initialConfig.editable,\n      html,\n      namespace,\n      nodes,\n      onError: error => onError(error, editor),\n      theme\n    });\n    initializeEditor(editor, initialEditorState);\n    return [editor, context];\n  },\n  // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffectImpl(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/jsx(LexicalComposerContext.Provider, {\n    value: composerContext,\n    children: children\n  });\n}\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = $getRoot();\n      if (root.isEmpty()) {\n        const paragraph = $createParagraphNode();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n        if ($getSelection() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'function':\n        {\n          editor.update(() => {\n            const root = $getRoot();\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\nexport { LexicalComposer };","map":{"version":3,"names":["createLexicalComposerContext","LexicalComposerContext","createEditor","$getRoot","$createParagraphNode","$getSelection","useLayoutEffect","useEffect","useMemo","jsx","CAN_USE_DOM","window","document","createElement","useLayoutEffectImpl","HISTORY_MERGE_OPTIONS","tag","LexicalComposer","_ref","initialConfig","children","composerContext","theme","namespace","nodes","onError","editorState","initialEditorState","html","context","editor","editable","error","initializeEditor","isEditable","setEditable","undefined","Provider","value","update","root","isEmpty","paragraph","append","activeElement","getRootElement","select","parsedEditorState","parseEditorState","setEditorState"],"sources":["/media/ks/My thing/test/textditor_Using_lixical/node_modules/@lexical/react/LexicalComposer.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { createLexicalComposerContext, LexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { createEditor, $getRoot, $createParagraphNode, $getSelection } from 'lexical';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// This workaround is no longer necessary in React 19,\n// but we currently support React >=17.x\n// https://github.com/facebook/react/pull/26395\nconst useLayoutEffectImpl = CAN_USE_DOM ? useLayoutEffect : useEffect;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HISTORY_MERGE_OPTIONS = {\n  tag: 'history-merge'\n};\nfunction LexicalComposer({\n  initialConfig,\n  children\n}) {\n  const composerContext = useMemo(() => {\n    const {\n      theme,\n      namespace,\n      nodes,\n      onError,\n      editorState: initialEditorState,\n      html\n    } = initialConfig;\n    const context = createLexicalComposerContext(null, theme);\n    const editor = createEditor({\n      editable: initialConfig.editable,\n      html,\n      namespace,\n      nodes,\n      onError: error => onError(error, editor),\n      theme\n    });\n    initializeEditor(editor, initialEditorState);\n    return [editor, context];\n  },\n  // We only do this for init\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  useLayoutEffectImpl(() => {\n    const isEditable = initialConfig.editable;\n    const [editor] = composerContext;\n    editor.setEditable(isEditable !== undefined ? isEditable : true);\n\n    // We only do this for init\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/jsx(LexicalComposerContext.Provider, {\n    value: composerContext,\n    children: children\n  });\n}\nfunction initializeEditor(editor, initialEditorState) {\n  if (initialEditorState === null) {\n    return;\n  } else if (initialEditorState === undefined) {\n    editor.update(() => {\n      const root = $getRoot();\n      if (root.isEmpty()) {\n        const paragraph = $createParagraphNode();\n        root.append(paragraph);\n        const activeElement = CAN_USE_DOM ? document.activeElement : null;\n        if ($getSelection() !== null || activeElement !== null && activeElement === editor.getRootElement()) {\n          paragraph.select();\n        }\n      }\n    }, HISTORY_MERGE_OPTIONS);\n  } else if (initialEditorState !== null) {\n    switch (typeof initialEditorState) {\n      case 'string':\n        {\n          const parsedEditorState = editor.parseEditorState(initialEditorState);\n          editor.setEditorState(parsedEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'object':\n        {\n          editor.setEditorState(initialEditorState, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n      case 'function':\n        {\n          editor.update(() => {\n            const root = $getRoot();\n            if (root.isEmpty()) {\n              initialEditorState(editor);\n            }\n          }, HISTORY_MERGE_OPTIONS);\n          break;\n        }\n    }\n  }\n}\n\nexport { LexicalComposer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}