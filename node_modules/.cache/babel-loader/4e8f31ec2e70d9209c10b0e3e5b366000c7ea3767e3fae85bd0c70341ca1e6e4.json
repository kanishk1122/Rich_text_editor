{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createCommand(type) {\n  return {\n    type\n  };\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = createCommand('SELECTION_INSERT_CLIPBOARD_NODES_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INSERT_TAB_COMMAND = createCommand('INSERT_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst SELECT_ALL_COMMAND = createCommand('SELECT_ALL_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nconst IS_ANDROID = CAN_USE_DOM && /Android/.test(navigator.userAgent);\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_ANDROID_CHROME = CAN_USE_DOM && IS_ANDROID && IS_CHROME;\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// DOM\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3;\n\n// Reconciling\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2;\n\n// Text node modes\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2;\n// IS_INERT = 3\n\n// Text node formatting\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT;\n\n// Text node details\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1;\n\n// Element node formatting\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6;\n\n// Reconciliation\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b';\n\n// For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n';\n\n// For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n// eslint-disable-next-line no-misleading-character-class\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']');\n// eslint-disable-next-line no-misleading-character-class\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction normalizeClassNames() {\n  const rval = [];\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n  for (const className of classNames) {\n    if (className && typeof className === 'string') {\n      for (const [s] of className.matchAll(/\\S+/g)) {\n        rval.push(s);\n      }\n    }\n  }\n  return rval;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// The time between a text entry event and the mutation observer firing.\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcessingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction $handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement();\n      // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            $handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true;\n          // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = $getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      }\n\n      // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      }\n\n      // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n      const records = observer.takeRecords();\n\n      // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        }\n\n        // Clear any of those removal mutations\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction $flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  }\n\n  // Backward\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  }\n\n  // Forward\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet keyCounter = 1;\nfunction resetRandomKey() {\n  keyCounter = 1;\n}\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' && getEditorPropertyFromDOMNode(activeElement) == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * @returns true if the given argument is a LexicalEditor instance from this build of Lexical\n */\nfunction isLexicalEditor(editor) {\n  // Check instanceof to prevent issues with multiple embedded Lexical installations\n  return editor instanceof LexicalEditor;\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    const editor = getEditorPropertyFromDOMNode(currentNode);\n    if (isLexicalEditor(editor)) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\n\n/** @internal */\nfunction getEditorPropertyFromDOMNode(node) {\n  // @ts-expect-error: internal field\n  return node ? node.__lexicalEditor : null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  if (alignWithFormat !== null && (format & activeFormat) === (alignWithFormat & activeFormat)) {\n    return format;\n  }\n  let newFormat = format ^ activeFormat;\n  if (type === 'subscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.superscript;\n  } else if (type === 'superscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.subscript;\n  }\n  return newFormat;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    {\n      errorOnNodeKeyConstructorMismatch(node, existingKey);\n    }\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node);\n  // TODO Split this function into leaf/element\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction errorOnNodeKeyConstructorMismatch(node, existingKey) {\n  const editorState = internalGetActiveEditorState();\n  if (!editorState) {\n    // tests expect to be able to do this kind of clone without an active editor state\n    return;\n  }\n  const existingNode = editorState._nodeMap.get(existingKey);\n  if (existingNode && existingNode.constructor !== node.constructor) {\n    // Lifted condition to if statement because the inverted logic is a bit confusing\n    if (node.constructor.name !== existingNode.constructor.name) {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with constructor ${existingNode.constructor.name}. Keys must not be re-used when the type is changed.`);\n      }\n    } else {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with different constructor with the same name (possibly due to invalid Hot Module Replacement). Keys must not be re-used when the type is changed.`);\n      }\n    }\n  }\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\n\n// TODO #6031 this function or their callers have to adjust selection (i.e. insertBefore)\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling();\n    // TODO: this function duplicates a bunch of operations, can be simplified.\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n// Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction $getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor();\n  // @ts-ignore We intentionally add this to the Node.\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = $getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection.setCachedNodes(null);\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  $flushRootMutations(editor);\n}\nfunction $getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const prevTextContentSize = node.getTextContentSize();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start or boundaries when not insertable, and we need\n      // to clear this input from occurring as that action wasn't permitted.\n      $isRangeSelection(prevSelection) && (parent !== null && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0 || prevSelection.anchor.key === textNode.__key && prevSelection.anchor.offset === 0 && !node.canInsertTextBefore() && !isComposing || prevSelection.focus.key === textNode.__key && prevSelection.focus.offset === prevTextContentSize && !node.canInsertTextAfter() && !isComposing)) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n}\n\n// This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() && !node.isComposing() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() && !node.isComposing() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(key, altKey, ctrlKey, metaKey) {\n  return key === 'Tab' && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'b' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'i' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'u' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(key, shiftKey) {\n  return isReturn(key) && !shiftKey;\n}\nfunction isLineBreak(key, shiftKey) {\n  return isReturn(key) && shiftKey;\n}\n\n// Inserts a new line after the selection\n\nfunction isOpenLineBreak(key, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && key.toLowerCase() === 'o';\n}\nfunction isDeleteWordBackward(key, altKey, ctrlKey) {\n  return isBackspace(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(key, altKey, ctrlKey) {\n  return isDelete(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(key, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(key);\n}\nfunction isDeleteLineForward(key, metaKey) {\n  return IS_APPLE && metaKey && isDelete(key);\n}\nfunction isDeleteBackward(key, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(key) || key.toLowerCase() === 'h' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(key);\n}\nfunction isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(key) || key.toLowerCase() === 'd' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(key);\n}\nfunction isUndo(key, shiftKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'z' && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(key, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return key.toLowerCase() === 'z' && metaKey && shiftKey;\n  }\n  return key.toLowerCase() === 'y' && ctrlKey || key.toLowerCase() === 'z' && ctrlKey && shiftKey;\n}\nfunction isCopy(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'c') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'x') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(key) {\n  return key === 'ArrowLeft';\n}\nfunction isArrowRight(key) {\n  return key === 'ArrowRight';\n}\nfunction isArrowUp(key) {\n  return key === 'ArrowUp';\n}\nfunction isArrowDown(key) {\n  return key === 'ArrowDown';\n}\nfunction isMoveBackward(key, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(key, ctrlKey, altKey, metaKey) {\n  return isArrowRight(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(key, ctrlKey, metaKey) {\n  return isArrowUp(key) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(key, ctrlKey, metaKey) {\n  return isArrowDown(key) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(key) {\n  return key === ' ';\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(key) {\n  return key === 'Enter';\n}\nfunction isBackspace(key) {\n  return key === 'Backspace';\n}\nfunction isEscape(key) {\n  return key === 'Escape';\n}\nfunction isDelete(key) {\n  return key === 'Delete';\n}\nfunction isSelectAll(key, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'a' && controlOrMeta(metaKey, ctrlKey);\n}\nfunction $selectAll() {\n  const root = $getRoot();\n  const selection = root.select(0, root.getChildrenSize());\n  $setSelection($normalizeSelection(selection));\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  if (classNamesTheme.__lexicalClassNameCache === undefined) {\n    classNamesTheme.__lexicalClassNameCache = {};\n  }\n  const classNamesCache = classNamesTheme.__lexicalClassNameCache;\n  const cachedClassNames = classNamesCache[classNameThemeType];\n  if (cachedClassNames !== undefined) {\n    return cachedClassNames;\n  }\n  const classNames = classNamesTheme[classNameThemeType];\n  // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n  if (typeof classNames === 'string') {\n    const classNamesArr = normalizeClassNames(classNames);\n    classNamesCache[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey);\n  // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const klassType = klass.getType();\n  const editorState = getActiveEditorState();\n  if (editorState._readOnly) {\n    const nodes = getCachedTypeToNodeMap(editorState).get(klassType);\n    return nodes ? Array.from(nodes.values()) : [];\n  }\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && node.isAttached()) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\n\n/**\n * Returns a shallow clone of node with a new key\n *\n * @param node - The node to be copied.\n * @returns The copy of the node.\n */\nfunction $copyNode(node) {\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction $getNodeByKeyOrThrow(key) {\n  const node = $getNodeByKey(key);\n  if (node === null) {\n    {\n      throw Error(`Expected node with key ${key} to exist but it's not in the nodeMap.`);\n    }\n  }\n  return node;\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = normalizeClassNames(blockCursorTheme);\n      // @ts-expect-error: intentional\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  }\n  // Remove cursor\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent);\n    // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      if (!($isElementNode(currentNode) && $isElementNode(nodeToMove))) {\n        throw Error(`Children of a root must be ElementNode`);\n      }\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML anchor tag, false otherwise\n */\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\n\n/**\n * @param x - The element being testing\n * @returns Returns true if x is an HTML element, false otherwise.\n */\nfunction isHTMLElement(x) {\n  // @ts-ignore-next-line - strict check on nodeType here should filter out non-Element EventTarget implementors\n  return x.nodeType === 1;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is an inline node\n */\nfunction isInlineDomNode(node) {\n  const inlineNodes = new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var|#text)$/, 'i');\n  return node.nodeName.match(inlineNodes) !== null;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is a block node\n */\nfunction isBlockDomNode(node) {\n  const blockNodes = new RegExp(/^(address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hr|li|main|nav|noscript|ol|p|pre|section|table|td|tfoot|ul|video)$/, 'i');\n  return node.nodeName.match(blockNodes) !== null;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isRootNode(node) || $isDecoratorNode(node) && !node.isInline()) {\n    return true;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Utility function for accessing current active editor instance.\n * @returns Current active editor\n */\nfunction $getEditor() {\n  return getActiveEditor();\n}\n\n/** @internal */\n\n/**\n * @internal\n * Compute a cached Map of node type to nodes for a frozen EditorState\n */\nconst cachedNodeMaps = new WeakMap();\nconst EMPTY_TYPE_TO_NODE_MAP = new Map();\nfunction getCachedTypeToNodeMap(editorState) {\n  // If this is a new Editor it may have a writable this._editorState\n  // with only a 'root' entry.\n  if (!editorState._readOnly && editorState.isEmpty()) {\n    return EMPTY_TYPE_TO_NODE_MAP;\n  }\n  if (!editorState._readOnly) {\n    throw Error(`getCachedTypeToNodeMap called with a writable EditorState`);\n  }\n  let typeToNodeMap = cachedNodeMaps.get(editorState);\n  if (!typeToNodeMap) {\n    typeToNodeMap = new Map();\n    cachedNodeMaps.set(editorState, typeToNodeMap);\n    for (const [nodeKey, node] of editorState._nodeMap) {\n      const nodeType = node.__type;\n      let nodeMap = typeToNodeMap.get(nodeType);\n      if (!nodeMap) {\n        nodeMap = new Map();\n        typeToNodeMap.set(nodeType, nodeMap);\n      }\n      nodeMap.set(nodeKey, node);\n    }\n  }\n  return typeToNodeMap;\n}\n\n/**\n * Returns a clone of a node using `node.constructor.clone()` followed by\n * `clone.afterCloneFrom(node)`. The resulting clone must have the same key,\n * parent/next/prev pointers, and other properties that are not set by\n * `node.constructor.clone` (format, style, etc.). This is primarily used by\n * {@link LexicalNode.getWritable} to create a writable version of an\n * existing node. The clone is the same logical node as the original node,\n * do not try and use this function to duplicate or copy an existing node.\n *\n * Does not mutate the EditorState.\n * @param node - The node to be cloned.\n * @returns The clone of the node.\n */\nfunction $cloneWithProperties(latestNode) {\n  const constructor = latestNode.constructor;\n  const mutableNode = constructor.clone(latestNode);\n  mutableNode.afterCloneFrom(latestNode);\n  {\n    if (!(mutableNode.__key === latestNode.__key)) {\n      throw Error(`$cloneWithProperties: ${constructor.name}.clone(node) (with type '${constructor.getType()}') did not return a node with the same key, make sure to specify node.__key as the last argument to the constructor`);\n    }\n    if (!(mutableNode.__parent === latestNode.__parent && mutableNode.__next === latestNode.__next && mutableNode.__prev === latestNode.__prev)) {\n      throw Error(`$cloneWithProperties: ${constructor.name}.clone(node) (with type '${constructor.getType()}') overrided afterCloneFrom but did not call super.afterCloneFrom(prevNode)`);\n    }\n  }\n  return mutableNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    // TODO Revise condition below, redundant? LexicalNode already cleans up children when moving Nodes\n    if (child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes);\n      }\n\n      // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMapDelete.push(childKey);\n    }\n    child = child.getNextSibling();\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  // Store dirtyElements in a queue for later deletion; deleting dirty subtrees too early will\n  // hinder accessing .__next on child nodes\n  const nodeMapDelete = [];\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyElements);\n        }\n        // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMapDelete.push(nodeKey);\n      }\n    }\n  }\n  for (const nodeKey of nodeMapDelete) {\n    nodeMap.delete(nodeKey);\n  }\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet subTreeTextFormat = null;\nlet subTreeTextStyle = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  }\n\n  // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction $createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1);\n\n  // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      $createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n      // Decorators are always non editable\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction $createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  $createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction $createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    $createNode(children[startIndex], dom, insertDOM);\n    const node = activeNextNodeMap.get(children[startIndex]);\n    if (node !== null && $isTextNode(node)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = node.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = node.getStyle();\n      }\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n}\n\n// If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        try {\n          dom.removeChild(element);\n        } catch (error) {\n          if (typeof error === 'object' && error != null) {\n            const msg = `${error.toString()} Parent: ${dom.tagName}, child: ${element.tagName}.`;\n            throw new Error(msg);\n          } else {\n            throw error;\n          }\n        }\n      }\n\n      // @ts-expect-error: internal field\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br');\n    // @ts-expect-error: internal field\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileParagraphFormat(element) {\n  if ($isParagraphNode(element) && subTreeTextFormat != null && subTreeTextFormat !== element.__textFormat && !activeEditorStateReadOnly) {\n    element.setTextFormat(subTreeTextFormat);\n    element.setTextStyle(subTreeTextStyle);\n  }\n}\nfunction reconcileParagraphStyle(element) {\n  if ($isParagraphNode(element) && subTreeTextStyle !== '' && subTreeTextStyle !== element.__textStyle && !activeEditorStateReadOnly) {\n    element.setTextStyle(subTreeTextStyle);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent;\n  // @ts-expect-error: internal field\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined;\n\n      // Remove the old theme classes if they exist\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = normalizeClassNames(previousDirectionTheme);\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        }\n\n        // @ts-ignore: intentional\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = normalizeClassNames(nextDirectionTheme);\n            // @ts-expect-error: intentional\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        }\n\n        // Update direction\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction;\n    // @ts-expect-error: internal field\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent;\n    // @ts-expect-error: internal field\n    dom.__lexicalDir = direction;\n  }\n}\nfunction $reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  subTreeTextFormat = null;\n  subTreeTextStyle = '';\n  $reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  reconcileParagraphFormat(nextElement);\n  reconcileParagraphStyle(nextElement);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction $reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      $reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = $createNode(nextFrstChildKey, null, null);\n      try {\n        dom.replaceChild(replacementDOM, lastDOM);\n      } catch (error) {\n        if (typeof error === 'object' && error != null) {\n          const msg = `${error.toString()} Parent: ${dom.tagName}, new child: {tag: ${replacementDOM.tagName} key: ${nextFrstChildKey}}, old child: {tag: ${lastDOM.tagName}, key: ${prevFirstChildKey}}.`;\n          throw new Error(msg);\n        } else {\n          throw error;\n        }\n      }\n      destroyNode(prevFirstChildKey, null);\n    }\n    const nextChildNode = activeNextNodeMap.get(nextFrstChildKey);\n    if ($isTextNode(nextChildNode)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = nextChildNode.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = nextChildNode.getStyle();\n      }\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        $createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction $reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key);\n\n  // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      }\n\n      // @ts-expect-error: internal field\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  }\n  // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  }\n\n  // Update node. If it returns true, we need to unmount and re-create the node\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = $createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      $reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    const nextRootNode = nextNode.getWritable();\n    nextRootNode.__cachedText = editorTextContent;\n    nextNode = nextRootNode;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        $createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          $reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n    const node = activeNextNodeMap.get(nextKey);\n    if (node !== null && $isTextNode(node)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = node.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = node.getStyle();\n      }\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    $createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction $reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = '';\n  // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap);\n  // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  $reconcileNode('root', null);\n  // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n  activeEditor$1 = undefined;\n  // @ts-ignore\n  activeEditorNodes = undefined;\n  // @ts-ignore\n  activeDirtyElements = undefined;\n  // @ts-ignore\n  activeDirtyLeaves = undefined;\n  // @ts-ignore\n  activePrevNodeMap = undefined;\n  // @ts-ignore\n  activeNextNodeMap = undefined;\n  // @ts-ignore\n  activeEditorConfig = undefined;\n  // @ts-ignore\n  activePrevKeyToDOMMap = undefined;\n  // @ts-ignore\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap;\n  // @ts-ignore We intentionally add this to the Node.\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = null;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nconst rootElementsRegistered = new WeakMap();\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0];\n\n// This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false;\n\n    // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection();\n\n    // Update the selection format\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        }\n\n        // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        const root = $getRoot();\n        const isRootTextContentEmpty = editor.isComposing() === false && root.getTextContent() === '';\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Point.getNode() must return TextNode when type is text`);\n            }\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element' && !isRootTextContentEmpty) {\n            const lastNode = anchor.getNode();\n            selection.style = '';\n            if (lastNode instanceof ParagraphNode && lastNode.getChildrenSize() === 0) {\n              selection.format = lastNode.getTextFormat();\n              selection.style = lastNode.getTextStyle();\n            } else {\n              selection.format = 0;\n            }\n          }\n        }\n      } else {\n        const anchorKey = anchor.key;\n        const focus = selection.focus;\n        const focusKey = focus.key;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        const isBackward = selection.isBackward();\n        const startOffset = isBackward ? focusOffset : anchorOffset;\n        const endOffset = isBackward ? anchorOffset : focusOffset;\n        const startKey = isBackward ? focusKey : anchorKey;\n        const endKey = isBackward ? anchorKey : focusKey;\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          const textContentSize = node.getTextContentSize();\n          if ($isTextNode(node) && textContentSize !== 0 &&\n          // Exclude empty text nodes at boundaries resulting from user's selection\n          !(i === 0 && node.__key === startKey && startOffset === textContentSize || i === nodesLength - 1 && node.__key === endKey && endOffset === 0)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n}\n\n// This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if (domSelection) {\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const anchorNode = anchor.getNode();\n        if (anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n          domSelection.removeAllRanges();\n          selection.dirty = true;\n        } else if (event.detail === 3 && !selection.isCollapsed()) {\n          // Tripple click causing selection to overflow into the nearest element. In that\n          // case visually it looks like a single element content is selected, focus node\n          // is actually at the beginning of the next element (if present) and any manipulations\n          // with selection (formatting) are affecting second element as well\n          const focus = selection.focus;\n          const focusNode = focus.getNode();\n          if (anchorNode !== focusNode) {\n            if ($isElementNode(anchorNode)) {\n              anchorNode.select(0);\n            } else {\n              anchorNode.getParentOrThrow().select(0);\n            }\n          }\n        }\n      } else if (event.pointerType === 'touch') {\n        // This is used to update the selection on touch devices when the user clicks on text after a\n        // node selection. See isSelectionChangeFromMouseDown for the inverse\n        const domAnchorNode = domSelection.anchorNode;\n        if (domAnchorNode !== null) {\n          const nodeType = domAnchorNode.nodeType;\n          // If the user is attempting to click selection back onto text, then\n          // we should attempt create a range selection.\n          // When we click on an empty paragraph node or the end of a paragraph that ends\n          // with an image/poll, the nodeType will be ELEMENT_NODE\n          if (nodeType === DOM_ELEMENT_TYPE || nodeType === DOM_TEXT_TYPE) {\n            const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, editor, event);\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 'MediaLast' && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event);\n\n  // We let the browser do its own thing for composition.\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        const isSelectionAnchorSameAsFocus = selection.anchor.key === selection.focus.key;\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && isSelectionAnchorSameAsFocus) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0;\n          // Fixes an Android bug where selection flickers when backspacing\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Anchor node must be a TextNode`);\n            }\n            selection.style = anchorNode.getStyle();\n          }\n        } else {\n          $setCompositionKey(null);\n          event.preventDefault();\n          // Chromium Android at the moment seems to ignore the preventDefault\n          // on 'deleteContentBackward' and still deletes the content. Which leads\n          // to multiple deletions. So we let the browser handle the deletion in this case.\n          const selectedNodeText = selection.anchor.getNode().getTextContent();\n          const hasSelectedAllTextInNode = selection.anchor.offset === 0 && selection.focus.offset === selectedNodeText.length;\n          const shouldLetBrowserHandleDelete = IS_ANDROID_CHROME && isSelectionAnchorSameAsFocus && !hasSelectedAllTextInNode;\n          if (!shouldLetBrowserHandleDelete) {\n            dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n          }\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n\n    // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    }\n\n    // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n\n          // Safari does not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n          // We do not apply this logic to iOS to allow newline auto-capitalization\n          // work without creating linebreaks when pressing Enter\n          if (isInsertLineBreak && !IS_IOS) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n      // NO-OP\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const isBackward = selection.isBackward();\n      const startOffset = isBackward ? selection.anchor.offset : selection.focus.offset;\n      const endOffset = isBackward ? selection.focus.offset : selection.anchor.offset;\n      // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, startOffset) + data + anchorNode.getTextContent().slice(startOffset + endOffset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length;\n\n      // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      }\n\n      // This ensures consistency on Android.\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData);\n\n      // onInput always fires after onCompositionEnd for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    }\n\n    // Also flush any other mutations that might have occurred\n    // since the change.\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || $isTextNode(node) && node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction $onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null);\n\n  // Handle termination of composition.\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    }\n\n    // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      $onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.key;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    key,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (key == null) {\n    return;\n  }\n  if (isMoveForward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(key, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(key)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(key, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(key, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(key, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(key)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(key)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(key)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(key, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(key, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n      }\n      // FF does it well (no need to override behavior)\n    } else if (!IS_FIREFOX && isSelectAll(key, metaKey, ctrlKey)) {\n      event.preventDefault();\n      dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = [];\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n}\n\n// Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType;\n      // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor, event);\n      $setSelection(newSelection);\n    });\n  }\n\n  // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true);\n\n  // If newly selected editor is nested, then add it to the map, clean map otherwise\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (documentRootElementsCount === undefined || documentRootElementsCount < 1) {\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered.set(doc, (documentRootElementsCount || 0) + 1);\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable() || eventName === 'click') {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      const isEditable = editor.isEditable();\n      switch (eventName) {\n        case 'cut':\n          return isEditable && dispatchCommand(editor, CUT_COMMAND, event);\n        case 'copy':\n          return dispatchCommand(editor, COPY_COMMAND, event);\n        case 'paste':\n          return isEditable && dispatchCommand(editor, PASTE_COMMAND, event);\n        case 'dragstart':\n          return isEditable && dispatchCommand(editor, DRAGSTART_COMMAND, event);\n        case 'dragover':\n          return isEditable && dispatchCommand(editor, DRAGOVER_COMMAND, event);\n        case 'dragend':\n          return isEditable && dispatchCommand(editor, DRAGEND_COMMAND, event);\n        case 'focus':\n          return isEditable && dispatchCommand(editor, FOCUS_COMMAND, event);\n        case 'blur':\n          {\n            return isEditable && dispatchCommand(editor, BLUR_COMMAND, event);\n          }\n        case 'drop':\n          return isEditable && dispatchCommand(editor, DROP_COMMAND, event);\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (!(documentRootElementsCount !== undefined)) {\n    throw Error(`Root element not registered`);\n  } // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const newCount = documentRootElementsCount - 1;\n  if (!(newCount >= 0)) {\n    throw Error(`Root element count less than 0`);\n  }\n  rootElementsRegistered.set(doc, newCount);\n  if (newCount === 0) {\n    doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  const editor = getEditorPropertyFromDOMNode(rootElement);\n  if (isLexicalEditor(editor)) {\n    cleanActiveNestedEditorsMap(editor);\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = null;\n  } else if (editor) {\n    {\n      throw Error(`Attempted to remove event handlers from a node that does not belong to this build of Lexical`);\n    }\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  }\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  } else if ($isNodeSelection(selection) && restoreSelection && nodeToRemove.isSelected()) {\n    nodeToRemove.selectPrevious();\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    $removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // Allow us to look up the type including static props\n\n  /** @internal */\n\n  /** @internal */\n  //@ts-ignore We set the key in the constructor.\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  /**\n   * Perform any state updates on the clone of prevNode that are not already\n   * handled by the constructor call in the static clone method. If you have\n   * state to update in your clone that is not handled directly by the\n   * constructor, it is advisable to override this method but it is required\n   * to include a call to `super.afterCloneFrom(prevNode)` in your\n   * implementation. This is only intended to be called by\n   * {@link $cloneWithProperties} function or via a super call.\n   *\n   * @example\n   * ```ts\n   * class ClassesTextNode extends TextNode {\n   *   // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\n   *   __classes = new Set<string>();\n   *   static clone(node: ClassesTextNode): ClassesTextNode {\n   *     // The inherited TextNode constructor is used here, so\n   *     // classes is not set by this method.\n   *     return new ClassesTextNode(node.__text, node.__key);\n   *   }\n   *   afterCloneFrom(node: this): void {\n   *     // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\n   *     // for necessary state updates\n   *     super.afterCloneFrom(node);\n   *     this.__addClasses(node.__classes);\n   *   }\n   *   // This method is a private implementation detail, it is not\n   *   // suitable for the public API because it does not call getWritable\n   *   __addClasses(classNames: Iterable<string>): this {\n   *     for (const className of classNames) {\n   *       this.__classes.add(className);\n   *     }\n   *     return this;\n   *   }\n   *   addClass(...classNames: string[]): this {\n   *     return this.getWritable().__addClasses(classNames);\n   *   }\n   *   removeClass(...classNames: string[]): this {\n   *     const node = this.getWritable();\n   *     for (const className of classNames) {\n   *       this.__classes.delete(className);\n   *     }\n   *     return this;\n   *   }\n   *   getClasses(): Set<string> {\n   *     return this.getLatest().__classes;\n   *   }\n   * }\n   * ```\n   *\n   */\n  afterCloneFrom(prevNode) {\n    this.__parent = prevNode.__parent;\n    this.__next = prevNode.__next;\n    this.__prev = prevNode.__prev;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  constructor(key) {\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, this.constructor);\n      }\n    }\n  }\n  // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n  getType() {\n    return this.__type;\n  }\n  isInline() {\n    {\n      throw Error(`LexicalNode: Node ${this.constructor.name} does not implement .isInline().`);\n    }\n  }\n\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    }\n    // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n    const isElementRangeSelection = $isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element';\n    if (isElementRangeSelection) {\n      if (targetSelection.isCollapsed()) {\n        return false;\n      }\n      const parentNode = this.getParent();\n      if ($isDecoratorNode(this) && this.isInline() && parentNode) {\n        const firstPoint = targetSelection.isBackward() ? targetSelection.focus : targetSelection.anchor;\n        const firstElement = firstPoint.getNode();\n        if (firstPoint.offset === firstElement.getChildrenSize() && firstElement.is(parentNode) && firstElement.getLastChildOrThrow().is(this)) {\n          return false;\n        }\n      }\n    }\n    return isSelected;\n  }\n\n  /**\n   * Returns this nodes key.\n   */\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        if (!($isElementNode(node) || node === this && $isDecoratorNode(node))) {\n          throw Error(`Children of root nodes must be elements or decorators`);\n        }\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  }\n\n  // TO-DO: this function can be simplified a lot\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      if (node === null) {\n        break;\n      }\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        } else {\n          break;\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n\n  /**\n   * Returns a mutable version of the node using {@link $cloneWithProperties}\n   * if necessary. Will throw an error if called outside of a Lexical Editor\n   * {@link LexicalEditor.update} callback.\n   *\n   */\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key;\n    // Ensure we get the latest node from pending state\n    const latestNode = this.getLatest();\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection.setCachedNodes(null);\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const mutableNode = $cloneWithProperties(latestNode);\n    cloneNotNeeded.add(key);\n    internalMarkNodeAsDirty(mutableNode);\n    // Update reference in node map\n    nodeMap.set(key, mutableNode);\n    return mutableNode;\n  }\n\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n  getTextContent() {\n    return '';\n  }\n\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n  getTextContentSize() {\n    return this.getTextContent().length;\n  }\n\n  // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n  static transform() {\n    return null;\n  }\n\n  // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n  remove(preserveEmptyParent) {\n    $removeNode(this, true, preserveEmptyParent);\n  }\n\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) {\n      selection = selection.clone();\n    }\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    $removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      if (!($isElementNode(this) && $isElementNode(writableReplaceWith))) {\n        throw Error(`includeChildren should only be true for ElementNodes`);\n      }\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertAfter(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert before this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertBefore(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev;\n    // TODO: this is O(n), can we improve?\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n  isParentRequired() {\n    return false;\n  }\n\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  selectStart() {\n    return this.selectPrevious();\n  }\n  selectEnd() {\n    return this.selectNext(0, 0);\n  }\n\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type);\n  // Common error - split in its own invariant\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Insert a series of nodes after this LexicalNode (as next siblings)\n *\n * @param firstToInsert - The first node to insert after this one.\n * @param lastToInsert - The last node to insert after this one. Must be a\n * later sibling of FirstNode. If not provided, it will be its last sibling.\n */\nfunction insertRangeAfter(node, firstToInsert, lastToInsert) {\n  const lastToInsert2 = firstToInsert.getParentOrThrow().getLastChild();\n  let current = firstToInsert;\n  const nodesToInsert = [firstToInsert];\n  while (current !== lastToInsert2) {\n    if (!current.getNextSibling()) {\n      {\n        throw Error(`insertRangeAfter: lastToInsert must be a later sibling of firstToInsert`);\n      }\n    }\n    current = current.getNextSibling();\n    nodesToInsert.push(current);\n  }\n  let currentNode = node;\n  for (const nodeToInsert of nodesToInsert) {\n    currentNode = currentNode.insertAfter(nodeToInsert);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        if (isOnlyChildInBlockNode(node) || isLastChildInBlockNode(node)) {\n          return null;\n        }\n        return {\n          conversion: $convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction $convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\nfunction isOnlyChildInBlockNode(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null && isBlockDomNode(parentElement)) {\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      const lastChild = parentElement.lastChild;\n      if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isLastChildInBlockNode(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null && isBlockDomNode(parentElement)) {\n    // check if node is first child, because only childs dont count\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      return false;\n    }\n\n    // check if its last child\n    const lastChild = parentElement.lastChild;\n    if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isWhitespaceDomTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE && /^( |\\t|\\r?\\n)+$/.test(node.textContent || '');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList;\n  // Firstly we handle the base theme.\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  }\n  // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing();\n  // Always add a suffix if we're composing a node\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        }\n        // @ts-expect-error\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme;\n  // Apply theme class names\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__format = prevNode.__format;\n    this.__style = prevNode.__style;\n    this.__mode = prevNode.__mode;\n    this.__detail = prevNode.__detail;\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead.\n   *\n   * @returns a number representing the format of the text node.\n   */\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\n   * or TextNode.isUnmergeable instead.\n   *\n   * @returns a number representing the detail of the text node.\n   */\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  /**\n   * Returns the mode (TextModeType) of the TextNode, which may be \"normal\", \"token\", or \"segmented\"\n   *\n   * @returns TextModeType.\n   */\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  /**\n   * Returns the styles currently applied to the node. This is analogous to CSSText in the DOM.\n   *\n   * @returns CSSText-like string of styles applied to the underlying DOM node.\n   */\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  /**\n   * Returns whether or not the node is in \"token\" mode. TextNodes in token mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted as a single entity (not invdividually by character).\n   *\n   * @returns true if the node is in token mode, false otherwise.\n   */\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  /**\n   *\n   * @returns true if Lexical detects that an IME or other 3rd-party script is attempting to\n   * mutate the TextNode, false otherwise.\n   */\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  /**\n   * Returns whether or not the node is in \"segemented\" mode. TextNodes in segemented mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted in space-delimited \"segments\".\n   *\n   * @returns true if the node is in segmented mode, false otherwise.\n   */\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  /**\n   * Returns whether or not the node is \"directionless\". Directionless nodes don't respect changes between RTL and LTR modes.\n   *\n   * @returns true if the node is directionless, false otherwise.\n   */\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  /**\n   * Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\n   * adjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen.\n   *\n   * @returns true if the node is unmergeable, false otherwise.\n   */\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\n   * string values to get the format of a TextNode.\n   *\n   * @param type - the TextFormatType to check for.\n   *\n   * @returns true if the node has the provided format, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type \"text\"\n   * (i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).\n   *\n   * @returns true if the node is simple text, false otherwise.\n   */\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  /**\n   * Returns the text content of the node as a string.\n   *\n   * @returns a string representing the text content of the node.\n   */\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n\n  /**\n   *\n   * @returns true if the text node supports font styling, false otherwise.\n   */\n  canHaveFormat() {\n    return true;\n  }\n\n  // View\n\n  createDOM(config, editor) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (this.hasFormat('code')) {\n      dom.setAttribute('spellcheck', 'false');\n    }\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme;\n    // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: $convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor);\n    if (!(element !== null && isHTMLElement(element))) {\n      throw Error(`Expected TextNode createDOM to always return a HTMLElement`);\n    }\n    element.style.whiteSpace = 'pre-wrap';\n    // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n    if (this.hasFormat('bold')) {\n      element = wrapElementWith(element, 'b');\n    }\n    if (this.hasFormat('italic')) {\n      element = wrapElementWith(element, 'i');\n    }\n    if (this.hasFormat('strikethrough')) {\n      element = wrapElementWith(element, 's');\n    }\n    if (this.hasFormat('underline')) {\n      element = wrapElementWith(element, 'u');\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  }\n\n  // Mutators\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  }\n\n  /**\n   * Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\n   * version of the argument can only specify one format and doing so will remove all other formats that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleFormat}\n   *\n   * @param format - TextFormatType or 32-bit integer representing the node format.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  }\n\n  /**\n   * Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\n   * version of the argument can only specify one detail value and doing so will remove all other detail values that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleDirectionless}\n   * or {@link TextNode.toggleUnmergeable}\n   *\n   * @param detail - TextDetailType or 32-bit integer representing the node detail.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  /**\n   * Sets the node style to the provided CSSText-like string. Set this property as you\n   * would an HTMLElement style attribute to apply inline styles to the underlying DOM Element.\n   *\n   * @param style - CSSText to be applied to the underlying HTMLElement.\n   *\n   * @returns this TextNode.\n   */\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  /**\n   * Applies the provided format to this TextNode if it's not present. Removes it if it's present.\n   * The subscript and superscript formats are mutually exclusive.\n   * Prefer using this method to turn specific formats on and off.\n   *\n   * @param type - TextFormatType to toggle.\n   *\n   * @returns this TextNode.\n   */\n  toggleFormat(type) {\n    const format = this.getFormat();\n    const newFormat = toggleTextFormatType(format, type, null);\n    return this.setFormat(newFormat);\n  }\n\n  /**\n   * Toggles the directionless detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  /**\n   * Toggles the unmergeable detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  /**\n   * Sets the mode of the node.\n   *\n   * @returns this TextNode.\n   */\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  /**\n   * Sets the text content of the node.\n   *\n   * @param text - the string to set as the text value of the node.\n   *\n   * @returns this TextNode.\n   */\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  /**\n   * Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets.\n   *\n   * @param _anchorOffset - the offset at which the Selection anchor will be placed.\n   * @param _focusOffset - the offset at which the Selection focus will be placed.\n   *\n   * @returns the new RangeSelection.\n   */\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  selectStart() {\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const size = this.getTextContentSize();\n    return this.select(size, size);\n  }\n\n  /**\n   * Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\n   * specified. Can optionally calculate a new selection after the operation is complete.\n   *\n   * @param offset - the offset at which the splice operation should begin.\n   * @param delCount - the number of characters to delete, starting from the offset.\n   * @param newText - the text to insert into the TextNode at the offset.\n   * @param moveSelection - optional, whether or not to move selection to the end of the inserted substring.\n   *\n   * @returns this TextNode.\n   */\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted before the node, false otherwise.\n   */\n  canInsertTextBefore() {\n    return true;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted after the node, false otherwise.\n   */\n  canInsertTextAfter() {\n    return true;\n  }\n\n  /**\n   * Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\n   * formed by the split, and inserting those new TextNodes into the editor, replacing the one that was split.\n   *\n   * @param splitOffsets - rest param of the text content character offsets at which this node should be split.\n   *\n   * @returns an Array containing the newly-created TextNodes.\n   */\n  splitText() {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    for (var _len2 = arguments.length, splitOffsets = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      splitOffsets[_key2] = arguments[_key2];\n    }\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParent();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    }\n\n    // Handle selection\n    const selection = $getSelection();\n\n    // Then handle all other parts\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    }\n\n    // Insert the nodes into the parent's children\n    if (parent !== null) {\n      internalMarkSiblingsAsDirty(this);\n      const writableParent = parent.getWritable();\n      const insertionIndex = this.getIndexWithinParent();\n      if (hasReplacedSelf) {\n        writableParent.splice(insertionIndex, 0, splitNodes);\n        this.remove();\n      } else {\n        writableParent.splice(insertionIndex, 1, splitNodes);\n      }\n      if ($isRangeSelection(selection)) {\n        $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n      }\n    }\n    return splitNodes;\n  }\n\n  /**\n   * Merges the target TextNode into this TextNode, removing the target node.\n   *\n   * @param target - the TextNode to merge into this one.\n   *\n   * @returns this TextNode.\n   */\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\n   * node class that you create and replace matched text with should return true from this method.\n   *\n   * @returns true if the node is to be treated as a \"text entity\", false otherwise.\n   */\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode;\n  const style = span.style;\n  return {\n    forChild: applyTextFormatFromStyle(style),\n    node: null\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode;\n  // Google Docs wraps all copied HTML in a <b> with font-weight normal\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: applyTextFormatFromStyle(b.style, hasNormalFontWeight ? undefined : 'bold'),\n    node: null\n  };\n}\nconst preParentCache = new WeakMap();\nfunction isNodePre(node) {\n  return node.nodeName === 'PRE' || node.nodeType === DOM_ELEMENT_TYPE && node.style !== undefined && node.style.whiteSpace !== undefined && node.style.whiteSpace.startsWith('pre');\n}\nfunction findParentPreDOMNode(node) {\n  let cached;\n  let parent = node.parentNode;\n  const visited = [node];\n  while (parent !== null && (cached = preParentCache.get(parent)) === undefined && !isNodePre(parent)) {\n    visited.push(parent);\n    parent = parent.parentNode;\n  }\n  const resultNode = cached === undefined ? parent : cached;\n  for (let i = 0; i < visited.length; i++) {\n    preParentCache.set(visited[i], resultNode);\n  }\n  return resultNode;\n}\nfunction $convertTextDOMNode(domNode) {\n  const domNode_ = domNode;\n  const parentDom = domNode.parentElement;\n  if (!(parentDom !== null)) {\n    throw Error(`Expected parentElement of Text not to be null`);\n  }\n  let textContent = domNode_.textContent || '';\n  // No collapse and preserve segment break for pre, pre-wrap and pre-line\n  if (findParentPreDOMNode(domNode_) !== null) {\n    const parts = textContent.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else if (part !== '') {\n        nodes.push($createTextNode(part));\n      }\n    }\n    return {\n      node: nodes\n    };\n  }\n  textContent = textContent.replace(/\\r/g, '').replace(/[ \\t\\n]+/g, ' ');\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  if (textContent[0] === ' ') {\n    // Traverse backward while in the same line. If content contains new line or tab -> pontential\n    // delete, other elements can borrow from this one. Deletion depends on whether it's also the\n    // last space (see next condition: textContent[textContent.length - 1] === ' '))\n    let previousText = domNode_;\n    let isStartOfLine = true;\n    while (previousText !== null && (previousText = findTextInLine(previousText, false)) !== null) {\n      const previousTextContent = previousText.textContent || '';\n      if (previousTextContent.length > 0) {\n        if (/[ \\t\\n]$/.test(previousTextContent)) {\n          textContent = textContent.slice(1);\n        }\n        isStartOfLine = false;\n        break;\n      }\n    }\n    if (isStartOfLine) {\n      textContent = textContent.slice(1);\n    }\n  }\n  if (textContent[textContent.length - 1] === ' ') {\n    // Traverse forward while in the same line, preserve if next inline will require a space\n    let nextText = domNode_;\n    let isEndOfLine = true;\n    while (nextText !== null && (nextText = findTextInLine(nextText, true)) !== null) {\n      const nextTextContent = (nextText.textContent || '').replace(/^( |\\t|\\r?\\n)+/, '');\n      if (nextTextContent.length > 0) {\n        isEndOfLine = false;\n        break;\n      }\n    }\n    if (isEndOfLine) {\n      textContent = textContent.slice(0, textContent.length - 1);\n    }\n  }\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nfunction findTextInLine(text, forward) {\n  let node = text;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let sibling;\n    while ((sibling = forward ? node.nextSibling : node.previousSibling) === null) {\n      const parentElement = node.parentElement;\n      if (parentElement === null) {\n        return null;\n      }\n      node = parentElement;\n    }\n    node = sibling;\n    if (node.nodeType === DOM_ELEMENT_TYPE) {\n      const display = node.style.display;\n      if (display === '' && !isInlineDomNode(node) || display !== '' && !display.startsWith('inline')) {\n        return null;\n      }\n    }\n    let descendant = node;\n    while ((descendant = forward ? node.firstChild : node.lastChild) !== null) {\n      node = descendant;\n    }\n    if (node.nodeType === DOM_TEXT_TYPE) {\n      return node;\n    } else if (node.nodeName === 'BR') {\n      return null;\n    }\n  }\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: applyTextFormatFromStyle(domNode.style, format),\n    node: null\n  };\n}\nfunction $createTextNode() {\n  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\nfunction applyTextFormatFromStyle(style, shouldApply) {\n  const fontWeight = style.fontWeight;\n  const textDecoration = style.textDecoration.split(' ');\n  // Google Docs uses span tags + font-weight for bold text\n  const hasBoldFontWeight = fontWeight === '700' || fontWeight === 'bold';\n  // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n  const hasLinethroughTextDecoration = textDecoration.includes('line-through');\n  // Google Docs uses span tags + font-style for italic text\n  const hasItalicFontStyle = style.fontStyle === 'italic';\n  // Google Docs uses span tags + text-decoration: underline for underline text\n  const hasUnderlineTextDecoration = textDecoration.includes('underline');\n  // Google Docs uses span tags + vertical-align to specify subscript and superscript\n  const verticalAlign = style.verticalAlign;\n  return lexicalNode => {\n    if (!$isTextNode(lexicalNode)) {\n      return lexicalNode;\n    }\n    if (hasBoldFontWeight && !lexicalNode.hasFormat('bold')) {\n      lexicalNode.toggleFormat('bold');\n    }\n    if (hasLinethroughTextDecoration && !lexicalNode.hasFormat('strikethrough')) {\n      lexicalNode.toggleFormat('strikethrough');\n    }\n    if (hasItalicFontStyle && !lexicalNode.hasFormat('italic')) {\n      lexicalNode.toggleFormat('italic');\n    }\n    if (hasUnderlineTextDecoration && !lexicalNode.hasFormat('underline')) {\n      lexicalNode.toggleFormat('underline');\n    }\n    if (verticalAlign === 'sub' && !lexicalNode.hasFormat('subscript')) {\n      lexicalNode.toggleFormat('subscript');\n    }\n    if (verticalAlign === 'super' && !lexicalNode.hasFormat('superscript')) {\n      lexicalNode.toggleFormat('superscript');\n    }\n    if (shouldApply && !lexicalNode.hasFormat(shouldApply)) {\n      lexicalNode.toggleFormat(shouldApply);\n    }\n    return lexicalNode;\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TabNode extends TextNode {\n  static getType() {\n    return 'tab';\n  }\n  static clone(node) {\n    return new TabNode(node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    // TabNode __text can be either '\\t' or ''. insertText will remove the empty Node\n    this.__text = prevNode.__text;\n  }\n  constructor(key) {\n    super('\\t', key);\n    this.__detail = IS_UNMERGEABLE;\n  }\n  static importDOM() {\n    return null;\n  }\n  static importJSON(serializedTabNode) {\n    const node = $createTabNode();\n    node.setFormat(serializedTabNode.format);\n    node.setStyle(serializedTabNode.style);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tab',\n      version: 1\n    };\n  }\n  setTextContent(_text) {\n    {\n      throw Error(`TabNode does not support setTextContent`);\n    }\n  }\n  setDetail(_detail) {\n    {\n      throw Error(`TabNode does not support setDetail`);\n    }\n  }\n  setMode(_type) {\n    {\n      throw Error(`TabNode does not support setMode`);\n    }\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n}\nfunction $createTabNode() {\n  return $applyNodeReplacement(new TabNode());\n}\nfunction $isTabNode(node) {\n  return node instanceof TabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection.setCachedNodes(null);\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  }\n  // Transfer the element point to a text point.\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this._cachedNodes = null;\n    this._nodes = objects;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return false;\n  }\n  getStartEndPoints() {\n    return null;\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd;\n    // Insert nodes\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes);\n    // Remove selected nodes\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.format = format;\n    this.style = style;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n\n  /**\n   * Used to check if the provided selections is equal to this one by value,\n   * inluding anchor, focus, format, and style properties.\n   * @param selection - the Selection to compare this one to.\n   * @returns true if the Selections are equal, false otherwise.\n   */\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  /**\n   * Returns whether the Selection is \"collapsed\", meaning the anchor and focus are\n   * the same node and have the same offset.\n   *\n   * @returns true if the Selection is collapsed, false otherwise.\n   */\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  /**\n   * Gets all the nodes in the Selection. Uses caching to make it generally suitable\n   * for use in hot paths.\n   *\n   * @returns an Array containing all the nodes in the Selection\n   */\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset);\n      // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n\n  /**\n   * Sets this Selection to be of type \"text\" at the provided anchor and focus values.\n   *\n   * @param anchorNode - the anchor node to set on the Selection\n   * @param anchorOffset - the offset to set on the Selection\n   * @param focusNode - the focus node to set on the Selection\n   * @param focusOffset - the focus offset to set on the Selection\n   */\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  /**\n   * Gets the (plain) text content of all the nodes in the selection.\n   *\n   * @returns a string representing the text content of all the nodes in the Selection\n   */\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n\n  /**\n   * Attempts to map a DOM selection range onto this Lexical Selection,\n   * setting the anchor, focus, and type accordingly\n   *\n   * @param range a DOM Selection range conforming to the StaticRange interface.\n   */\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = $internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  /**\n   * Creates a new RangeSelection, copying over all the property values from this one.\n   *\n   * @returns a new RangeSelection with the same property values as this one.\n   */\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  /**\n   * Toggles the provided format on all the TextNodes in the Selection.\n   *\n   * @param format a string TextFormatType to toggle on the TextNodes in the selection\n   */\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the value of the style property on the Selection\n   *\n   * @param style - the style to set at the value of the style property.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\n   * has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection.\n   * converts tabs, newlines, and carriage returns into LexicalNodes.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertRawText(text) {\n    const parts = text.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else {\n        nodes.push($createTextNode(part));\n      }\n    }\n    this.insertNodes(nodes);\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection as a new\n   * Lexical TextNode, according to a series of insertion heuristics based on the selection type and position.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const format = this.format;\n    const style = this.style;\n    let firstPoint = anchor;\n    let endPoint = focus;\n    if (!this.isCollapsed() && focus.isBefore(anchor)) {\n      firstPoint = focus;\n      endPoint = anchor;\n    }\n    if (firstPoint.type === 'element') {\n      $transferStartingElementPointToTextPoint(firstPoint, endPoint, format, style);\n    }\n    const startOffset = firstPoint.offset;\n    let endOffset = endPoint.offset;\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (selectedNodesLength === 1 && endPoint.type === 'element') {\n      endOffset = firstNodeTextLength;\n      endPoint.set(firstPoint.key, endOffset, 'text');\n    }\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || !nextSibling.canInsertTextBefore() || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        nextSibling.setStyle(style);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        $normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          }\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      } else if ($isTabNode(firstNode)) {\n        // We don't need to check for delCount because there is only the entire selected node case\n        // that can hit here for content size 1 and with canInsertTextBeforeAfter false\n        const textNode = $createTextNode(text);\n        textNode.setFormat(format);\n        textNode.setStyle(style);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]);\n\n      // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode;\n\n      // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      }\n\n      // Handle mutations to the last node.\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          // root node selections only select whole nodes, so no text splice is necessary\n          if (!$isRootNode(endPoint.getNode()) && endPoint.type === 'text') {\n            lastNode = lastNode.spliceText(0, endOffset, '');\n          }\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      }\n\n      // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement);\n\n      // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      }\n\n      // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      }\n\n      // Remove all selected nodes that haven't already been removed.\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the text in the Selection, adjusting the EditorState accordingly.\n   */\n  removeText() {\n    this.insertText('');\n  }\n\n  /**\n   * Applies the provided format to the TextNodes in the Selection, splitting or\n   * merging nodes as necessary.\n   *\n   * @param formatType the format type to apply to the nodes in the Selection.\n   */\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset;\n\n    // In case selection started at the end of text node use next text node\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize();\n\n    // Single node selected\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n      // The entire node is selected or it is token, so just format it\n      if ($isTokenOrSegmented(firstNode) || startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat);\n\n        // Update selection only if starts/ends on text node\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    }\n    // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n    if (startOffset !== 0 && !$isTokenOrSegmented(firstNode)) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat);\n    // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize() && !$isTokenOrSegmented(lastNode)) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    }\n\n    // Process all text nodes in between\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n      textNode.setFormat(nextFormat);\n    }\n\n    // Update selection only if starts/ends on text node\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  /**\n   * Attempts to \"intelligently\" insert an arbitrary list of Lexical nodes into the EditorState at the\n   * current Selection according to a set of heuristics that determine how surrounding nodes\n   * should be changed, replaced, or moved to accomodate the incoming ones.\n   *\n   * @param nodes - the nodes to insert\n   */\n  insertNodes(nodes) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (this.anchor.key === 'root') {\n      this.insertParagraph();\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        throw Error(`Expected RangeSelection after insertParagraph`);\n      }\n      return selection.insertNodes(nodes);\n    }\n    const firstPoint = this.isBackward() ? this.focus : this.anchor;\n    const firstBlock = $getAncestor(firstPoint.getNode(), INTERNAL_$isBlock);\n    const last = nodes[nodes.length - 1];\n\n    // CASE 1: insert inside a code block\n    if ('__language' in firstBlock && $isElementNode(firstBlock)) {\n      if ('__language' in nodes[0]) {\n        this.insertText(nodes[0].getTextContent());\n      } else {\n        const index = $removeTextAndSplitBlock(this);\n        firstBlock.splice(index, 0, nodes);\n        last.selectEnd();\n      }\n      return;\n    }\n\n    // CASE 2: All elements of the array are inline\n    const notInline = node => ($isElementNode(node) || $isDecoratorNode(node)) && !node.isInline();\n    if (!nodes.some(notInline)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      const index = $removeTextAndSplitBlock(this);\n      firstBlock.splice(index, 0, nodes);\n      last.selectEnd();\n      return;\n    }\n\n    // CASE 3: At least 1 element of the array is not inline\n    const blocksParent = $wrapInlineNodes(nodes);\n    const nodeToSelect = blocksParent.getLastDescendant();\n    const blocks = blocksParent.getChildren();\n    const isMergeable = node => $isElementNode(node) && INTERNAL_$isBlock(node) && !node.isEmpty() && $isElementNode(firstBlock) && (!firstBlock.isEmpty() || firstBlock.canMergeWhenEmpty());\n    const shouldInsert = !$isElementNode(firstBlock) || !firstBlock.isEmpty();\n    const insertedParagraph = shouldInsert ? this.insertParagraph() : null;\n    const lastToInsert = blocks[blocks.length - 1];\n    let firstToInsert = blocks[0];\n    if (isMergeable(firstToInsert)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      firstBlock.append(...firstToInsert.getChildren());\n      firstToInsert = blocks[1];\n    }\n    if (firstToInsert) {\n      insertRangeAfter(firstBlock, firstToInsert);\n    }\n    const lastInsertedBlock = $getAncestor(nodeToSelect, INTERNAL_$isBlock);\n    if (insertedParagraph && $isElementNode(lastInsertedBlock) && (insertedParagraph.canMergeWhenEmpty() || INTERNAL_$isBlock(lastToInsert))) {\n      lastInsertedBlock.append(...insertedParagraph.getChildren());\n      insertedParagraph.remove();\n    }\n    if ($isElementNode(firstBlock) && firstBlock.isEmpty()) {\n      firstBlock.remove();\n    }\n    nodeToSelect.selectEnd();\n\n    // To understand this take a look at the test \"can wrap post-linebreak nodes into new element\"\n    const lastChild = $isElementNode(firstBlock) ? firstBlock.getLastChild() : null;\n    if ($isLineBreakNode(lastChild) && lastInsertedBlock !== firstBlock) {\n      lastChild.remove();\n    }\n  }\n\n  /**\n   * Inserts a new ParagraphNode into the EditorState at the current Selection\n   *\n   * @returns the newly inserted node.\n   */\n  insertParagraph() {\n    if (this.anchor.key === 'root') {\n      const paragraph = $createParagraphNode();\n      $getRoot().splice(this.anchor.offset, 0, [paragraph]);\n      paragraph.select();\n      return paragraph;\n    }\n    const index = $removeTextAndSplitBlock(this);\n    const block = $getAncestor(this.anchor.getNode(), INTERNAL_$isBlock);\n    if (!$isElementNode(block)) {\n      throw Error(`Expected ancestor to be an ElementNode`);\n    }\n    const firstToAppend = block.getChildAtIndex(index);\n    const nodesToInsert = firstToAppend ? [firstToAppend, ...firstToAppend.getNextSiblings()] : [];\n    const newBlock = block.insertNewAfter(this, false);\n    if (newBlock) {\n      newBlock.append(...nodesToInsert);\n      newBlock.selectStart();\n      return newBlock;\n    }\n    // if newBlock is null, it means that block is of type CodeNode.\n    return null;\n  }\n\n  /**\n   * Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\n   * current Selection.\n   */\n  insertLineBreak(selectStart) {\n    const lineBreak = $createLineBreakNode();\n    this.insertNodes([lineBreak]);\n    // this is used in MacOS with the command 'ctrl-O' (openLineBreak)\n    if (selectStart) {\n      const parent = lineBreak.getParentOrThrow();\n      const index = lineBreak.getIndexWithinParent();\n      parent.select(index, index);\n    }\n  }\n\n  /**\n   * Extracts the nodes in the Selection, splitting nodes where necessary\n   * to get offset-level precision.\n   *\n   * @returns The nodes in the Selection\n   */\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Modifies the Selection according to the parameters and a set of heuristics that account for\n   * various node types. Can be used to safely move or extend selection by one logical \"unit\" without\n   * dealing explicitly with all the possible node types.\n   *\n   * @param alter the type of modification to perform\n   * @param isBackward whether or not selection is backwards\n   * @param granularity the granularity at which to apply the modification\n   */\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move';\n\n    // Handle the selection movement around decorators.\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement;\n    // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    }\n    // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity);\n    // Guard against no ranges\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0);\n      // Apply the DOM selection to our Lexical selection.\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        }\n\n        // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n  /**\n   * Helper for handling forward character and word deletion that prevents element nodes\n   * like a table, columns layout being destroyed\n   *\n   * @param anchor the anchor\n   * @param anchorNode the anchor node in the selection\n   * @param isBackward whether or not selection is backwards\n   */\n  forwardDeletion(anchor, anchorNode, isBackward) {\n    if (!isBackward && (\n    // Delete forward handle case\n    anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n      const parent = anchorNode.getParent();\n      const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n      if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Performs one logical character deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteCharacter(isBackward) {\n    const wasCollapsed = this.isCollapsed();\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      let anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n\n      // Handle the deletion around decorators.\n      const focus = this.focus;\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n          const editor = getActiveEditor();\n          editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        }\n        return;\n      } else if (!isBackward && $isElementNode(possibleNode) && $isElementNode(anchorNode) && anchorNode.isEmpty()) {\n        anchorNode.remove();\n        possibleNode.selectStart();\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  /**\n   * Performs one logical line deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      // Since `domSelection.modify('extend', ..., 'lineboundary')` works well for text selections\n      // but doesn't properly handle selections which end on elements, a space character is added\n      // for such selections transforming their anchor's type to 'text'\n      const anchorIsElement = this.anchor.type === 'element';\n      if (anchorIsElement) {\n        this.insertText(' ');\n      }\n      this.modify('extend', isBackward, 'lineboundary');\n\n      // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n\n      // Adjusts selection to include an extra character added for element anchors to remove it\n      if (anchorIsElement) {\n        const startPoint = isBackward ? this.anchor : this.focus;\n        startPoint.set(startPoint.key, startPoint.offset + 1, startPoint.type);\n      }\n    }\n    this.removeText();\n  }\n\n  /**\n   * Performs one logical word deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $getCharacterOffsets(selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return [0, 0];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction $internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode;\n  // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false;\n    // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length;\n    const blockCursorElement = editor._blockCursorElement;\n    // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (blockCursorElement !== null) {\n      const blockCursorElementParent = blockCursorElement.parentNode;\n      if (dom === blockCursorElementParent) {\n        const blockCursorOffset = Array.prototype.indexOf.call(blockCursorElementParent.children, blockCursorElement);\n        if (offset > blockCursorOffset) {\n          resolvedOffset--;\n        }\n      }\n    }\n    resolvedNode = $getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = $getNodeFromDOM(dom);\n      // Ensure resolvedElement is actually a element.\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        resolvedOffset = Math.min(resolvedElement.getChildrenSize(), resolvedOffset);\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n          resolvedOffset = 0;\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent();\n        // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && $getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = $getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize();\n        // @ts-expect-error: intentional\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0;\n      // @ts-expect-error: intentional\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction $normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus);\n\n    // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = $internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = $internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = $getNodeFromDOM(anchorDOM);\n    const focusNode = $getNodeFromDOM(focusDOM);\n    // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  }\n\n  // Handle normalization of selection when it is at the boundaries.\n  $normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n}\n\n// This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction $internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction $internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isRangeSelection(lastSelection) || lastSelection == null) {\n    return $internalCreateRangeSelection(lastSelection, domSelection, editor, null);\n  }\n  return lastSelection.clone();\n}\nfunction $createRangeSelectionFromDom(domSelection, editor) {\n  return $internalCreateRangeSelection(null, domSelection, editor, null);\n}\nfunction $internalCreateRangeSelection(lastSelection, domSelection, editor, event) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  }\n  // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = event || windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcessingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  }\n  // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n  const resolvedSelectionPoints = $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset) {\n  let times = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key;\n  // Single node. We shift selection but never redimension it\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element');\n      // The new selection might point to text nodes, try to resolve them\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  }\n  // The new selection might point to text nodes, try to resolve them\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement;\n\n  // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  }\n\n  // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  }\n\n  // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  }\n\n  // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {\n    // If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n    {\n      console.warn(error);\n    }\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes) {\n  let selection = $getSelection() || $getPreviousSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  selection.insertNodes(nodes);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction $removeTextAndSplitBlock(selection) {\n  let selection_ = selection;\n  if (!selection.isCollapsed()) {\n    selection_.removeText();\n  }\n  // A new selection can originate as a result of node replacement, in which case is registered via\n  // $setSelection\n  const newSelection = $getSelection();\n  if ($isRangeSelection(newSelection)) {\n    selection_ = newSelection;\n  }\n  if (!$isRangeSelection(selection_)) {\n    throw Error(`Unexpected dirty selection to be null`);\n  }\n  const anchor = selection_.anchor;\n  let node = anchor.getNode();\n  let offset = anchor.offset;\n  while (!INTERNAL_$isBlock(node)) {\n    [node, offset] = $splitNodeAtPoint(node, offset);\n  }\n  return offset;\n}\nfunction $splitNodeAtPoint(node, offset) {\n  const parent = node.getParent();\n  if (!parent) {\n    const paragraph = $createParagraphNode();\n    $getRoot().append(paragraph);\n    paragraph.select();\n    return [$getRoot(), 0];\n  }\n  if ($isTextNode(node)) {\n    const split = node.splitText(offset);\n    if (split.length === 0) {\n      return [parent, node.getIndexWithinParent()];\n    }\n    const x = offset === 0 ? 0 : 1;\n    const index = split[0].getIndexWithinParent() + x;\n    return [parent, index];\n  }\n  if (!$isElementNode(node) || offset === 0) {\n    return [parent, node.getIndexWithinParent()];\n  }\n  const firstToAppend = node.getChildAtIndex(offset);\n  if (firstToAppend) {\n    const insertPoint = new RangeSelection($createPoint(node.__key, offset, 'element'), $createPoint(node.__key, offset, 'element'), 0, '');\n    const newElement = node.insertNewAfter(insertPoint);\n    if (newElement) {\n      newElement.append(firstToAppend, ...firstToAppend.getNextSiblings());\n    }\n  }\n  return [parent, node.getIndexWithinParent() + 1];\n}\nfunction $wrapInlineNodes(nodes) {\n  // We temporarily insert the topLevelNodes into an arbitrary ElementNode,\n  // since insertAfter does not work on nodes that have no parent (TO-DO: fix that).\n  const virtualRoot = $createParagraphNode();\n  let currentBlock = null;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = $isLineBreakNode(node);\n    if (isLineBreakNode || $isDecoratorNode(node) && node.isInline() || $isElementNode(node) && node.isInline() || $isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        virtualRoot.append(currentBlock);\n        // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      virtualRoot.append(node);\n      currentBlock = null;\n    }\n  }\n  return virtualRoot;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update(), editor.read(), or editorState.read().${collectBuildInformation()}`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update() or editor.read().${collectBuildInformation()}`);\n    }\n  }\n  return activeEditor;\n}\nfunction collectBuildInformation() {\n  let compatibleEditors = 0;\n  const incompatibleEditors = new Set();\n  const thisVersion = LexicalEditor.version;\n  if (typeof window !== 'undefined') {\n    for (const node of document.querySelectorAll('[contenteditable]')) {\n      const editor = getEditorPropertyFromDOMNode(node);\n      if (isLexicalEditor(editor)) {\n        compatibleEditors++;\n      } else if (editor) {\n        let version = String(editor.constructor.version || '<0.17.1');\n        if (version === thisVersion) {\n          version += ' (separately built, likely a bundler configuration issue)';\n        }\n        incompatibleEditors.add(version);\n      }\n    }\n  }\n  let output = ` Detected on the page: ${compatibleEditors} compatible editor(s) with version ${thisVersion}`;\n  if (incompatibleEditors.size) {\n    output += ` and incompatible editors with versions ${Array.from(incompatibleEditors).join(', ')}`;\n  }\n  return output;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction internalGetActiveEditorState() {\n  return activeEditorState;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n\n      // We want to prioritize node transforms over element transforms\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    }\n\n    // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    }\n\n    // Make the editorState immutable\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n}\n\n// This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editor, editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = editor;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction $commitPendingUpdates(editor, recoveryEditorState) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  }\n\n  // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false;\n    // We don't want updates to sync block the reconciliation.\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = $reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      }\n\n      // Reset editor and restore incoming editor state to the DOM\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        $commitPendingUpdates(editor, currentEditorState);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState);\n\n  // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window);\n\n  // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, mutatedNodes, tags, dirtyLeaves, currentEditorState);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  // If reconciler fails, we reset whole editor (so current editor state becomes empty)\n  // and attempt to re-render pendingEditorState. If that goes through we trigger\n  // listeners, but instead use recoverEditorState which is current editor state before reset\n  // This specifically important for collab that relies on prevEditorState from update\n  // listener to calculate delta of changed nodes/properties\n  triggerTextContentListeners(editor, recoveryEditorState || currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: recoveryEditorState || currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  $triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, mutatedNodes, updateTags, dirtyLeaves, prevEditorState) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        prevEditorState,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (var _len3 = arguments.length, payload = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      payload[_key3 - 3] = arguments[_key3];\n    }\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction $triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      $beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false;\n\n  // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (options.discrete) {\n          const pendingEditorState = editor._pendingEditorState;\n          if (!(pendingEditorState !== null)) {\n            throw Error(`Unexpected empty pending editor state on discrete nested update`);\n          }\n          pendingEditorState._flushSync = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction $beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection !== null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = $internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n\n    // Restore existing editor state to the DOM\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    $commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      $commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        $commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    $beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__style = '';\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__first = prevNode.__first;\n    this.__last = prevNode.__last;\n    this.__size = prevNode.__size;\n    this.__indent = prevNode.__indent;\n    this.__format = prevNode.__format;\n    this.__style = prevNode.__style;\n    this.__dir = prevNode.__dir;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while ($isElementNode(node)) {\n      const child = node.getFirstChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while ($isElementNode(node)) {\n      const child = node.getLastChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  }\n\n  // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    return firstNode ? firstNode.selectStart() : this.select();\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    return lastNode ? lastNode.selectEnd() : this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append() {\n    for (var _len4 = arguments.length, nodesToAppend = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      nodesToAppend[_key4] = arguments[_key4];\n    }\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style || '';\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      }\n      // Set child parent to self\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize;\n\n    // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        // Cleanup if node can't be empty\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  }\n  // JSON serialization\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  }\n  // These are intended to be extends for specific element heuristics.\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  /** @deprecated @internal */\n  canReplaceWith(replacement) {\n    return true;\n  }\n  /** @deprecated @internal */\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  }\n  // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n  isShadowRoot() {\n    return false;\n  }\n  /** @deprecated @internal */\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n\n  /**\n   * Determines whether this node, when empty, can merge with a first block\n   * of nodes being inserted.\n   *\n   * This method is specifically called in {@link RangeSelection.insertNodes}\n   * to determine merging behavior during nodes insertion.\n   *\n   * @example\n   * // In a ListItemNode or QuoteNode implementation:\n   * canMergeWhenEmpty(): true {\n   *  return true;\n   * }\n   */\n  canMergeWhenEmpty() {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  /**\n   * The returned value is added to the LexicalEditor._decorators\n   */\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  }\n\n  // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  // Mutate\n\n  append() {\n    for (let i = 0; i < arguments.length; i++) {\n      const node = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...arguments);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection;\n\n  // Check if we need to update because of changes in selection\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  }\n\n  // @ts-expect-error\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn, options) {\n    return readEditorState(options && options.editor || null, this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(null, this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// TODO: Cleanup ArtificialNode__DO_NOT_USE #5966\nclass ArtificialNode__DO_NOT_USE extends ElementNode {\n  static getType() {\n    return 'artificial';\n  }\n  createDOM(config) {\n    // this isnt supposed to be used and is not used anywhere but defining it to appease the API\n    const dom = document.createElement('div');\n    return dom;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__textFormat = 0;\n    this.__textStyle = '';\n  }\n  static getType() {\n    return 'paragraph';\n  }\n  getTextFormat() {\n    const self = this.getLatest();\n    return self.__textFormat;\n  }\n  setTextFormat(type) {\n    const self = this.getWritable();\n    self.__textFormat = type;\n    return self;\n  }\n  hasTextFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getTextFormat() & formatFlag) !== 0;\n  }\n  getTextStyle() {\n    const self = this.getLatest();\n    return self.__textStyle;\n  }\n  setTextStyle(style) {\n    const self = this.getWritable();\n    self.__textStyle = style;\n    return self;\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__textFormat = prevNode.__textFormat;\n    this.__textStyle = prevNode.__textStyle;\n  }\n\n  // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: $convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    node.setTextFormat(serializedNode.textFormat);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      textFormat: this.getTextFormat(),\n      textStyle: this.getTextStyle(),\n      type: 'paragraph',\n      version: 1\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(rangeSelection, restoreSelection) {\n    const newElement = $createParagraphNode();\n    newElement.setTextFormat(rangeSelection.format);\n    newElement.setTextStyle(rangeSelection.style);\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    newElement.setFormat(this.getFormatType());\n    newElement.setStyle(this.getTextStyle());\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren();\n    // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction $convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// https://github.com/microsoft/TypeScript/issues/3841\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst DEFAULT_SKIP_INITIALIZATION = true;\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/**\n * Type helper for extracting the payload type from a command.\n *\n * @example\n * ```ts\n * const MY_COMMAND = createCommand<SomeType>();\n *\n * // ...\n *\n * editor.registerCommand(MY_COMMAND, payload => {\n *   // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n *   handleMyCommand(editor, payload);\n *   return true;\n * });\n *\n * function handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n *   // `payload` is of type `SomeType`, extracted from the command.\n * }\n * ```\n */\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  }\n\n  // Remove all the DOM nodes from the root element\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes, additionalConversions) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  const addConversionsToCache = map => {\n    Object.keys(map).forEach(key => {\n      let currentCache = conversionCache.get(key);\n      if (currentCache === undefined) {\n        currentCache = [];\n        conversionCache.set(key, currentCache);\n      }\n      currentCache.push(map[key]);\n    });\n  };\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM.call(node.klass);\n    if (map !== null) {\n      addConversionsToCache(map);\n    }\n  });\n  if (additionalConversions) {\n    addConversionsToCache(additionalConversions);\n  }\n  return conversionCache;\n}\n\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, TabNode, ParagraphNode, ArtificialNode__DO_NOT_USE, ...(config.nodes || [])];\n  const {\n    onError,\n    html\n  } = config;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replace = null;\n      let replaceWithKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replace = options.with;\n        replaceWithKlass = options.withKlass || null;\n      }\n      // Ensure custom nodes implement required methods and replaceWithKlass is instance of base klass.\n      {\n        // ArtificialNode__DO_NOT_USE can get renamed, so we use the type\n        const nodeType = Object.prototype.hasOwnProperty.call(klass, 'getType') && klass.getType();\n        const name = klass.name;\n        if (replaceWithKlass) {\n          if (!(replaceWithKlass.prototype instanceof klass)) {\n            throw Error(`${replaceWithKlass.name} doesn't extend the ${name}`);\n          }\n        }\n        if (name !== 'RootNode' && nodeType !== 'root' && nodeType !== 'artificial') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        exportDOM: html && html.export ? html.export.get(klass) : undefined,\n        klass,\n        replace,\n        replaceWithKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes, html ? html.import : undefined), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** The version with build identifiers for this editor (since 0.17.1) */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor;\n    // The root element associated with this editor\n    this._rootElement = null;\n    // The current editor state\n    this._editorState = editorState;\n    // Handling of drafts and updates\n    this._pendingEditorState = null;\n    // Used to help co-ordinate selection and events\n    this._compositionKey = null;\n    this._deferred = [];\n    // Used during reconciliation\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false;\n    // Listeners\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    };\n    // Commands\n    this._commands = new Map();\n    // Editor configuration for theme/context.\n    this._config = config;\n    // Mapping of types to their nodes\n    this._nodes = nodes;\n    // React node decorators for portals\n    this._decorators = {};\n    this._pendingDecorators = null;\n    // Used to optimize reconciliation\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set();\n    // Handling of DOM mutations\n    this._observer = null;\n    // Used for identifying owning editors\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * If any existing nodes are in the DOM, and skipInitialization is not true, the listener\n   * will be called immediately with an updateTag of 'registerMutationListener' where all\n   * nodes have the 'created' NodeMutation. This can be controlled with the skipInitialization option\n   * (default is currently true for backwards compatibility in 0.16.x but will change to false in 0.17.0).\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @param options - see {@link MutationListenerOptions}\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerMutationListener(klass, listener, options) {\n    const klassToMutate = this.resolveRegisteredNodeAfterReplacements(this.getRegisteredNode(klass)).klass;\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klassToMutate);\n    const skipInitialization = options && options.skipInitialization;\n    if (!(skipInitialization === undefined ? DEFAULT_SKIP_INITIALIZATION : skipInitialization)) {\n      this.initializeMutationListener(listener, klassToMutate);\n    }\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  /** @internal */\n  getRegisteredNode(klass) {\n    const registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    return registeredNode;\n  }\n\n  /** @internal */\n  resolveRegisteredNodeAfterReplacements(registeredNode) {\n    while (registeredNode.replaceWithKlass) {\n      registeredNode = this.getRegisteredNode(registeredNode.replaceWithKlass);\n    }\n    return registeredNode;\n  }\n\n  /** @internal */\n  initializeMutationListener(listener, klass) {\n    const prevEditorState = this._editorState;\n    const nodeMap = getCachedTypeToNodeMap(prevEditorState).get(klass.getType());\n    if (!nodeMap) {\n      return;\n    }\n    const nodeMutationMap = new Map();\n    for (const k of nodeMap.keys()) {\n      nodeMutationMap.set(k, 'created');\n    }\n    if (nodeMutationMap.size > 0) {\n      listener(nodeMutationMap, {\n        dirtyLeaves: new Set(),\n        prevEditorState,\n        updateTags: new Set(['registerMutationListener'])\n      });\n    }\n  }\n\n  /** @internal */\n  registerNodeTransformToKlass(klass, listener) {\n    const registeredNode = this.getRegisteredNode(klass);\n    registeredNode.transforms.add(listener);\n    return registeredNode;\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n\n  /**\n   * Used to assert that a certain node is registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered the provided node type, false otherwise.\n   */\n  hasNode(node) {\n    return this._nodes.has(node.getType());\n  }\n\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n  hasNodes(nodes) {\n    return nodes.every(this.hasNode.bind(this));\n  }\n\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n  getDecorators() {\n    return this._decorators;\n  }\n\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        $commitPendingUpdates(this);\n\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        // If content editable is unmounted we'll reset editor state back to original\n        // (or pending) editor state since there will be no reconciliation\n        this._editorState = pendingEditorState;\n        this._pendingEditorState = null;\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n  getEditorState() {\n    return this._editorState;\n  }\n\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    $flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      $commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    $commitPendingUpdates(this);\n  }\n\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserialization from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  /**\n   * Executes a read of the editor's state, with the\n   * editor context available (useful for exporting and read-only DOM\n   * operations). Much like update, but prevents any mutation of the\n   * editor's state. Any pending updates will be flushed immediately before\n   * the read.\n   * @param callbackFn - A function that has access to read-only editor state.\n   */\n  read(callbackFn) {\n    $commitPendingUpdates(this);\n    return this.getEditorState().read(callbackFn, {\n      editor: this\n    });\n  }\n\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n  focus(callbackFn) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      });\n      // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  /**\n   * Removes focus from the editor.\n   */\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\nLexicalEditor.version = \"0.17.1+dev.esm\";\nexport { $addUpdateTag, $applyNodeReplacement, $cloneWithProperties, $copyNode, $createLineBreakNode, $createNodeSelection, $createParagraphNode, $createPoint, $createRangeSelection, $createRangeSelectionFromDom, $createTabNode, $createTextNode, $getAdjacentNode, $getCharacterOffsets, $getEditor, $getNearestNodeFromDOMNode, $getNearestRootOrShadowRoot, $getNodeByKey, $getNodeByKeyOrThrow, $getPreviousSelection, $getRoot, $getSelection, $getTextContent, $hasAncestor, $hasUpdateTag, $insertNodes, $isBlockElementNode, $isDecoratorNode, $isElementNode, $isInlineElementOrDecoratorNode, $isLeafNode, $isLineBreakNode, $isNodeSelection, $isParagraphNode, $isRangeSelection, $isRootNode, $isRootOrShadowRoot, $isTabNode, $isTextNode, $isTokenOrSegmented, $nodesOfType, $normalizeSelection as $normalizeSelection__EXPERIMENTAL, $parseSerializedNode, $selectAll, $setCompositionKey, $setSelection, $splitNode, ArtificialNode__DO_NOT_USE, BLUR_COMMAND, CAN_REDO_COMMAND, CAN_UNDO_COMMAND, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, CLICK_COMMAND, COMMAND_PRIORITY_CRITICAL, COMMAND_PRIORITY_EDITOR, COMMAND_PRIORITY_HIGH, COMMAND_PRIORITY_LOW, COMMAND_PRIORITY_NORMAL, CONTROLLED_TEXT_INSERTION_COMMAND, COPY_COMMAND, CUT_COMMAND, DELETE_CHARACTER_COMMAND, DELETE_LINE_COMMAND, DELETE_WORD_COMMAND, DRAGEND_COMMAND, DRAGOVER_COMMAND, DRAGSTART_COMMAND, DROP_COMMAND, DecoratorNode, ElementNode, FOCUS_COMMAND, FORMAT_ELEMENT_COMMAND, FORMAT_TEXT_COMMAND, INDENT_CONTENT_COMMAND, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, IS_ALL_FORMATTING, IS_BOLD, IS_CODE, IS_HIGHLIGHT, IS_ITALIC, IS_STRIKETHROUGH, IS_SUBSCRIPT, IS_SUPERSCRIPT, IS_UNDERLINE, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_ARROW_UP_COMMAND, KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND, KEY_DOWN_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, KEY_MODIFIER_COMMAND, KEY_SPACE_COMMAND, KEY_TAB_COMMAND, LineBreakNode, MOVE_TO_END, MOVE_TO_START, OUTDENT_CONTENT_COMMAND, PASTE_COMMAND, ParagraphNode, REDO_COMMAND, REMOVE_TEXT_COMMAND, RootNode, SELECTION_CHANGE_COMMAND, SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, SELECT_ALL_COMMAND, TEXT_TYPE_TO_FORMAT, TabNode, TextNode, UNDO_COMMAND, createCommand, createEditor, getEditorPropertyFromDOMNode, getNearestEditorFromDOMNode, isBlockDomNode, isCurrentlyReadOnlyMode, isHTMLAnchorElement, isHTMLElement, isInlineDomNode, isLexicalEditor, isSelectionCapturedInDecoratorInput, isSelectionWithinEditor, resetRandomKey };","map":{"version":3,"names":["createCommand","type","SELECTION_CHANGE_COMMAND","SELECTION_INSERT_CLIPBOARD_NODES_COMMAND","CLICK_COMMAND","DELETE_CHARACTER_COMMAND","INSERT_LINE_BREAK_COMMAND","INSERT_PARAGRAPH_COMMAND","CONTROLLED_TEXT_INSERTION_COMMAND","PASTE_COMMAND","REMOVE_TEXT_COMMAND","DELETE_WORD_COMMAND","DELETE_LINE_COMMAND","FORMAT_TEXT_COMMAND","UNDO_COMMAND","REDO_COMMAND","KEY_DOWN_COMMAND","KEY_ARROW_RIGHT_COMMAND","MOVE_TO_END","KEY_ARROW_LEFT_COMMAND","MOVE_TO_START","KEY_ARROW_UP_COMMAND","KEY_ARROW_DOWN_COMMAND","KEY_ENTER_COMMAND","KEY_SPACE_COMMAND","KEY_BACKSPACE_COMMAND","KEY_ESCAPE_COMMAND","KEY_DELETE_COMMAND","KEY_TAB_COMMAND","INSERT_TAB_COMMAND","INDENT_CONTENT_COMMAND","OUTDENT_CONTENT_COMMAND","DROP_COMMAND","FORMAT_ELEMENT_COMMAND","DRAGSTART_COMMAND","DRAGOVER_COMMAND","DRAGEND_COMMAND","COPY_COMMAND","CUT_COMMAND","SELECT_ALL_COMMAND","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","CAN_REDO_COMMAND","CAN_UNDO_COMMAND","FOCUS_COMMAND","BLUR_COMMAND","KEY_MODIFIER_COMMAND","CAN_USE_DOM","window","document","createElement","documentMode","IS_APPLE","test","navigator","platform","IS_FIREFOX","userAgent","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","IS_IOS","MSStream","IS_ANDROID","IS_CHROME","IS_ANDROID_CHROME","IS_APPLE_WEBKIT","DOM_ELEMENT_TYPE","DOM_TEXT_TYPE","NO_DIRTY_NODES","HAS_DIRTY_NODES","FULL_RECONCILE","IS_NORMAL","IS_TOKEN","IS_SEGMENTED","IS_BOLD","IS_ITALIC","IS_STRIKETHROUGH","IS_UNDERLINE","IS_CODE","IS_SUBSCRIPT","IS_SUPERSCRIPT","IS_HIGHLIGHT","IS_ALL_FORMATTING","IS_DIRECTIONLESS","IS_UNMERGEABLE","IS_ALIGN_LEFT","IS_ALIGN_CENTER","IS_ALIGN_RIGHT","IS_ALIGN_JUSTIFY","IS_ALIGN_START","IS_ALIGN_END","NON_BREAKING_SPACE","ZERO_WIDTH_SPACE","COMPOSITION_SUFFIX","DOUBLE_LINE_BREAK","COMPOSITION_START_CHAR","RTL","LTR","RTL_REGEX","RegExp","LTR_REGEX","TEXT_TYPE_TO_FORMAT","bold","code","highlight","italic","strikethrough","subscript","superscript","underline","DETAIL_TYPE_TO_DETAIL","directionless","unmergeable","ELEMENT_TYPE_TO_FORMAT","center","end","justify","left","right","start","ELEMENT_FORMAT_TO_TYPE","TEXT_MODE_TO_TYPE","normal","segmented","token","TEXT_TYPE_TO_MODE","normalizeClassNames","rval","_len","arguments","length","classNames","Array","_key","className","s","matchAll","push","TEXT_MUTATION_VARIANCE","isProcessingMutations","lastTextEntryTimeStamp","getIsProcessingMutations","updateTimeStamp","event","timeStamp","initTextEntryListener","editor","getWindow","addEventListener","isManagedLineBreak","dom","target","__lexicalLineBreak","undefined","getLastSelection","getEditorState","read","selection","$getSelection","clone","$handleTextMutation","node","domSelection","getDOMSelection","_window","anchorOffset","focusOffset","anchorNode","text","nodeValue","$updateTextNodeFromDOMContent","shouldUpdateTextNodeFromMutation","targetDOM","targetNode","$isRangeSelection","anchor","getNode","is","format","getFormat","nodeType","isAttached","$flushMutations$1","mutations","observer","shouldFlushTextMutations","performance","now","updateEditor","badDOMTargets","Map","rootElement","getRootElement","currentEditorState","_editorState","blockCursorElement","_blockCursorElement","shouldRevertSelection","possibleTextForFirefoxPaste","i","mutation","$getNearestNodeFromDOMNode","$isDecoratorNode","$isTextNode","addedDOMs","addedNodes","addedDOM","$getNodeFromDOMNode","parentDOM","parentNode","nodeName","possibleText","innerText","removeChild","removedDOMs","removedNodes","removedDOMsLength","unremovedBRs","removedDOM","appendChild","internalGetRoot","set","size","$isElementNode","childKeys","getChildrenKeys","currentDOM","firstChild","key","correctDOM","getElementByKey","replaceChild","nextSibling","markDirty","records","takeRecords","record","dirty","$setSelection","isFirefoxClipboardEvents","insertRawText","$flushRootMutations","_observer","initMutationObserver","MutationObserver","$canSimpleTextNodesBeMerged","node1","node2","node1Mode","__mode","node1Format","__format","node1Style","__style","node2Mode","node2Format","node2Style","$mergeTextNodes","writableNode1","mergeWithSibling","normalizedNodes","getActiveEditor","_normalizedNodes","add","__key","$normalizeTextNode","textNode","__text","isSimpleText","isUnmergeable","remove","previousNode","getPreviousSibling","nextNode","getNextSibling","$normalizeSelection","$normalizePoint","focus","point","offset","nextOffsetAtEnd","getChildrenSize","getChildAtIndex","getTextContentSize","keyCounter","resetRandomKey","generateRandomKey","getRegisteredNodeOrThrow","registeredNode","_nodes","get","Error","scheduleMicroTask","queueMicrotask","fn","Promise","resolve","then","$isSelectionCapturedInDecorator","isSelectionCapturedInDecoratorInput","anchorDOM","activeElement","contentEditable","getEditorPropertyFromDOMNode","isSelectionWithinEditor","focusDOM","contains","getNearestEditorFromDOMNode","error","isLexicalEditor","LexicalEditor","currentNode","getParentElement","__lexicalEditor","getTextDirection","$isTokenOrSegmented","isToken","isSegmented","isDOMNodeLexicalTextNode","getDOMTextNode","element","toggleTextFormatType","alignWithFormat","activeFormat","newFormat","$isLeafNode","$isLineBreakNode","$setNodeKey","existingKey","errorOnNodeKeyConstructorMismatch","errorOnReadOnly","errorOnInfiniteTransforms","editorState","getActiveEditorState","_nodeMap","_dirtyElements","_dirtyLeaves","_cloneNotNeeded","_dirtyType","internalGetActiveEditorState","existingNode","constructor","name","internalMarkParentElementsAsDirty","parentKey","nodeMap","dirtyElements","nextParentKey","has","__parent","removeFromParent","oldParent","getParent","writableNode","getWritable","writableParent","prevSibling","writableNextSibling","__first","__prev","writablePrevSibling","__next","__last","__size","internalMarkNodeAsDirty","latest","getLatest","parent","internalMarkSiblingsAsDirty","$setCompositionKey","compositionKey","previousCompositionKey","_compositionKey","$getNodeByKey","$getCompositionKey","isCurrentlyReadOnlyMode","startingDOM","cloneDecorators","currentDecorators","_decorators","pendingDecorators","Object","assign","_pendingDecorators","getEditorStateTextContent","$getRoot","getTextContent","markAllNodesAsDirty","isEmpty","_pendingEditorState","tag","isFrozen","setCachedNodes","_selection","$flushMutations","$getNodeFromDOM","nodeKey","getNodeKeyFromDOM","getTextNodeOffset","moveSelectionToEnd","doesContainGrapheme","str","getEditorsToPropagate","editorsToPropagate","currentEditor","_parentEditor","createUID","Math","random","toString","replace","substr","getAnchorTextFromDOM","$updateSelectedTextFromDOM","isCompositionEnd","data","textContent","compositionEnd","isDirty","isComposing","normalizedTextContent","slice","prevTextContent","setTimeout","update","prevSelection","$getPreviousSelection","prevTextContentSize","getKey","canInsertTextBefore","canInsertTextAfter","setTextContent","setTextNodeRange","originalTextContent","replacement","$createTextNode","$previousSiblingDoesNotAcceptText","previousSibling","isInline","$shouldInsertTextAfterOrBeforeTextNode","isCollapsed","getParentOrThrow","isTab","altKey","ctrlKey","metaKey","isBold","toLowerCase","controlOrMeta","isItalic","isUnderline","isParagraph","shiftKey","isReturn","isLineBreak","isOpenLineBreak","isDeleteWordBackward","isBackspace","isDeleteWordForward","isDelete","isDeleteLineBackward","isDeleteLineForward","isDeleteBackward","isDeleteForward","isUndo","isRedo","isCopy","isCut","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","isMoveBackward","isMoveToStart","isMoveForward","isMoveToEnd","isMoveUp","isMoveDown","isModifier","isSpace","isEscape","isSelectAll","$selectAll","root","select","getCachedClassNameArray","classNamesTheme","classNameThemeType","__lexicalClassNameCache","classNamesCache","cachedClassNames","classNamesArr","setMutatedNode","mutatedNodes","registeredNodes","mutationListeners","__type","klass","mutatedNodesByType","prevMutation","isMove","$nodesOfType","klassType","getType","_readOnly","nodes","getCachedTypeToNodeMap","from","values","nodesOfType","resolveElement","isBackward","block","getIndexWithinParent","$getAdjacentNode","focusNode","possibleNode","inputType","dispatchCommand","command","payload","triggerCommandListeners","$textContentRequiresDoubleLinebreakAtEnd","$isRootNode","isLastChild","getElementByKeyOrThrow","_keyToDOMMap","parentElement","assignedSlot","host","scrollIntoViewIfNeeded","selectionRect","doc","ownerDocument","defaultView","top","currentTop","bottom","currentBottom","targetTop","targetBottom","isBodyElement","body","innerHeight","targetRect","getBoundingClientRect","diff","scrollBy","scrollTop","yOffset","$hasUpdateTag","_updateTags","$addUpdateTag","$maybeMoveChildrenSelectionToParent","$hasAncestor","child","getDefaultView","domElem","ownerDoc","windowObj","$isInlineElementOrDecoratorNode","$getNearestRootOrShadowRoot","$isRootOrShadowRoot","isShadowRoot","$copyNode","copy","$applyNodeReplacement","replaceFunc","replacementNode","errorOnInsertTextNodeOnRoot","insertNode","$getNodeByKeyOrThrow","createBlockCursorElement","editorConfig","theme","setAttribute","blockCursorTheme","blockCursor","classList","needsBlockCursor","canBeEmpty","removeDOMBlockCursorElement","style","removeProperty","updateDOMBlockCursorElement","nextSelection","elementNode","elementNodeSize","isBlockCursor","insertBeforeElement","sibling","elementDOM","_config","caretColor","insertBefore","targetWindow","getSelection","$splitNode","startNode","recurse","isParentRoot","nodeToMove","insertAfter","leftTree","rightTree","newParent","nextSiblings","getNextSiblings","append","isHTMLAnchorElement","x","isHTMLElement","tagName","isInlineDomNode","inlineNodes","match","isBlockDomNode","blockNodes","INTERNAL_$isBlock","getFirstChild","isLeafElement","$getAncestor","predicate","$getEditor","cachedNodeMaps","WeakMap","EMPTY_TYPE_TO_NODE_MAP","typeToNodeMap","$cloneWithProperties","latestNode","mutableNode","afterCloneFrom","$garbageCollectDetachedDecorators","pendingEditorState","decorators","$garbageCollectDetachedDeepChildNodes","prevNodeMap","nodeMapDelete","dirtyNodes","childKey","delete","$garbageCollectDetachedNodes","prevEditorState","dirtyLeaves","subTreeTextContent","subTreeDirectionedTextContent","subTreeTextFormat","subTreeTextStyle","editorTextContent","activeEditorConfig","activeEditor$1","activeEditorNodes","treatAllNodesAsDirty","activeEditorStateReadOnly","activeMutationListeners","activeTextDirection","activeDirtyElements","activeDirtyLeaves","activePrevNodeMap","activeNextNodeMap","activePrevKeyToDOMMap","destroyNode","getPrevElementByKeyOrThrow","children","createChildrenArray","destroyChildren","_startIndex","endIndex","startIndex","setTextAlign","domStyle","value","setProperty","DEFAULT_INDENT_VALUE","setElementIndent","indent","indentClassName","elementHasClassName","indentationBaseValue","getComputedStyle","getPropertyValue","setElementFormat","$createNode","insertDOM","createDOM","storeDOMWithKey","__indent","childrenSize","$createChildrenWithDirection","reconcileElementTerminatingLineBreak","decorator","decorate","reconcileDecorator","isDirectionless","possibleLineBreak","freeze","previousSubTreeDirectionedTextContent","$createChildren","reconcileBlockDirection","previousSubTreeTextContent","getStyle","__lexicalTextContent","isLastChildLineBreakOrDecorator","prevElement","nextElement","prevLineBreak","nextLineBreak","msg","reconcileParagraphFormat","$isParagraphNode","__textFormat","setTextFormat","setTextStyle","reconcileParagraphStyle","__textStyle","previousSubTreeDirectionTextContent","__lexicalDirTextContent","previousDirection","__lexicalDir","hasEmptyDirectionedTextContent","direction","previousDirectionTheme","nextDirectionTheme","removeAttribute","dir","__dir","$reconcileChildrenWithDirection","$reconcileChildren","prevChildrenSize","nextChildrenSize","prevFirstChildKey","nextFrstChildKey","$reconcileNode","lastDOM","replacementDOM","nextChildNode","prevChildren","nextChildren","lexicalLineBreak","canUseFastPath","$reconcileNodeChildren","prevNode","updateDOM","nextIndent","nextFormat","__cachedText","nextRootNode","prevChildrenLength","nextChildrenLength","prevEndIndex","nextEndIndex","prevChildrenSet","nextChildrenSet","siblingDOM","prevIndex","nextIndex","prevKey","nextKey","Set","nextHasPrevKey","prevHasNextKey","childDOM","appendNewChildren","removeOldChildren","$reconcileRoot","nextEditorState","dirtyType","_listeners","currentMutatedNodes","keyToDOMMap","PASS_THROUGH_COMMAND","ANDROID_COMPOSITION_LATENCY","rootElementEvents","onKeyDown","onPointerDown","onCompositionStart","onCompositionEnd","onInput","onClick","onBeforeInput","lastKeyDownTimeStamp","lastKeyCode","lastBeforeInputInsertTextTimeStamp","unprocessedBeforeInputData","rootElementsRegistered","isSelectionChangeFromDOMUpdate","isSelectionChangeFromMouseDown","isInsertLineBreak","isFirefoxEndingComposition","collapsedSelectionFormat","$shouldPreventDefaultAndInsertText","domTargetRange","isBeforeInput","domAnchorNode","anchorKey","backingAnchorElement","textLength","collapsed","startContainer","startOffset","shouldSkipSelectionChange","domNode","onSelectionChange","isActive","windowEvent","currentTimeStamp","lastFormat","lastStyle","lastOffset","lastKey","isRootTextContentEmpty","lastNode","ParagraphNode","getTextFormat","getTextStyle","focusKey","getNodes","nodesLength","endOffset","startKey","endKey","combinedFormat","hasTextNodes","textContentSize","lastSelection","getTopLevelElementOrThrow","removeAllRanges","detail","pointerType","newSelection","$internalCreateRangeSelection","Node","getTargetRange","getTargetRanges","targetRanges","$canRemoveText","isPossiblyAndroidKeyPress","targetRange","isSelectionAnchorSameAsFocus","preventDefault","selectedNodeText","hasSelectedAllTextInNode","shouldLetBrowserHandleDelete","applyDOMRange","dataTransfer","getData","stopPropagation","$onCompositionEndImpl","characterData","$isNodeSelection","getRootElementRemoveHandles","eventHandles","__lexicalEventHandles","activeNestedEditorsMap","onDocumentSelectionChange","nextActiveEditor","editors","rootEditor","rootEditorKey","activeNestedEditor","prevActiveEditor","stopLexicalPropagation","_lexicalHandled","hasStoppedLexicalPropagation","stopped","addRootElementEvents","documentRootElementsCount","removeHandles","eventName","onEvent","eventHandler","isEditable","removeEventListener","removeRootElementEvents","newCount","cleanActiveNestedEditorsMap","markSelectionChangeFromDOMUpdate","markCollapsedSelectionFormat","$removeNode","nodeToRemove","restoreSelection","preserveEmptyParent","selectionMoved","moveSelectionPointToSibling","isSelected","selectPrevious","index","$updateElementSelectionOnCreateDeleteNode","selectEnd","LexicalNode","_data","errorOnTypeKlassMismatch","targetSelection","some","n","isElementRangeSelection","firstPoint","firstElement","getLastChildOrThrow","getTopLevelElement","getParents","parents","getParentKeys","self","getPreviousSiblings","siblings","getCommonAncestor","a","b","unshift","aLength","bLength","bSet","ancestor","object","isBefore","isParentOf","commonAncestor","indexA","indexB","getNodesBetween","visited","getLastChild","parentSibling","reverse","cloneNotNeeded","_editor","_prevNode","_dom","exportDOM","exportJSON","importJSON","_serializedNode","transform","replaceWith","includeChildren","toReplaceKey","writableReplaceWith","getChildren","forEach","$moveSelectionPointToEnd","nodeToInsert","writableSelf","writableNodeToInsert","elementAnchorSelectionOnNode","elementFocusSelectionOnNode","oldIndex","oldParentKey","insertKey","writableParentKey","isParentRequired","createParentElementNode","$createParagraphNode","selectStart","selectNext","editorKlass","insertRangeAfter","firstToInsert","lastToInsert","lastToInsert2","current","nodesToInsert","LineBreakNode","importDOM","br","isOnlyChildInBlockNode","isLastChildInBlockNode","conversion","$convertLineBreakElement","priority","serializedLineBreakNode","$createLineBreakNode","version","isWhitespaceDomTextNode","lastChild","getElementOuterTag","getElementInnerTag","setTextThemeClassNames","prevFormat","textClassNames","domClassList","hasUnderlineStrikethrough","prevUnderlineStrikethrough","nextUnderlineStrikethrough","flag","diffComposedText","nextText","suffix","insert","deleteData","insertData","createTextInnerDOM","innerDOM","innerTag","config","wrapElementWith","el","TextNode","__detail","getDetail","getMode","hasFormat","formatFlag","getFormatFlags","canHaveFormat","outerTag","cssText","prevOuterTag","nextOuterTag","prevInnerTag","nextInnerTag","prevTag","nextTag","prevInnerDOM","nextInnerDOM","prevStyle","nextStyle","#text","$convertTextDOMNode","convertBringAttentionToElement","convertTextFormatElement","em","span","convertSpanElement","strong","sub","sup","u","serializedNode","setFormat","setDetail","setMode","mode","setStyle","whiteSpace","selectionTransform","toggleFormat","toggleDirectionless","toggleUnmergeable","_anchorOffset","_focusOffset","$internalMakeRangeSelection","spliceText","delCount","newText","moveSelection","handledTextLength","newOffset","updatedText","splitText","_len2","splitOffsets","_key2","offsetsSet","parts","string","partsLength","firstPart","hasReplacedSelf","splitNodes","textSize","part","partSize","siblingKey","nextTextSize","insertionIndex","splice","targetKey","adjustPointOffsetForMergedSibling","targetText","isTextEntity","forChild","applyTextFormatFromStyle","hasNormalFontWeight","fontWeight","preParentCache","isNodePre","startsWith","findParentPreDOMNode","cached","resultNode","domNode_","parentDom","split","$createTabNode","previousText","isStartOfLine","findTextInLine","previousTextContent","isEndOfLine","nextTextContent","forward","display","descendant","nodeNameToTextFormat","shouldApply","textDecoration","hasBoldFontWeight","hasLinethroughTextDecoration","includes","hasItalicFontStyle","fontStyle","hasUnderlineTextDecoration","verticalAlign","lexicalNode","TabNode","serializedTabNode","_text","_detail","_type","$isTabNode","Point","aNode","bNode","aOffset","bOffset","aNodeDescendant","getDescendantByIndex","bNodeDescendant","oldKey","$createPoint","selectPointOnNode","textContentLength","getLastDescendant","$transferStartingElementPointToTextPoint","placementNode","$setPointValues","NodeSelection","objects","_cachedNodes","getCachedNodes","every","getStartEndPoints","clear","extract","insertText","insertNodes","selectedNodes","selectedNodesLength","lastSelectedNode","selectionAtEnd","cachedNodes","RangeSelection","lastPoint","firstNode","firstNodeDescendant","lastNodeDescendant","$getCharacterOffsets","prevWasElement","range","resolvedSelectionPoints","$internalResolveSelectionPoints","endContainer","anchorPoint","focusPoint","endPoint","firstNodeText","firstNodeTextLength","firstNodeParent","lastIndex","lastNodeParent","$normalizeSelectionPointsForBoundaries","firstNodeFormat","firstNodeStyle","markedNodeKeysForKeep","lastElement","lastElementChild","lastNodeChildren","selectedNodesSet","firstAndLastElementsAreEqual","insertionTarget","lastNodeChild","lastRemovedParent","childrenLength","selectedNode","removeText","formatText","formatType","selectedTextNodes","selectedTextNodesLength","startPoint","firstIndex","firstNextFormat","lastNextFormat","insertParagraph","firstBlock","last","$removeTextAndSplitBlock","notInline","blocksParent","$wrapInlineNodes","nodeToSelect","blocks","isMergeable","canMergeWhenEmpty","shouldInsert","insertedParagraph","lastInsertedBlock","paragraph","firstToAppend","newBlock","insertNewAfter","insertLineBreak","lineBreak","shift","lastNodeText","lastNodeTextLength","pop","modify","alter","granularity","collapse","isIsolated","isKeyboardSelectable","nodeSelection","$createNodeSelection","elementKey","_rootElement","moveNativeSelection","rangeCount","getRangeAt","validNodes","shrinkSelection","firstValidNode","lastValidNode","$swapPoints","forwardDeletion","deleteCharacter","wasCollapsed","$removeSegment","$updateCaretSelectionForUnicodeCharacter","collapseAtStart","deleteLine","anchorIsElement","deleteWord","getCharacterOffset","anchorAndFocus","anchorType","characterOffset","splitLength","segmentOffset","restoreOffset","isLast","join","trim","shouldResolveAncestor","resolvedElement","resolvedOffset","$internalResolveSelectionPoint","resolvedNode","childNodes","childNodesLength","hasBlockCursor","blockCursorElementParent","blockCursorOffset","prototype","indexOf","call","min","getFirstDescendant","resolveSelectionPointOnBoundary","lastAnchor","lastFocus","resolvedAnchorPoint","resolvedFocusPoint","$isBlockElementNode","focusType","$createRangeSelection","$internalCreateSelection","$createRangeSelectionFromDom","eventType","isSelectionChange","useDOMSelection","nodeOffset","times","selectionOffset","newSelectionOffset","max","$updateSelectionResolveTextNodes","firstPointNode","lastPointNode","firstPointOffset","lastPointOffset","childSize","anchorOffsetAtEnd","focusOffsetAtEnd","applySelectionTransforms","updateDOMSelection","tags","nodeCount","anchorDOMNode","focusDOMNode","nextAnchorOffset","nextFocusOffset","nextAnchorNode","nextFocusNode","anchorFormatOrStyleChanged","preventScroll","setBaseAndExtent","console","warn","selectionTarget","Text","createRange","selectNode","$insertNodes","$getTextContent","selection_","$splitNodeAtPoint","insertPoint","newElement","virtualRoot","currentBlock","isLineBreakNode","activeEditorState","activeEditor","isReadOnlyMode","isAttemptingToRecoverFromReconcilerError","infiniteTransformCount","observerOptions","childList","subtree","collectBuildInformation","compatibleEditors","incompatibleEditors","thisVersion","querySelectorAll","String","output","internalGetActiveEditor","$applyTransforms","transformsCache","transformsArr","transforms","transformsArrLength","$isNodeValidForTransform","$normalizeAllDirtyTextNodes","$applyAllTransforms","untransformedDirtyLeaves","untransformedDirtyLeavesLength","untransformedDirtyElements","untransformedDirtyElementsLength","currentUntransformedDirtyElement","intentionallyMarkedAsDirty","$parseSerializedNode","internalSerializedNode","$parseSerializedNodeImpl","nodeClass","isArray","serializedJSONChildNode","childNode","parseEditorState","serializedEditorState","updateFn","createEmptyEditorState","previousActiveEditorState","previousReadOnlyMode","previousActiveEditor","previousDirtyElements","previousDirtyLeaves","previousCloneNotNeeded","previousDirtyType","handleDEVOnlyPendingUpdateGuarantees","_onError","readEditorState","callbackFn","$commitPendingUpdates","recoveryEditorState","shouldSkipDOM","_headless","currentSelection","pendingSelection","needsUpdate","previouslyUpdating","_updating","disconnect","resetEditor","observe","deferred","_deferred","_editable","triggerMutationListeners","triggerListeners","triggerTextContentListeners","triggerDeferredUpdateCallbacks","$triggerEnqueuedUpdates","currentTextContent","latestTextContent","updateTags","listeners","listenersLength","listener","isCurrentlyEnqueuingUpdates","_len3","_key3","apply","returnVal","e","commandListeners","_commands","listenerInPriorityOrder","listenersSet","j","queuedUpdates","_updates","queuedUpdate","options","$beginUpdate","processNestedUpdates","initialSkipTransforms","skipTransforms","nextUpdateFn","onUpdate","discrete","_flushSync","editorStateWasCloned","cloneEditorState","startingCompositionKey","endingCompositionKey","pendingNodeMap","shouldUpdate","editorStateHasDirtySelection","ElementNode","getFormatType","getIndent","parentLastChild","getAllTextNodes","textNodes","subChildrenNodes","firstKey","getFirstChildOrThrow","getDirection","childrenCount","_len4","nodesToAppend","_key4","setDirection","setIndent","indentLevel","deleteCount","nodesToInsertLength","oldSize","writableSelfKey","nodesToInsertKeys","nodesToRemoveKeys","nodeAfterRange","nodeBeforeRange","newSize","nodeToDelete","nodeKeyToDelete","writableNodeToDelete","nodeKeyToInsert","writablePrevNode","writableNodeAfterRange","nodesToRemoveKeySet","nodesToInsertKeySet","isPointRemoved","canIndent","excludeFromCopy","destination","canReplaceWith","canInsertAfter","canMergeWith","extractWithChild","DecoratorNode","RootNode","cachedText","$createRootNode","EditorState","exportNodeToJSON","serializedChildren","serializedChildNode","toJSON","ArtificialNode__DO_NOT_USE","hasTextFormat","p","$convertParagraphElement","textAlign","textIndent","textFormat","textStyle","rangeSelection","parseInt","DEFAULT_SKIP_INITIALIZATION","COMMAND_PRIORITY_EDITOR","COMMAND_PRIORITY_LOW","COMMAND_PRIORITY_NORMAL","COMMAND_PRIORITY_HIGH","COMMAND_PRIORITY_CRITICAL","prevRootElement","nextRootElement","keyNodeMap","initializeConversionCache","additionalConversions","conversionCache","handledConversions","addConversionsToCache","map","keys","currentCache","createEditor","parentEditor","disableEvents","namespace","initialEditorState","onError","html","editable","replaceWithKlass","with","withKlass","hasOwnProperty","proto","method","export","import","htmlConversions","textcontent","_htmlConversions","registerUpdateListener","listenerSetOrMap","registerEditableListener","registerDecoratorListener","registerTextContentListener","registerRootListener","registerCommand","commandsMap","listenersInPriorityOrder","registerMutationListener","klassToMutate","resolveRegisteredNodeAfterReplacements","getRegisteredNode","skipInitialization","initializeMutationListener","nodeMutationMap","k","registerNodeTransformToKlass","registerNodeTransform","registeredReplaceWithNode","hasNode","hasNodes","bind","getDecorators","setRootElement","userSelect","wordBreak","setEditorState","maybeStringifiedEditorState","JSON","parse","defaultSelection","blur","setEditable","$normalizeSelection__EXPERIMENTAL"],"sources":["/media/ks/My thing/test/textditor_Using_lixical/node_modules/lexical/Lexical.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createCommand(type) {\n  return {\n    type\n  } ;\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = createCommand('SELECTION_INSERT_CLIPBOARD_NODES_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INSERT_TAB_COMMAND = createCommand('INSERT_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst SELECT_ALL_COMMAND = createCommand('SELECT_ALL_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nconst IS_ANDROID = CAN_USE_DOM && /Android/.test(navigator.userAgent);\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_ANDROID_CHROME = CAN_USE_DOM && IS_ANDROID && IS_CHROME;\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// DOM\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3;\n\n// Reconciling\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2;\n\n// Text node modes\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2;\n// IS_INERT = 3\n\n// Text node formatting\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT;\n\n// Text node details\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1;\n\n// Element node formatting\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6;\n\n// Reconciliation\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b';\n\n// For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n';\n\n// For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n// eslint-disable-next-line no-misleading-character-class\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']');\n// eslint-disable-next-line no-misleading-character-class\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction normalizeClassNames(...classNames) {\n  const rval = [];\n  for (const className of classNames) {\n    if (className && typeof className === 'string') {\n      for (const [s] of className.matchAll(/\\S+/g)) {\n        rval.push(s);\n      }\n    }\n  }\n  return rval;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// The time between a text entry event and the mutation observer firing.\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcessingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction $handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement();\n      // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            $handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true;\n          // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = $getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      }\n\n      // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      }\n\n      // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n      const records = observer.takeRecords();\n\n      // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        }\n\n        // Clear any of those removal mutations\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction $flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  }\n\n  // Backward\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  }\n\n  // Forward\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet keyCounter = 1;\nfunction resetRandomKey() {\n  keyCounter = 1;\n}\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' && getEditorPropertyFromDOMNode(activeElement) == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * @returns true if the given argument is a LexicalEditor instance from this build of Lexical\n */\nfunction isLexicalEditor(editor) {\n  // Check instanceof to prevent issues with multiple embedded Lexical installations\n  return editor instanceof LexicalEditor;\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    const editor = getEditorPropertyFromDOMNode(currentNode);\n    if (isLexicalEditor(editor)) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\n\n/** @internal */\nfunction getEditorPropertyFromDOMNode(node) {\n  // @ts-expect-error: internal field\n  return node ? node.__lexicalEditor : null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  if (alignWithFormat !== null && (format & activeFormat) === (alignWithFormat & activeFormat)) {\n    return format;\n  }\n  let newFormat = format ^ activeFormat;\n  if (type === 'subscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.superscript;\n  } else if (type === 'superscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.subscript;\n  }\n  return newFormat;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    {\n      errorOnNodeKeyConstructorMismatch(node, existingKey);\n    }\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node);\n  // TODO Split this function into leaf/element\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction errorOnNodeKeyConstructorMismatch(node, existingKey) {\n  const editorState = internalGetActiveEditorState();\n  if (!editorState) {\n    // tests expect to be able to do this kind of clone without an active editor state\n    return;\n  }\n  const existingNode = editorState._nodeMap.get(existingKey);\n  if (existingNode && existingNode.constructor !== node.constructor) {\n    // Lifted condition to if statement because the inverted logic is a bit confusing\n    if (node.constructor.name !== existingNode.constructor.name) {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with constructor ${existingNode.constructor.name}. Keys must not be re-used when the type is changed.`);\n      }\n    } else {\n      {\n        throw Error(`Lexical node with constructor ${node.constructor.name} attempted to re-use key from node in active editor state with different constructor with the same name (possibly due to invalid Hot Module Replacement). Keys must not be re-used when the type is changed.`);\n      }\n    }\n  }\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\n\n// TODO #6031 this function or their callers have to adjust selection (i.e. insertBefore)\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling();\n    // TODO: this function duplicates a bunch of operations, can be simplified.\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n// Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction $getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor();\n  // @ts-ignore We intentionally add this to the Node.\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = $getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection.setCachedNodes(null);\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  $flushRootMutations(editor);\n}\nfunction $getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const prevTextContentSize = node.getTextContentSize();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start or boundaries when not insertable, and we need\n      // to clear this input from occurring as that action wasn't permitted.\n      $isRangeSelection(prevSelection) && (parent !== null && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0 || prevSelection.anchor.key === textNode.__key && prevSelection.anchor.offset === 0 && !node.canInsertTextBefore() && !isComposing || prevSelection.focus.key === textNode.__key && prevSelection.focus.offset === prevTextContentSize && !node.canInsertTextAfter() && !isComposing)) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n}\n\n// This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() && !node.isComposing() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() && !node.isComposing() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(key, altKey, ctrlKey, metaKey) {\n  return key === 'Tab' && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'b' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'i' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(key, altKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'u' && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(key, shiftKey) {\n  return isReturn(key) && !shiftKey;\n}\nfunction isLineBreak(key, shiftKey) {\n  return isReturn(key) && shiftKey;\n}\n\n// Inserts a new line after the selection\n\nfunction isOpenLineBreak(key, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && key.toLowerCase() === 'o';\n}\nfunction isDeleteWordBackward(key, altKey, ctrlKey) {\n  return isBackspace(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(key, altKey, ctrlKey) {\n  return isDelete(key) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(key, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(key);\n}\nfunction isDeleteLineForward(key, metaKey) {\n  return IS_APPLE && metaKey && isDelete(key);\n}\nfunction isDeleteBackward(key, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(key) || key.toLowerCase() === 'h' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(key);\n}\nfunction isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(key) || key.toLowerCase() === 'd' && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(key);\n}\nfunction isUndo(key, shiftKey, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'z' && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(key, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return key.toLowerCase() === 'z' && metaKey && shiftKey;\n  }\n  return key.toLowerCase() === 'y' && ctrlKey || key.toLowerCase() === 'z' && ctrlKey && shiftKey;\n}\nfunction isCopy(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'c') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(key, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (key.toLowerCase() === 'x') {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(key) {\n  return key === 'ArrowLeft';\n}\nfunction isArrowRight(key) {\n  return key === 'ArrowRight';\n}\nfunction isArrowUp(key) {\n  return key === 'ArrowUp';\n}\nfunction isArrowDown(key) {\n  return key === 'ArrowDown';\n}\nfunction isMoveBackward(key, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(key, ctrlKey, altKey, metaKey) {\n  return isArrowRight(key) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(key) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(key, ctrlKey, metaKey) {\n  return isArrowUp(key) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(key, ctrlKey, metaKey) {\n  return isArrowDown(key) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(key) {\n  return key === ' ';\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(key) {\n  return key === 'Enter';\n}\nfunction isBackspace(key) {\n  return key === 'Backspace';\n}\nfunction isEscape(key) {\n  return key === 'Escape';\n}\nfunction isDelete(key) {\n  return key === 'Delete';\n}\nfunction isSelectAll(key, metaKey, ctrlKey) {\n  return key.toLowerCase() === 'a' && controlOrMeta(metaKey, ctrlKey);\n}\nfunction $selectAll() {\n  const root = $getRoot();\n  const selection = root.select(0, root.getChildrenSize());\n  $setSelection($normalizeSelection(selection));\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  if (classNamesTheme.__lexicalClassNameCache === undefined) {\n    classNamesTheme.__lexicalClassNameCache = {};\n  }\n  const classNamesCache = classNamesTheme.__lexicalClassNameCache;\n  const cachedClassNames = classNamesCache[classNameThemeType];\n  if (cachedClassNames !== undefined) {\n    return cachedClassNames;\n  }\n  const classNames = classNamesTheme[classNameThemeType];\n  // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n  if (typeof classNames === 'string') {\n    const classNamesArr = normalizeClassNames(classNames);\n    classNamesCache[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey);\n  // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const klassType = klass.getType();\n  const editorState = getActiveEditorState();\n  if (editorState._readOnly) {\n    const nodes = getCachedTypeToNodeMap(editorState).get(klassType);\n    return nodes ? Array.from(nodes.values()) : [];\n  }\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && node.isAttached()) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\n\n/**\n * Returns a shallow clone of node with a new key\n *\n * @param node - The node to be copied.\n * @returns The copy of the node.\n */\nfunction $copyNode(node) {\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction $getNodeByKeyOrThrow(key) {\n  const node = $getNodeByKey(key);\n  if (node === null) {\n    {\n      throw Error(`Expected node with key ${key} to exist but it's not in the nodeMap.`);\n    }\n  }\n  return node;\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = normalizeClassNames(blockCursorTheme);\n      // @ts-expect-error: intentional\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  }\n  // Remove cursor\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent);\n    // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      if (!($isElementNode(currentNode) && $isElementNode(nodeToMove))) {\n        throw Error(`Children of a root must be ElementNode`);\n      }\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML anchor tag, false otherwise\n */\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\n\n/**\n * @param x - The element being testing\n * @returns Returns true if x is an HTML element, false otherwise.\n */\nfunction isHTMLElement(x) {\n  // @ts-ignore-next-line - strict check on nodeType here should filter out non-Element EventTarget implementors\n  return x.nodeType === 1;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is an inline node\n */\nfunction isInlineDomNode(node) {\n  const inlineNodes = new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var|#text)$/, 'i');\n  return node.nodeName.match(inlineNodes) !== null;\n}\n\n/**\n *\n * @param node - the Dom Node to check\n * @returns if the Dom Node is a block node\n */\nfunction isBlockDomNode(node) {\n  const blockNodes = new RegExp(/^(address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hr|li|main|nav|noscript|ol|p|pre|section|table|td|tfoot|ul|video)$/, 'i');\n  return node.nodeName.match(blockNodes) !== null;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isRootNode(node) || $isDecoratorNode(node) && !node.isInline()) {\n    return true;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Utility function for accessing current active editor instance.\n * @returns Current active editor\n */\nfunction $getEditor() {\n  return getActiveEditor();\n}\n\n/** @internal */\n\n/**\n * @internal\n * Compute a cached Map of node type to nodes for a frozen EditorState\n */\nconst cachedNodeMaps = new WeakMap();\nconst EMPTY_TYPE_TO_NODE_MAP = new Map();\nfunction getCachedTypeToNodeMap(editorState) {\n  // If this is a new Editor it may have a writable this._editorState\n  // with only a 'root' entry.\n  if (!editorState._readOnly && editorState.isEmpty()) {\n    return EMPTY_TYPE_TO_NODE_MAP;\n  }\n  if (!editorState._readOnly) {\n    throw Error(`getCachedTypeToNodeMap called with a writable EditorState`);\n  }\n  let typeToNodeMap = cachedNodeMaps.get(editorState);\n  if (!typeToNodeMap) {\n    typeToNodeMap = new Map();\n    cachedNodeMaps.set(editorState, typeToNodeMap);\n    for (const [nodeKey, node] of editorState._nodeMap) {\n      const nodeType = node.__type;\n      let nodeMap = typeToNodeMap.get(nodeType);\n      if (!nodeMap) {\n        nodeMap = new Map();\n        typeToNodeMap.set(nodeType, nodeMap);\n      }\n      nodeMap.set(nodeKey, node);\n    }\n  }\n  return typeToNodeMap;\n}\n\n/**\n * Returns a clone of a node using `node.constructor.clone()` followed by\n * `clone.afterCloneFrom(node)`. The resulting clone must have the same key,\n * parent/next/prev pointers, and other properties that are not set by\n * `node.constructor.clone` (format, style, etc.). This is primarily used by\n * {@link LexicalNode.getWritable} to create a writable version of an\n * existing node. The clone is the same logical node as the original node,\n * do not try and use this function to duplicate or copy an existing node.\n *\n * Does not mutate the EditorState.\n * @param node - The node to be cloned.\n * @returns The clone of the node.\n */\nfunction $cloneWithProperties(latestNode) {\n  const constructor = latestNode.constructor;\n  const mutableNode = constructor.clone(latestNode);\n  mutableNode.afterCloneFrom(latestNode);\n  {\n    if (!(mutableNode.__key === latestNode.__key)) {\n      throw Error(`$cloneWithProperties: ${constructor.name}.clone(node) (with type '${constructor.getType()}') did not return a node with the same key, make sure to specify node.__key as the last argument to the constructor`);\n    }\n    if (!(mutableNode.__parent === latestNode.__parent && mutableNode.__next === latestNode.__next && mutableNode.__prev === latestNode.__prev)) {\n      throw Error(`$cloneWithProperties: ${constructor.name}.clone(node) (with type '${constructor.getType()}') overrided afterCloneFrom but did not call super.afterCloneFrom(prevNode)`);\n    }\n  }\n  return mutableNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    // TODO Revise condition below, redundant? LexicalNode already cleans up children when moving Nodes\n    if (child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes);\n      }\n\n      // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMapDelete.push(childKey);\n    }\n    child = child.getNextSibling();\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  // Store dirtyElements in a queue for later deletion; deleting dirty subtrees too early will\n  // hinder accessing .__next on child nodes\n  const nodeMapDelete = [];\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyElements);\n        }\n        // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMapDelete.push(nodeKey);\n      }\n    }\n  }\n  for (const nodeKey of nodeMapDelete) {\n    nodeMap.delete(nodeKey);\n  }\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet subTreeTextFormat = null;\nlet subTreeTextStyle = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  }\n\n  // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction $createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1);\n\n  // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      $createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n      // Decorators are always non editable\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction $createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  $createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction $createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    $createNode(children[startIndex], dom, insertDOM);\n    const node = activeNextNodeMap.get(children[startIndex]);\n    if (node !== null && $isTextNode(node)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = node.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = node.getStyle();\n      }\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n}\n\n// If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        try {\n          dom.removeChild(element);\n        } catch (error) {\n          if (typeof error === 'object' && error != null) {\n            const msg = `${error.toString()} Parent: ${dom.tagName}, child: ${element.tagName}.`;\n            throw new Error(msg);\n          } else {\n            throw error;\n          }\n        }\n      }\n\n      // @ts-expect-error: internal field\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br');\n    // @ts-expect-error: internal field\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileParagraphFormat(element) {\n  if ($isParagraphNode(element) && subTreeTextFormat != null && subTreeTextFormat !== element.__textFormat && !activeEditorStateReadOnly) {\n    element.setTextFormat(subTreeTextFormat);\n    element.setTextStyle(subTreeTextStyle);\n  }\n}\nfunction reconcileParagraphStyle(element) {\n  if ($isParagraphNode(element) && subTreeTextStyle !== '' && subTreeTextStyle !== element.__textStyle && !activeEditorStateReadOnly) {\n    element.setTextStyle(subTreeTextStyle);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent;\n  // @ts-expect-error: internal field\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined;\n\n      // Remove the old theme classes if they exist\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = normalizeClassNames(previousDirectionTheme);\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        }\n\n        // @ts-ignore: intentional\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = normalizeClassNames(nextDirectionTheme);\n            // @ts-expect-error: intentional\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        }\n\n        // Update direction\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction;\n    // @ts-expect-error: internal field\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent;\n    // @ts-expect-error: internal field\n    dom.__lexicalDir = direction;\n  }\n}\nfunction $reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  subTreeTextFormat = null;\n  subTreeTextStyle = '';\n  $reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  reconcileParagraphFormat(nextElement);\n  reconcileParagraphStyle(nextElement);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction $reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      $reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = $createNode(nextFrstChildKey, null, null);\n      try {\n        dom.replaceChild(replacementDOM, lastDOM);\n      } catch (error) {\n        if (typeof error === 'object' && error != null) {\n          const msg = `${error.toString()} Parent: ${dom.tagName}, new child: {tag: ${replacementDOM.tagName} key: ${nextFrstChildKey}}, old child: {tag: ${lastDOM.tagName}, key: ${prevFirstChildKey}}.`;\n          throw new Error(msg);\n        } else {\n          throw error;\n        }\n      }\n      destroyNode(prevFirstChildKey, null);\n    }\n    const nextChildNode = activeNextNodeMap.get(nextFrstChildKey);\n    if ($isTextNode(nextChildNode)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = nextChildNode.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = nextChildNode.getStyle();\n      }\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        $createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction $reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key);\n\n  // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      }\n\n      // @ts-expect-error: internal field\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  }\n  // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  }\n\n  // Update node. If it returns true, we need to unmount and re-create the node\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = $createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      $reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    const nextRootNode = nextNode.getWritable();\n    nextRootNode.__cachedText = editorTextContent;\n    nextNode = nextRootNode;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction $reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        $createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling($reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          $reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n    const node = activeNextNodeMap.get(nextKey);\n    if (node !== null && $isTextNode(node)) {\n      if (subTreeTextFormat === null) {\n        subTreeTextFormat = node.getFormat();\n      }\n      if (subTreeTextStyle === '') {\n        subTreeTextStyle = node.getStyle();\n      }\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    $createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction $reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = '';\n  // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap);\n  // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  $reconcileNode('root', null);\n  // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n  activeEditor$1 = undefined;\n  // @ts-ignore\n  activeEditorNodes = undefined;\n  // @ts-ignore\n  activeDirtyElements = undefined;\n  // @ts-ignore\n  activeDirtyLeaves = undefined;\n  // @ts-ignore\n  activePrevNodeMap = undefined;\n  // @ts-ignore\n  activeNextNodeMap = undefined;\n  // @ts-ignore\n  activeEditorConfig = undefined;\n  // @ts-ignore\n  activePrevKeyToDOMMap = undefined;\n  // @ts-ignore\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap;\n  // @ts-ignore We intentionally add this to the Node.\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = null;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nconst rootElementsRegistered = new WeakMap();\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0];\n\n// This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false;\n\n    // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection();\n\n    // Update the selection format\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        }\n\n        // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        const root = $getRoot();\n        const isRootTextContentEmpty = editor.isComposing() === false && root.getTextContent() === '';\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Point.getNode() must return TextNode when type is text`);\n            }\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element' && !isRootTextContentEmpty) {\n            const lastNode = anchor.getNode();\n            selection.style = '';\n            if (lastNode instanceof ParagraphNode && lastNode.getChildrenSize() === 0) {\n              selection.format = lastNode.getTextFormat();\n              selection.style = lastNode.getTextStyle();\n            } else {\n              selection.format = 0;\n            }\n          }\n        }\n      } else {\n        const anchorKey = anchor.key;\n        const focus = selection.focus;\n        const focusKey = focus.key;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        const isBackward = selection.isBackward();\n        const startOffset = isBackward ? focusOffset : anchorOffset;\n        const endOffset = isBackward ? anchorOffset : focusOffset;\n        const startKey = isBackward ? focusKey : anchorKey;\n        const endKey = isBackward ? anchorKey : focusKey;\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          const textContentSize = node.getTextContentSize();\n          if ($isTextNode(node) && textContentSize !== 0 &&\n          // Exclude empty text nodes at boundaries resulting from user's selection\n          !(i === 0 && node.__key === startKey && startOffset === textContentSize || i === nodesLength - 1 && node.__key === endKey && endOffset === 0)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n}\n\n// This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if (domSelection) {\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const anchorNode = anchor.getNode();\n        if (anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n          domSelection.removeAllRanges();\n          selection.dirty = true;\n        } else if (event.detail === 3 && !selection.isCollapsed()) {\n          // Tripple click causing selection to overflow into the nearest element. In that\n          // case visually it looks like a single element content is selected, focus node\n          // is actually at the beginning of the next element (if present) and any manipulations\n          // with selection (formatting) are affecting second element as well\n          const focus = selection.focus;\n          const focusNode = focus.getNode();\n          if (anchorNode !== focusNode) {\n            if ($isElementNode(anchorNode)) {\n              anchorNode.select(0);\n            } else {\n              anchorNode.getParentOrThrow().select(0);\n            }\n          }\n        }\n      } else if (event.pointerType === 'touch') {\n        // This is used to update the selection on touch devices when the user clicks on text after a\n        // node selection. See isSelectionChangeFromMouseDown for the inverse\n        const domAnchorNode = domSelection.anchorNode;\n        if (domAnchorNode !== null) {\n          const nodeType = domAnchorNode.nodeType;\n          // If the user is attempting to click selection back onto text, then\n          // we should attempt create a range selection.\n          // When we click on an empty paragraph node or the end of a paragraph that ends\n          // with an image/poll, the nodeType will be ELEMENT_NODE\n          if (nodeType === DOM_ELEMENT_TYPE || nodeType === DOM_TEXT_TYPE) {\n            const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, editor, event);\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 'MediaLast' && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event);\n\n  // We let the browser do its own thing for composition.\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        const isSelectionAnchorSameAsFocus = selection.anchor.key === selection.focus.key;\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && isSelectionAnchorSameAsFocus) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0;\n          // Fixes an Android bug where selection flickers when backspacing\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Anchor node must be a TextNode`);\n            }\n            selection.style = anchorNode.getStyle();\n          }\n        } else {\n          $setCompositionKey(null);\n          event.preventDefault();\n          // Chromium Android at the moment seems to ignore the preventDefault\n          // on 'deleteContentBackward' and still deletes the content. Which leads\n          // to multiple deletions. So we let the browser handle the deletion in this case.\n          const selectedNodeText = selection.anchor.getNode().getTextContent();\n          const hasSelectedAllTextInNode = selection.anchor.offset === 0 && selection.focus.offset === selectedNodeText.length;\n          const shouldLetBrowserHandleDelete = IS_ANDROID_CHROME && isSelectionAnchorSameAsFocus && !hasSelectedAllTextInNode;\n          if (!shouldLetBrowserHandleDelete) {\n            dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n          }\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n\n    // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    }\n\n    // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n\n          // Safari does not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n          // We do not apply this logic to iOS to allow newline auto-capitalization\n          // work without creating linebreaks when pressing Enter\n          if (isInsertLineBreak && !IS_IOS) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n      // NO-OP\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const isBackward = selection.isBackward();\n      const startOffset = isBackward ? selection.anchor.offset : selection.focus.offset;\n      const endOffset = isBackward ? selection.focus.offset : selection.anchor.offset;\n      // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, startOffset) + data + anchorNode.getTextContent().slice(startOffset + endOffset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length;\n\n      // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      }\n\n      // This ensures consistency on Android.\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData);\n\n      // onInput always fires after onCompositionEnd for FF.\n      if (isFirefoxEndingComposition) {\n        $onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    }\n\n    // Also flush any other mutations that might have occurred\n    // since the change.\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || $isTextNode(node) && node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction $onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null);\n\n  // Handle termination of composition.\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    }\n\n    // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      $onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.key;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    key,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (key == null) {\n    return;\n  }\n  if (isMoveForward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(key, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(key, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(key, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(key)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(key, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(key, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(key, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(key)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(key)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(key, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(key)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(key, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(key, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(key, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(key, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(key, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(key, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(key, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n      }\n      // FF does it well (no need to override behavior)\n    } else if (!IS_FIREFOX && isSelectAll(key, metaKey, ctrlKey)) {\n      event.preventDefault();\n      dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = [];\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n}\n\n// Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType;\n      // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = $internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor, event);\n      $setSelection(newSelection);\n    });\n  }\n\n  // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true);\n\n  // If newly selected editor is nested, then add it to the map, clean map otherwise\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (documentRootElementsCount === undefined || documentRootElementsCount < 1) {\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered.set(doc, (documentRootElementsCount || 0) + 1);\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable() || eventName === 'click') {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      const isEditable = editor.isEditable();\n      switch (eventName) {\n        case 'cut':\n          return isEditable && dispatchCommand(editor, CUT_COMMAND, event);\n        case 'copy':\n          return dispatchCommand(editor, COPY_COMMAND, event);\n        case 'paste':\n          return isEditable && dispatchCommand(editor, PASTE_COMMAND, event);\n        case 'dragstart':\n          return isEditable && dispatchCommand(editor, DRAGSTART_COMMAND, event);\n        case 'dragover':\n          return isEditable && dispatchCommand(editor, DRAGOVER_COMMAND, event);\n        case 'dragend':\n          return isEditable && dispatchCommand(editor, DRAGEND_COMMAND, event);\n        case 'focus':\n          return isEditable && dispatchCommand(editor, FOCUS_COMMAND, event);\n        case 'blur':\n          {\n            return isEditable && dispatchCommand(editor, BLUR_COMMAND, event);\n          }\n        case 'drop':\n          return isEditable && dispatchCommand(editor, DROP_COMMAND, event);\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  const doc = rootElement.ownerDocument;\n  const documentRootElementsCount = rootElementsRegistered.get(doc);\n  if (!(documentRootElementsCount !== undefined)) {\n    throw Error(`Root element not registered`);\n  } // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  const newCount = documentRootElementsCount - 1;\n  if (!(newCount >= 0)) {\n    throw Error(`Root element count less than 0`);\n  }\n  rootElementsRegistered.set(doc, newCount);\n  if (newCount === 0) {\n    doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  const editor = getEditorPropertyFromDOMNode(rootElement);\n  if (isLexicalEditor(editor)) {\n    cleanActiveNestedEditorsMap(editor);\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = null;\n  } else if (editor) {\n    {\n      throw Error(`Attempted to remove event handlers from a node that does not belong to this build of Lexical`);\n    }\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  }\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction $removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  } else if ($isNodeSelection(selection) && restoreSelection && nodeToRemove.isSelected()) {\n    nodeToRemove.selectPrevious();\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    $removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // Allow us to look up the type including static props\n\n  /** @internal */\n\n  /** @internal */\n  //@ts-ignore We set the key in the constructor.\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  /**\n   * Perform any state updates on the clone of prevNode that are not already\n   * handled by the constructor call in the static clone method. If you have\n   * state to update in your clone that is not handled directly by the\n   * constructor, it is advisable to override this method but it is required\n   * to include a call to `super.afterCloneFrom(prevNode)` in your\n   * implementation. This is only intended to be called by\n   * {@link $cloneWithProperties} function or via a super call.\n   *\n   * @example\n   * ```ts\n   * class ClassesTextNode extends TextNode {\n   *   // Not shown: static getType, static importJSON, exportJSON, createDOM, updateDOM\n   *   __classes = new Set<string>();\n   *   static clone(node: ClassesTextNode): ClassesTextNode {\n   *     // The inherited TextNode constructor is used here, so\n   *     // classes is not set by this method.\n   *     return new ClassesTextNode(node.__text, node.__key);\n   *   }\n   *   afterCloneFrom(node: this): void {\n   *     // This calls TextNode.afterCloneFrom and LexicalNode.afterCloneFrom\n   *     // for necessary state updates\n   *     super.afterCloneFrom(node);\n   *     this.__addClasses(node.__classes);\n   *   }\n   *   // This method is a private implementation detail, it is not\n   *   // suitable for the public API because it does not call getWritable\n   *   __addClasses(classNames: Iterable<string>): this {\n   *     for (const className of classNames) {\n   *       this.__classes.add(className);\n   *     }\n   *     return this;\n   *   }\n   *   addClass(...classNames: string[]): this {\n   *     return this.getWritable().__addClasses(classNames);\n   *   }\n   *   removeClass(...classNames: string[]): this {\n   *     const node = this.getWritable();\n   *     for (const className of classNames) {\n   *       this.__classes.delete(className);\n   *     }\n   *     return this;\n   *   }\n   *   getClasses(): Set<string> {\n   *     return this.getLatest().__classes;\n   *   }\n   * }\n   * ```\n   *\n   */\n  afterCloneFrom(prevNode) {\n    this.__parent = prevNode.__parent;\n    this.__next = prevNode.__next;\n    this.__prev = prevNode.__prev;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  constructor(key) {\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, this.constructor);\n      }\n    }\n  }\n  // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n  getType() {\n    return this.__type;\n  }\n  isInline() {\n    {\n      throw Error(`LexicalNode: Node ${this.constructor.name} does not implement .isInline().`);\n    }\n  }\n\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    }\n    // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n    const isElementRangeSelection = $isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element';\n    if (isElementRangeSelection) {\n      if (targetSelection.isCollapsed()) {\n        return false;\n      }\n      const parentNode = this.getParent();\n      if ($isDecoratorNode(this) && this.isInline() && parentNode) {\n        const firstPoint = targetSelection.isBackward() ? targetSelection.focus : targetSelection.anchor;\n        const firstElement = firstPoint.getNode();\n        if (firstPoint.offset === firstElement.getChildrenSize() && firstElement.is(parentNode) && firstElement.getLastChildOrThrow().is(this)) {\n          return false;\n        }\n      }\n    }\n    return isSelected;\n  }\n\n  /**\n   * Returns this nodes key.\n   */\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        if (!($isElementNode(node) || node === this && $isDecoratorNode(node))) {\n          throw Error(`Children of root nodes must be elements or decorators`);\n        }\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  }\n\n  // TO-DO: this function can be simplified a lot\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      if (node === null) {\n        break;\n      }\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        } else {\n          break;\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n\n  /**\n   * Returns a mutable version of the node using {@link $cloneWithProperties}\n   * if necessary. Will throw an error if called outside of a Lexical Editor\n   * {@link LexicalEditor.update} callback.\n   *\n   */\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key;\n    // Ensure we get the latest node from pending state\n    const latestNode = this.getLatest();\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection.setCachedNodes(null);\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const mutableNode = $cloneWithProperties(latestNode);\n    cloneNotNeeded.add(key);\n    internalMarkNodeAsDirty(mutableNode);\n    // Update reference in node map\n    nodeMap.set(key, mutableNode);\n    return mutableNode;\n  }\n\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n  getTextContent() {\n    return '';\n  }\n\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n  getTextContentSize() {\n    return this.getTextContent().length;\n  }\n\n  // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n  static transform() {\n    return null;\n  }\n\n  // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n  remove(preserveEmptyParent) {\n    $removeNode(this, true, preserveEmptyParent);\n  }\n\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) {\n      selection = selection.clone();\n    }\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    $removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      if (!($isElementNode(this) && $isElementNode(writableReplaceWith))) {\n        throw Error(`includeChildren should only be true for ElementNodes`);\n      }\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertAfter(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert before this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertBefore(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev;\n    // TODO: this is O(n), can we improve?\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n  isParentRequired() {\n    return false;\n  }\n\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  selectStart() {\n    return this.selectPrevious();\n  }\n  selectEnd() {\n    return this.selectNext(0, 0);\n  }\n\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type);\n  // Common error - split in its own invariant\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Insert a series of nodes after this LexicalNode (as next siblings)\n *\n * @param firstToInsert - The first node to insert after this one.\n * @param lastToInsert - The last node to insert after this one. Must be a\n * later sibling of FirstNode. If not provided, it will be its last sibling.\n */\nfunction insertRangeAfter(node, firstToInsert, lastToInsert) {\n  const lastToInsert2 = firstToInsert.getParentOrThrow().getLastChild();\n  let current = firstToInsert;\n  const nodesToInsert = [firstToInsert];\n  while (current !== lastToInsert2) {\n    if (!current.getNextSibling()) {\n      {\n        throw Error(`insertRangeAfter: lastToInsert must be a later sibling of firstToInsert`);\n      }\n    }\n    current = current.getNextSibling();\n    nodesToInsert.push(current);\n  }\n  let currentNode = node;\n  for (const nodeToInsert of nodesToInsert) {\n    currentNode = currentNode.insertAfter(nodeToInsert);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        if (isOnlyChildInBlockNode(node) || isLastChildInBlockNode(node)) {\n          return null;\n        }\n        return {\n          conversion: $convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction $convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\nfunction isOnlyChildInBlockNode(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null && isBlockDomNode(parentElement)) {\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      const lastChild = parentElement.lastChild;\n      if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isLastChildInBlockNode(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null && isBlockDomNode(parentElement)) {\n    // check if node is first child, because only childs dont count\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      return false;\n    }\n\n    // check if its last child\n    const lastChild = parentElement.lastChild;\n    if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isWhitespaceDomTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE && /^( |\\t|\\r?\\n)+$/.test(node.textContent || '');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList;\n  // Firstly we handle the base theme.\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  }\n  // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing();\n  // Always add a suffix if we're composing a node\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        }\n        // @ts-expect-error\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme;\n  // Apply theme class names\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__format = prevNode.__format;\n    this.__style = prevNode.__style;\n    this.__mode = prevNode.__mode;\n    this.__detail = prevNode.__detail;\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead.\n   *\n   * @returns a number representing the format of the text node.\n   */\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\n   * or TextNode.isUnmergeable instead.\n   *\n   * @returns a number representing the detail of the text node.\n   */\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  /**\n   * Returns the mode (TextModeType) of the TextNode, which may be \"normal\", \"token\", or \"segmented\"\n   *\n   * @returns TextModeType.\n   */\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  /**\n   * Returns the styles currently applied to the node. This is analogous to CSSText in the DOM.\n   *\n   * @returns CSSText-like string of styles applied to the underlying DOM node.\n   */\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  /**\n   * Returns whether or not the node is in \"token\" mode. TextNodes in token mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted as a single entity (not invdividually by character).\n   *\n   * @returns true if the node is in token mode, false otherwise.\n   */\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  /**\n   *\n   * @returns true if Lexical detects that an IME or other 3rd-party script is attempting to\n   * mutate the TextNode, false otherwise.\n   */\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  /**\n   * Returns whether or not the node is in \"segemented\" mode. TextNodes in segemented mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted in space-delimited \"segments\".\n   *\n   * @returns true if the node is in segmented mode, false otherwise.\n   */\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  /**\n   * Returns whether or not the node is \"directionless\". Directionless nodes don't respect changes between RTL and LTR modes.\n   *\n   * @returns true if the node is directionless, false otherwise.\n   */\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  /**\n   * Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\n   * adjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen.\n   *\n   * @returns true if the node is unmergeable, false otherwise.\n   */\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\n   * string values to get the format of a TextNode.\n   *\n   * @param type - the TextFormatType to check for.\n   *\n   * @returns true if the node has the provided format, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type \"text\"\n   * (i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).\n   *\n   * @returns true if the node is simple text, false otherwise.\n   */\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  /**\n   * Returns the text content of the node as a string.\n   *\n   * @returns a string representing the text content of the node.\n   */\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n\n  /**\n   *\n   * @returns true if the text node supports font styling, false otherwise.\n   */\n  canHaveFormat() {\n    return true;\n  }\n\n  // View\n\n  createDOM(config, editor) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (this.hasFormat('code')) {\n      dom.setAttribute('spellcheck', 'false');\n    }\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme;\n    // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: $convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor);\n    if (!(element !== null && isHTMLElement(element))) {\n      throw Error(`Expected TextNode createDOM to always return a HTMLElement`);\n    }\n    element.style.whiteSpace = 'pre-wrap';\n    // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n    if (this.hasFormat('bold')) {\n      element = wrapElementWith(element, 'b');\n    }\n    if (this.hasFormat('italic')) {\n      element = wrapElementWith(element, 'i');\n    }\n    if (this.hasFormat('strikethrough')) {\n      element = wrapElementWith(element, 's');\n    }\n    if (this.hasFormat('underline')) {\n      element = wrapElementWith(element, 'u');\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  }\n\n  // Mutators\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  }\n\n  /**\n   * Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\n   * version of the argument can only specify one format and doing so will remove all other formats that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleFormat}\n   *\n   * @param format - TextFormatType or 32-bit integer representing the node format.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  }\n\n  /**\n   * Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\n   * version of the argument can only specify one detail value and doing so will remove all other detail values that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleDirectionless}\n   * or {@link TextNode.toggleUnmergeable}\n   *\n   * @param detail - TextDetailType or 32-bit integer representing the node detail.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  /**\n   * Sets the node style to the provided CSSText-like string. Set this property as you\n   * would an HTMLElement style attribute to apply inline styles to the underlying DOM Element.\n   *\n   * @param style - CSSText to be applied to the underlying HTMLElement.\n   *\n   * @returns this TextNode.\n   */\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  /**\n   * Applies the provided format to this TextNode if it's not present. Removes it if it's present.\n   * The subscript and superscript formats are mutually exclusive.\n   * Prefer using this method to turn specific formats on and off.\n   *\n   * @param type - TextFormatType to toggle.\n   *\n   * @returns this TextNode.\n   */\n  toggleFormat(type) {\n    const format = this.getFormat();\n    const newFormat = toggleTextFormatType(format, type, null);\n    return this.setFormat(newFormat);\n  }\n\n  /**\n   * Toggles the directionless detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  /**\n   * Toggles the unmergeable detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  /**\n   * Sets the mode of the node.\n   *\n   * @returns this TextNode.\n   */\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  /**\n   * Sets the text content of the node.\n   *\n   * @param text - the string to set as the text value of the node.\n   *\n   * @returns this TextNode.\n   */\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  /**\n   * Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets.\n   *\n   * @param _anchorOffset - the offset at which the Selection anchor will be placed.\n   * @param _focusOffset - the offset at which the Selection focus will be placed.\n   *\n   * @returns the new RangeSelection.\n   */\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  selectStart() {\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const size = this.getTextContentSize();\n    return this.select(size, size);\n  }\n\n  /**\n   * Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\n   * specified. Can optionally calculate a new selection after the operation is complete.\n   *\n   * @param offset - the offset at which the splice operation should begin.\n   * @param delCount - the number of characters to delete, starting from the offset.\n   * @param newText - the text to insert into the TextNode at the offset.\n   * @param moveSelection - optional, whether or not to move selection to the end of the inserted substring.\n   *\n   * @returns this TextNode.\n   */\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted before the node, false otherwise.\n   */\n  canInsertTextBefore() {\n    return true;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted after the node, false otherwise.\n   */\n  canInsertTextAfter() {\n    return true;\n  }\n\n  /**\n   * Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\n   * formed by the split, and inserting those new TextNodes into the editor, replacing the one that was split.\n   *\n   * @param splitOffsets - rest param of the text content character offsets at which this node should be split.\n   *\n   * @returns an Array containing the newly-created TextNodes.\n   */\n  splitText(...splitOffsets) {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParent();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    }\n\n    // Handle selection\n    const selection = $getSelection();\n\n    // Then handle all other parts\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    }\n\n    // Insert the nodes into the parent's children\n    if (parent !== null) {\n      internalMarkSiblingsAsDirty(this);\n      const writableParent = parent.getWritable();\n      const insertionIndex = this.getIndexWithinParent();\n      if (hasReplacedSelf) {\n        writableParent.splice(insertionIndex, 0, splitNodes);\n        this.remove();\n      } else {\n        writableParent.splice(insertionIndex, 1, splitNodes);\n      }\n      if ($isRangeSelection(selection)) {\n        $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n      }\n    }\n    return splitNodes;\n  }\n\n  /**\n   * Merges the target TextNode into this TextNode, removing the target node.\n   *\n   * @param target - the TextNode to merge into this one.\n   *\n   * @returns this TextNode.\n   */\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\n   * node class that you create and replace matched text with should return true from this method.\n   *\n   * @returns true if the node is to be treated as a \"text entity\", false otherwise.\n   */\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode;\n  const style = span.style;\n  return {\n    forChild: applyTextFormatFromStyle(style),\n    node: null\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode;\n  // Google Docs wraps all copied HTML in a <b> with font-weight normal\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: applyTextFormatFromStyle(b.style, hasNormalFontWeight ? undefined : 'bold'),\n    node: null\n  };\n}\nconst preParentCache = new WeakMap();\nfunction isNodePre(node) {\n  return node.nodeName === 'PRE' || node.nodeType === DOM_ELEMENT_TYPE && node.style !== undefined && node.style.whiteSpace !== undefined && node.style.whiteSpace.startsWith('pre');\n}\nfunction findParentPreDOMNode(node) {\n  let cached;\n  let parent = node.parentNode;\n  const visited = [node];\n  while (parent !== null && (cached = preParentCache.get(parent)) === undefined && !isNodePre(parent)) {\n    visited.push(parent);\n    parent = parent.parentNode;\n  }\n  const resultNode = cached === undefined ? parent : cached;\n  for (let i = 0; i < visited.length; i++) {\n    preParentCache.set(visited[i], resultNode);\n  }\n  return resultNode;\n}\nfunction $convertTextDOMNode(domNode) {\n  const domNode_ = domNode;\n  const parentDom = domNode.parentElement;\n  if (!(parentDom !== null)) {\n    throw Error(`Expected parentElement of Text not to be null`);\n  }\n  let textContent = domNode_.textContent || '';\n  // No collapse and preserve segment break for pre, pre-wrap and pre-line\n  if (findParentPreDOMNode(domNode_) !== null) {\n    const parts = textContent.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else if (part !== '') {\n        nodes.push($createTextNode(part));\n      }\n    }\n    return {\n      node: nodes\n    };\n  }\n  textContent = textContent.replace(/\\r/g, '').replace(/[ \\t\\n]+/g, ' ');\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  if (textContent[0] === ' ') {\n    // Traverse backward while in the same line. If content contains new line or tab -> pontential\n    // delete, other elements can borrow from this one. Deletion depends on whether it's also the\n    // last space (see next condition: textContent[textContent.length - 1] === ' '))\n    let previousText = domNode_;\n    let isStartOfLine = true;\n    while (previousText !== null && (previousText = findTextInLine(previousText, false)) !== null) {\n      const previousTextContent = previousText.textContent || '';\n      if (previousTextContent.length > 0) {\n        if (/[ \\t\\n]$/.test(previousTextContent)) {\n          textContent = textContent.slice(1);\n        }\n        isStartOfLine = false;\n        break;\n      }\n    }\n    if (isStartOfLine) {\n      textContent = textContent.slice(1);\n    }\n  }\n  if (textContent[textContent.length - 1] === ' ') {\n    // Traverse forward while in the same line, preserve if next inline will require a space\n    let nextText = domNode_;\n    let isEndOfLine = true;\n    while (nextText !== null && (nextText = findTextInLine(nextText, true)) !== null) {\n      const nextTextContent = (nextText.textContent || '').replace(/^( |\\t|\\r?\\n)+/, '');\n      if (nextTextContent.length > 0) {\n        isEndOfLine = false;\n        break;\n      }\n    }\n    if (isEndOfLine) {\n      textContent = textContent.slice(0, textContent.length - 1);\n    }\n  }\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nfunction findTextInLine(text, forward) {\n  let node = text;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let sibling;\n    while ((sibling = forward ? node.nextSibling : node.previousSibling) === null) {\n      const parentElement = node.parentElement;\n      if (parentElement === null) {\n        return null;\n      }\n      node = parentElement;\n    }\n    node = sibling;\n    if (node.nodeType === DOM_ELEMENT_TYPE) {\n      const display = node.style.display;\n      if (display === '' && !isInlineDomNode(node) || display !== '' && !display.startsWith('inline')) {\n        return null;\n      }\n    }\n    let descendant = node;\n    while ((descendant = forward ? node.firstChild : node.lastChild) !== null) {\n      node = descendant;\n    }\n    if (node.nodeType === DOM_TEXT_TYPE) {\n      return node;\n    } else if (node.nodeName === 'BR') {\n      return null;\n    }\n  }\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: applyTextFormatFromStyle(domNode.style, format),\n    node: null\n  };\n}\nfunction $createTextNode(text = '') {\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\nfunction applyTextFormatFromStyle(style, shouldApply) {\n  const fontWeight = style.fontWeight;\n  const textDecoration = style.textDecoration.split(' ');\n  // Google Docs uses span tags + font-weight for bold text\n  const hasBoldFontWeight = fontWeight === '700' || fontWeight === 'bold';\n  // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n  const hasLinethroughTextDecoration = textDecoration.includes('line-through');\n  // Google Docs uses span tags + font-style for italic text\n  const hasItalicFontStyle = style.fontStyle === 'italic';\n  // Google Docs uses span tags + text-decoration: underline for underline text\n  const hasUnderlineTextDecoration = textDecoration.includes('underline');\n  // Google Docs uses span tags + vertical-align to specify subscript and superscript\n  const verticalAlign = style.verticalAlign;\n  return lexicalNode => {\n    if (!$isTextNode(lexicalNode)) {\n      return lexicalNode;\n    }\n    if (hasBoldFontWeight && !lexicalNode.hasFormat('bold')) {\n      lexicalNode.toggleFormat('bold');\n    }\n    if (hasLinethroughTextDecoration && !lexicalNode.hasFormat('strikethrough')) {\n      lexicalNode.toggleFormat('strikethrough');\n    }\n    if (hasItalicFontStyle && !lexicalNode.hasFormat('italic')) {\n      lexicalNode.toggleFormat('italic');\n    }\n    if (hasUnderlineTextDecoration && !lexicalNode.hasFormat('underline')) {\n      lexicalNode.toggleFormat('underline');\n    }\n    if (verticalAlign === 'sub' && !lexicalNode.hasFormat('subscript')) {\n      lexicalNode.toggleFormat('subscript');\n    }\n    if (verticalAlign === 'super' && !lexicalNode.hasFormat('superscript')) {\n      lexicalNode.toggleFormat('superscript');\n    }\n    if (shouldApply && !lexicalNode.hasFormat(shouldApply)) {\n      lexicalNode.toggleFormat(shouldApply);\n    }\n    return lexicalNode;\n  };\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass TabNode extends TextNode {\n  static getType() {\n    return 'tab';\n  }\n  static clone(node) {\n    return new TabNode(node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    // TabNode __text can be either '\\t' or ''. insertText will remove the empty Node\n    this.__text = prevNode.__text;\n  }\n  constructor(key) {\n    super('\\t', key);\n    this.__detail = IS_UNMERGEABLE;\n  }\n  static importDOM() {\n    return null;\n  }\n  static importJSON(serializedTabNode) {\n    const node = $createTabNode();\n    node.setFormat(serializedTabNode.format);\n    node.setStyle(serializedTabNode.style);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tab',\n      version: 1\n    };\n  }\n  setTextContent(_text) {\n    {\n      throw Error(`TabNode does not support setTextContent`);\n    }\n  }\n  setDetail(_detail) {\n    {\n      throw Error(`TabNode does not support setDetail`);\n    }\n  }\n  setMode(_type) {\n    {\n      throw Error(`TabNode does not support setMode`);\n    }\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n}\nfunction $createTabNode() {\n  return $applyNodeReplacement(new TabNode());\n}\nfunction $isTabNode(node) {\n  return node instanceof TabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection.setCachedNodes(null);\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  }\n  // Transfer the element point to a text point.\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this._cachedNodes = null;\n    this._nodes = objects;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return false;\n  }\n  getStartEndPoints() {\n    return null;\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd;\n    // Insert nodes\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes);\n    // Remove selected nodes\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.format = format;\n    this.style = style;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n\n  /**\n   * Used to check if the provided selections is equal to this one by value,\n   * inluding anchor, focus, format, and style properties.\n   * @param selection - the Selection to compare this one to.\n   * @returns true if the Selections are equal, false otherwise.\n   */\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  /**\n   * Returns whether the Selection is \"collapsed\", meaning the anchor and focus are\n   * the same node and have the same offset.\n   *\n   * @returns true if the Selection is collapsed, false otherwise.\n   */\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  /**\n   * Gets all the nodes in the Selection. Uses caching to make it generally suitable\n   * for use in hot paths.\n   *\n   * @returns an Array containing all the nodes in the Selection\n   */\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset);\n      // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n\n  /**\n   * Sets this Selection to be of type \"text\" at the provided anchor and focus values.\n   *\n   * @param anchorNode - the anchor node to set on the Selection\n   * @param anchorOffset - the offset to set on the Selection\n   * @param focusNode - the focus node to set on the Selection\n   * @param focusOffset - the focus offset to set on the Selection\n   */\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  /**\n   * Gets the (plain) text content of all the nodes in the selection.\n   *\n   * @returns a string representing the text content of all the nodes in the Selection\n   */\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n\n  /**\n   * Attempts to map a DOM selection range onto this Lexical Selection,\n   * setting the anchor, focus, and type accordingly\n   *\n   * @param range a DOM Selection range conforming to the StaticRange interface.\n   */\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = $internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  /**\n   * Creates a new RangeSelection, copying over all the property values from this one.\n   *\n   * @returns a new RangeSelection with the same property values as this one.\n   */\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  /**\n   * Toggles the provided format on all the TextNodes in the Selection.\n   *\n   * @param format a string TextFormatType to toggle on the TextNodes in the selection\n   */\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the value of the style property on the Selection\n   *\n   * @param style - the style to set at the value of the style property.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\n   * has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection.\n   * converts tabs, newlines, and carriage returns into LexicalNodes.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertRawText(text) {\n    const parts = text.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else {\n        nodes.push($createTextNode(part));\n      }\n    }\n    this.insertNodes(nodes);\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection as a new\n   * Lexical TextNode, according to a series of insertion heuristics based on the selection type and position.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const format = this.format;\n    const style = this.style;\n    let firstPoint = anchor;\n    let endPoint = focus;\n    if (!this.isCollapsed() && focus.isBefore(anchor)) {\n      firstPoint = focus;\n      endPoint = anchor;\n    }\n    if (firstPoint.type === 'element') {\n      $transferStartingElementPointToTextPoint(firstPoint, endPoint, format, style);\n    }\n    const startOffset = firstPoint.offset;\n    let endOffset = endPoint.offset;\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (selectedNodesLength === 1 && endPoint.type === 'element') {\n      endOffset = firstNodeTextLength;\n      endPoint.set(firstPoint.key, endOffset, 'text');\n    }\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || !nextSibling.canInsertTextBefore() || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        nextSibling.setStyle(style);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        $normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          }\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      } else if ($isTabNode(firstNode)) {\n        // We don't need to check for delCount because there is only the entire selected node case\n        // that can hit here for content size 1 and with canInsertTextBeforeAfter false\n        const textNode = $createTextNode(text);\n        textNode.setFormat(format);\n        textNode.setStyle(style);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]);\n\n      // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode;\n\n      // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      }\n\n      // Handle mutations to the last node.\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          // root node selections only select whole nodes, so no text splice is necessary\n          if (!$isRootNode(endPoint.getNode()) && endPoint.type === 'text') {\n            lastNode = lastNode.spliceText(0, endOffset, '');\n          }\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      }\n\n      // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement);\n\n      // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      }\n\n      // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      }\n\n      // Remove all selected nodes that haven't already been removed.\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the text in the Selection, adjusting the EditorState accordingly.\n   */\n  removeText() {\n    this.insertText('');\n  }\n\n  /**\n   * Applies the provided format to the TextNodes in the Selection, splitting or\n   * merging nodes as necessary.\n   *\n   * @param formatType the format type to apply to the nodes in the Selection.\n   */\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset;\n\n    // In case selection started at the end of text node use next text node\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize();\n\n    // Single node selected\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n      // The entire node is selected or it is token, so just format it\n      if ($isTokenOrSegmented(firstNode) || startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat);\n\n        // Update selection only if starts/ends on text node\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    }\n    // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n    if (startOffset !== 0 && !$isTokenOrSegmented(firstNode)) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat);\n    // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize() && !$isTokenOrSegmented(lastNode)) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    }\n\n    // Process all text nodes in between\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n      textNode.setFormat(nextFormat);\n    }\n\n    // Update selection only if starts/ends on text node\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  /**\n   * Attempts to \"intelligently\" insert an arbitrary list of Lexical nodes into the EditorState at the\n   * current Selection according to a set of heuristics that determine how surrounding nodes\n   * should be changed, replaced, or moved to accomodate the incoming ones.\n   *\n   * @param nodes - the nodes to insert\n   */\n  insertNodes(nodes) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (this.anchor.key === 'root') {\n      this.insertParagraph();\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        throw Error(`Expected RangeSelection after insertParagraph`);\n      }\n      return selection.insertNodes(nodes);\n    }\n    const firstPoint = this.isBackward() ? this.focus : this.anchor;\n    const firstBlock = $getAncestor(firstPoint.getNode(), INTERNAL_$isBlock);\n    const last = nodes[nodes.length - 1];\n\n    // CASE 1: insert inside a code block\n    if ('__language' in firstBlock && $isElementNode(firstBlock)) {\n      if ('__language' in nodes[0]) {\n        this.insertText(nodes[0].getTextContent());\n      } else {\n        const index = $removeTextAndSplitBlock(this);\n        firstBlock.splice(index, 0, nodes);\n        last.selectEnd();\n      }\n      return;\n    }\n\n    // CASE 2: All elements of the array are inline\n    const notInline = node => ($isElementNode(node) || $isDecoratorNode(node)) && !node.isInline();\n    if (!nodes.some(notInline)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      const index = $removeTextAndSplitBlock(this);\n      firstBlock.splice(index, 0, nodes);\n      last.selectEnd();\n      return;\n    }\n\n    // CASE 3: At least 1 element of the array is not inline\n    const blocksParent = $wrapInlineNodes(nodes);\n    const nodeToSelect = blocksParent.getLastDescendant();\n    const blocks = blocksParent.getChildren();\n    const isMergeable = node => $isElementNode(node) && INTERNAL_$isBlock(node) && !node.isEmpty() && $isElementNode(firstBlock) && (!firstBlock.isEmpty() || firstBlock.canMergeWhenEmpty());\n    const shouldInsert = !$isElementNode(firstBlock) || !firstBlock.isEmpty();\n    const insertedParagraph = shouldInsert ? this.insertParagraph() : null;\n    const lastToInsert = blocks[blocks.length - 1];\n    let firstToInsert = blocks[0];\n    if (isMergeable(firstToInsert)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      firstBlock.append(...firstToInsert.getChildren());\n      firstToInsert = blocks[1];\n    }\n    if (firstToInsert) {\n      insertRangeAfter(firstBlock, firstToInsert);\n    }\n    const lastInsertedBlock = $getAncestor(nodeToSelect, INTERNAL_$isBlock);\n    if (insertedParagraph && $isElementNode(lastInsertedBlock) && (insertedParagraph.canMergeWhenEmpty() || INTERNAL_$isBlock(lastToInsert))) {\n      lastInsertedBlock.append(...insertedParagraph.getChildren());\n      insertedParagraph.remove();\n    }\n    if ($isElementNode(firstBlock) && firstBlock.isEmpty()) {\n      firstBlock.remove();\n    }\n    nodeToSelect.selectEnd();\n\n    // To understand this take a look at the test \"can wrap post-linebreak nodes into new element\"\n    const lastChild = $isElementNode(firstBlock) ? firstBlock.getLastChild() : null;\n    if ($isLineBreakNode(lastChild) && lastInsertedBlock !== firstBlock) {\n      lastChild.remove();\n    }\n  }\n\n  /**\n   * Inserts a new ParagraphNode into the EditorState at the current Selection\n   *\n   * @returns the newly inserted node.\n   */\n  insertParagraph() {\n    if (this.anchor.key === 'root') {\n      const paragraph = $createParagraphNode();\n      $getRoot().splice(this.anchor.offset, 0, [paragraph]);\n      paragraph.select();\n      return paragraph;\n    }\n    const index = $removeTextAndSplitBlock(this);\n    const block = $getAncestor(this.anchor.getNode(), INTERNAL_$isBlock);\n    if (!$isElementNode(block)) {\n      throw Error(`Expected ancestor to be an ElementNode`);\n    }\n    const firstToAppend = block.getChildAtIndex(index);\n    const nodesToInsert = firstToAppend ? [firstToAppend, ...firstToAppend.getNextSiblings()] : [];\n    const newBlock = block.insertNewAfter(this, false);\n    if (newBlock) {\n      newBlock.append(...nodesToInsert);\n      newBlock.selectStart();\n      return newBlock;\n    }\n    // if newBlock is null, it means that block is of type CodeNode.\n    return null;\n  }\n\n  /**\n   * Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\n   * current Selection.\n   */\n  insertLineBreak(selectStart) {\n    const lineBreak = $createLineBreakNode();\n    this.insertNodes([lineBreak]);\n    // this is used in MacOS with the command 'ctrl-O' (openLineBreak)\n    if (selectStart) {\n      const parent = lineBreak.getParentOrThrow();\n      const index = lineBreak.getIndexWithinParent();\n      parent.select(index, index);\n    }\n  }\n\n  /**\n   * Extracts the nodes in the Selection, splitting nodes where necessary\n   * to get offset-level precision.\n   *\n   * @returns The nodes in the Selection\n   */\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Modifies the Selection according to the parameters and a set of heuristics that account for\n   * various node types. Can be used to safely move or extend selection by one logical \"unit\" without\n   * dealing explicitly with all the possible node types.\n   *\n   * @param alter the type of modification to perform\n   * @param isBackward whether or not selection is backwards\n   * @param granularity the granularity at which to apply the modification\n   */\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move';\n\n    // Handle the selection movement around decorators.\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement;\n    // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    }\n    // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity);\n    // Guard against no ranges\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0);\n      // Apply the DOM selection to our Lexical selection.\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        }\n\n        // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n  /**\n   * Helper for handling forward character and word deletion that prevents element nodes\n   * like a table, columns layout being destroyed\n   *\n   * @param anchor the anchor\n   * @param anchorNode the anchor node in the selection\n   * @param isBackward whether or not selection is backwards\n   */\n  forwardDeletion(anchor, anchorNode, isBackward) {\n    if (!isBackward && (\n    // Delete forward handle case\n    anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n      const parent = anchorNode.getParent();\n      const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n      if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Performs one logical character deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteCharacter(isBackward) {\n    const wasCollapsed = this.isCollapsed();\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      let anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n\n      // Handle the deletion around decorators.\n      const focus = this.focus;\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n          const editor = getActiveEditor();\n          editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        }\n        return;\n      } else if (!isBackward && $isElementNode(possibleNode) && $isElementNode(anchorNode) && anchorNode.isEmpty()) {\n        anchorNode.remove();\n        possibleNode.selectStart();\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  /**\n   * Performs one logical line deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      // Since `domSelection.modify('extend', ..., 'lineboundary')` works well for text selections\n      // but doesn't properly handle selections which end on elements, a space character is added\n      // for such selections transforming their anchor's type to 'text'\n      const anchorIsElement = this.anchor.type === 'element';\n      if (anchorIsElement) {\n        this.insertText(' ');\n      }\n      this.modify('extend', isBackward, 'lineboundary');\n\n      // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n\n      // Adjusts selection to include an extra character added for element anchors to remove it\n      if (anchorIsElement) {\n        const startPoint = isBackward ? this.anchor : this.focus;\n        startPoint.set(startPoint.key, startPoint.offset + 1, startPoint.type);\n      }\n    }\n    this.removeText();\n  }\n\n  /**\n   * Performs one logical word deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const anchorNode = anchor.getNode();\n      if (this.forwardDeletion(anchor, anchorNode, isBackward)) {\n        return;\n      }\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $getCharacterOffsets(selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return [0, 0];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction $internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode;\n  // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false;\n    // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length;\n    const blockCursorElement = editor._blockCursorElement;\n    // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (blockCursorElement !== null) {\n      const blockCursorElementParent = blockCursorElement.parentNode;\n      if (dom === blockCursorElementParent) {\n        const blockCursorOffset = Array.prototype.indexOf.call(blockCursorElementParent.children, blockCursorElement);\n        if (offset > blockCursorOffset) {\n          resolvedOffset--;\n        }\n      }\n    }\n    resolvedNode = $getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = $getNodeFromDOM(dom);\n      // Ensure resolvedElement is actually a element.\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        resolvedOffset = Math.min(resolvedElement.getChildrenSize(), resolvedOffset);\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n          resolvedOffset = 0;\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent();\n        // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && $getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = $getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize();\n        // @ts-expect-error: intentional\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0;\n      // @ts-expect-error: intentional\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction $normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus);\n\n    // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = $internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = $internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = $getNodeFromDOM(anchorDOM);\n    const focusNode = $getNodeFromDOM(focusDOM);\n    // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  }\n\n  // Handle normalization of selection when it is at the boundaries.\n  $normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n}\n\n// This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction $internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction $internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isRangeSelection(lastSelection) || lastSelection == null) {\n    return $internalCreateRangeSelection(lastSelection, domSelection, editor, null);\n  }\n  return lastSelection.clone();\n}\nfunction $createRangeSelectionFromDom(domSelection, editor) {\n  return $internalCreateRangeSelection(null, domSelection, editor, null);\n}\nfunction $internalCreateRangeSelection(lastSelection, domSelection, editor, event) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  }\n  // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = event || windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcessingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  }\n  // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n  const resolvedSelectionPoints = $internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key;\n  // Single node. We shift selection but never redimension it\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element');\n      // The new selection might point to text nodes, try to resolve them\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  }\n  // The new selection might point to text nodes, try to resolve them\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement;\n\n  // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  }\n\n  // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  }\n\n  // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  }\n\n  // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {\n    // If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n    {\n      console.warn(error);\n    }\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes) {\n  let selection = $getSelection() || $getPreviousSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  selection.insertNodes(nodes);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction $removeTextAndSplitBlock(selection) {\n  let selection_ = selection;\n  if (!selection.isCollapsed()) {\n    selection_.removeText();\n  }\n  // A new selection can originate as a result of node replacement, in which case is registered via\n  // $setSelection\n  const newSelection = $getSelection();\n  if ($isRangeSelection(newSelection)) {\n    selection_ = newSelection;\n  }\n  if (!$isRangeSelection(selection_)) {\n    throw Error(`Unexpected dirty selection to be null`);\n  }\n  const anchor = selection_.anchor;\n  let node = anchor.getNode();\n  let offset = anchor.offset;\n  while (!INTERNAL_$isBlock(node)) {\n    [node, offset] = $splitNodeAtPoint(node, offset);\n  }\n  return offset;\n}\nfunction $splitNodeAtPoint(node, offset) {\n  const parent = node.getParent();\n  if (!parent) {\n    const paragraph = $createParagraphNode();\n    $getRoot().append(paragraph);\n    paragraph.select();\n    return [$getRoot(), 0];\n  }\n  if ($isTextNode(node)) {\n    const split = node.splitText(offset);\n    if (split.length === 0) {\n      return [parent, node.getIndexWithinParent()];\n    }\n    const x = offset === 0 ? 0 : 1;\n    const index = split[0].getIndexWithinParent() + x;\n    return [parent, index];\n  }\n  if (!$isElementNode(node) || offset === 0) {\n    return [parent, node.getIndexWithinParent()];\n  }\n  const firstToAppend = node.getChildAtIndex(offset);\n  if (firstToAppend) {\n    const insertPoint = new RangeSelection($createPoint(node.__key, offset, 'element'), $createPoint(node.__key, offset, 'element'), 0, '');\n    const newElement = node.insertNewAfter(insertPoint);\n    if (newElement) {\n      newElement.append(firstToAppend, ...firstToAppend.getNextSiblings());\n    }\n  }\n  return [parent, node.getIndexWithinParent() + 1];\n}\nfunction $wrapInlineNodes(nodes) {\n  // We temporarily insert the topLevelNodes into an arbitrary ElementNode,\n  // since insertAfter does not work on nodes that have no parent (TO-DO: fix that).\n  const virtualRoot = $createParagraphNode();\n  let currentBlock = null;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = $isLineBreakNode(node);\n    if (isLineBreakNode || $isDecoratorNode(node) && node.isInline() || $isElementNode(node) && node.isInline() || $isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        virtualRoot.append(currentBlock);\n        // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      virtualRoot.append(node);\n      currentBlock = null;\n    }\n  }\n  return virtualRoot;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update(), editor.read(), or editorState.read().${collectBuildInformation()}`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update() or editor.read().${collectBuildInformation()}`);\n    }\n  }\n  return activeEditor;\n}\nfunction collectBuildInformation() {\n  let compatibleEditors = 0;\n  const incompatibleEditors = new Set();\n  const thisVersion = LexicalEditor.version;\n  if (typeof window !== 'undefined') {\n    for (const node of document.querySelectorAll('[contenteditable]')) {\n      const editor = getEditorPropertyFromDOMNode(node);\n      if (isLexicalEditor(editor)) {\n        compatibleEditors++;\n      } else if (editor) {\n        let version = String(editor.constructor.version || '<0.17.1');\n        if (version === thisVersion) {\n          version += ' (separately built, likely a bundler configuration issue)';\n        }\n        incompatibleEditors.add(version);\n      }\n    }\n  }\n  let output = ` Detected on the page: ${compatibleEditors} compatible editor(s) with version ${thisVersion}`;\n  if (incompatibleEditors.size) {\n    output += ` and incompatible editors with versions ${Array.from(incompatibleEditors).join(', ')}`;\n  }\n  return output;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction internalGetActiveEditorState() {\n  return activeEditorState;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n\n      // We want to prioritize node transforms over element transforms\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    }\n\n    // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    }\n\n    // Make the editorState immutable\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n}\n\n// This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editor, editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = editor;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction $commitPendingUpdates(editor, recoveryEditorState) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  }\n\n  // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false;\n    // We don't want updates to sync block the reconciliation.\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = $reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      }\n\n      // Reset editor and restore incoming editor state to the DOM\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        $commitPendingUpdates(editor, currentEditorState);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState);\n\n  // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window);\n\n  // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, mutatedNodes, tags, dirtyLeaves, currentEditorState);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  // If reconciler fails, we reset whole editor (so current editor state becomes empty)\n  // and attempt to re-render pendingEditorState. If that goes through we trigger\n  // listeners, but instead use recoverEditorState which is current editor state before reset\n  // This specifically important for collab that relies on prevEditorState from update\n  // listener to calculate delta of changed nodes/properties\n  triggerTextContentListeners(editor, recoveryEditorState || currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: recoveryEditorState || currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  $triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, mutatedNodes, updateTags, dirtyLeaves, prevEditorState) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        prevEditorState,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction $triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      $beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false;\n\n  // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (options.discrete) {\n          const pendingEditorState = editor._pendingEditorState;\n          if (!(pendingEditorState !== null)) {\n            throw Error(`Unexpected empty pending editor state on discrete nested update`);\n          }\n          pendingEditorState._flushSync = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction $beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection !== null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = $internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n\n    // Restore existing editor state to the DOM\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    $commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      $commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        $commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    $beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__style = '';\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__first = prevNode.__first;\n    this.__last = prevNode.__last;\n    this.__size = prevNode.__size;\n    this.__indent = prevNode.__indent;\n    this.__format = prevNode.__format;\n    this.__style = prevNode.__style;\n    this.__dir = prevNode.__dir;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while ($isElementNode(node)) {\n      const child = node.getFirstChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while ($isElementNode(node)) {\n      const child = node.getLastChild();\n      if (child === null) {\n        break;\n      }\n      node = child;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  }\n\n  // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return $internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    return firstNode ? firstNode.selectStart() : this.select();\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    return lastNode ? lastNode.selectEnd() : this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append(...nodesToAppend) {\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style || '';\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      }\n      // Set child parent to self\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize;\n\n    // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        // Cleanup if node can't be empty\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  }\n  // JSON serialization\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  }\n  // These are intended to be extends for specific element heuristics.\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  /** @deprecated @internal */\n  canReplaceWith(replacement) {\n    return true;\n  }\n  /** @deprecated @internal */\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  }\n  // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n  isShadowRoot() {\n    return false;\n  }\n  /** @deprecated @internal */\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n\n  /**\n   * Determines whether this node, when empty, can merge with a first block\n   * of nodes being inserted.\n   *\n   * This method is specifically called in {@link RangeSelection.insertNodes}\n   * to determine merging behavior during nodes insertion.\n   *\n   * @example\n   * // In a ListItemNode or QuoteNode implementation:\n   * canMergeWhenEmpty(): true {\n   *  return true;\n   * }\n   */\n  canMergeWhenEmpty() {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/** @noInheritDoc */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  /**\n   * The returned value is added to the LexicalEditor._decorators\n   */\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  }\n\n  // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  // Mutate\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const node = nodesToAppend[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...nodesToAppend);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection;\n\n  // Check if we need to update because of changes in selection\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  }\n\n  // @ts-expect-error\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn, options) {\n    return readEditorState(options && options.editor || null, this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(null, this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// TODO: Cleanup ArtificialNode__DO_NOT_USE #5966\nclass ArtificialNode__DO_NOT_USE extends ElementNode {\n  static getType() {\n    return 'artificial';\n  }\n  createDOM(config) {\n    // this isnt supposed to be used and is not used anywhere but defining it to appease the API\n    const dom = document.createElement('div');\n    return dom;\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__textFormat = 0;\n    this.__textStyle = '';\n  }\n  static getType() {\n    return 'paragraph';\n  }\n  getTextFormat() {\n    const self = this.getLatest();\n    return self.__textFormat;\n  }\n  setTextFormat(type) {\n    const self = this.getWritable();\n    self.__textFormat = type;\n    return self;\n  }\n  hasTextFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getTextFormat() & formatFlag) !== 0;\n  }\n  getTextStyle() {\n    const self = this.getLatest();\n    return self.__textStyle;\n  }\n  setTextStyle(style) {\n    const self = this.getWritable();\n    self.__textStyle = style;\n    return self;\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  }\n  afterCloneFrom(prevNode) {\n    super.afterCloneFrom(prevNode);\n    this.__textFormat = prevNode.__textFormat;\n    this.__textStyle = prevNode.__textStyle;\n  }\n\n  // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: $convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) {\n        element.append(document.createElement('br'));\n      }\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    node.setTextFormat(serializedNode.textFormat);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      textFormat: this.getTextFormat(),\n      textStyle: this.getTextStyle(),\n      type: 'paragraph',\n      version: 1\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(rangeSelection, restoreSelection) {\n    const newElement = $createParagraphNode();\n    newElement.setTextFormat(rangeSelection.format);\n    newElement.setTextStyle(rangeSelection.style);\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    newElement.setFormat(this.getFormatType());\n    newElement.setStyle(this.getTextStyle());\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren();\n    // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction $convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n// https://github.com/microsoft/TypeScript/issues/3841\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst DEFAULT_SKIP_INITIALIZATION = true;\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/**\n * Type helper for extracting the payload type from a command.\n *\n * @example\n * ```ts\n * const MY_COMMAND = createCommand<SomeType>();\n *\n * // ...\n *\n * editor.registerCommand(MY_COMMAND, payload => {\n *   // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n *   handleMyCommand(editor, payload);\n *   return true;\n * });\n *\n * function handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n *   // `payload` is of type `SomeType`, extracted from the command.\n * }\n * ```\n */\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  }\n\n  // Remove all the DOM nodes from the root element\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes, additionalConversions) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  const addConversionsToCache = map => {\n    Object.keys(map).forEach(key => {\n      let currentCache = conversionCache.get(key);\n      if (currentCache === undefined) {\n        currentCache = [];\n        conversionCache.set(key, currentCache);\n      }\n      currentCache.push(map[key]);\n    });\n  };\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM.call(node.klass);\n    if (map !== null) {\n      addConversionsToCache(map);\n    }\n  });\n  if (additionalConversions) {\n    addConversionsToCache(additionalConversions);\n  }\n  return conversionCache;\n}\n\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, TabNode, ParagraphNode, ArtificialNode__DO_NOT_USE, ...(config.nodes || [])];\n  const {\n    onError,\n    html\n  } = config;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replace = null;\n      let replaceWithKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replace = options.with;\n        replaceWithKlass = options.withKlass || null;\n      }\n      // Ensure custom nodes implement required methods and replaceWithKlass is instance of base klass.\n      {\n        // ArtificialNode__DO_NOT_USE can get renamed, so we use the type\n        const nodeType = Object.prototype.hasOwnProperty.call(klass, 'getType') && klass.getType();\n        const name = klass.name;\n        if (replaceWithKlass) {\n          if (!(replaceWithKlass.prototype instanceof klass)) {\n            throw Error(`${replaceWithKlass.name} doesn't extend the ${name}`);\n          }\n        }\n        if (name !== 'RootNode' && nodeType !== 'root' && nodeType !== 'artificial') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        exportDOM: html && html.export ? html.export.get(klass) : undefined,\n        klass,\n        replace,\n        replaceWithKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes, html ? html.import : undefined), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** The version with build identifiers for this editor (since 0.17.1) */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor;\n    // The root element associated with this editor\n    this._rootElement = null;\n    // The current editor state\n    this._editorState = editorState;\n    // Handling of drafts and updates\n    this._pendingEditorState = null;\n    // Used to help co-ordinate selection and events\n    this._compositionKey = null;\n    this._deferred = [];\n    // Used during reconciliation\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false;\n    // Listeners\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    };\n    // Commands\n    this._commands = new Map();\n    // Editor configuration for theme/context.\n    this._config = config;\n    // Mapping of types to their nodes\n    this._nodes = nodes;\n    // React node decorators for portals\n    this._decorators = {};\n    this._pendingDecorators = null;\n    // Used to optimize reconciliation\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set();\n    // Handling of DOM mutations\n    this._observer = null;\n    // Used for identifying owning editors\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * If any existing nodes are in the DOM, and skipInitialization is not true, the listener\n   * will be called immediately with an updateTag of 'registerMutationListener' where all\n   * nodes have the 'created' NodeMutation. This can be controlled with the skipInitialization option\n   * (default is currently true for backwards compatibility in 0.16.x but will change to false in 0.17.0).\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @param options - see {@link MutationListenerOptions}\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerMutationListener(klass, listener, options) {\n    const klassToMutate = this.resolveRegisteredNodeAfterReplacements(this.getRegisteredNode(klass)).klass;\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klassToMutate);\n    const skipInitialization = options && options.skipInitialization;\n    if (!(skipInitialization === undefined ? DEFAULT_SKIP_INITIALIZATION : skipInitialization)) {\n      this.initializeMutationListener(listener, klassToMutate);\n    }\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  /** @internal */\n  getRegisteredNode(klass) {\n    const registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    return registeredNode;\n  }\n\n  /** @internal */\n  resolveRegisteredNodeAfterReplacements(registeredNode) {\n    while (registeredNode.replaceWithKlass) {\n      registeredNode = this.getRegisteredNode(registeredNode.replaceWithKlass);\n    }\n    return registeredNode;\n  }\n\n  /** @internal */\n  initializeMutationListener(listener, klass) {\n    const prevEditorState = this._editorState;\n    const nodeMap = getCachedTypeToNodeMap(prevEditorState).get(klass.getType());\n    if (!nodeMap) {\n      return;\n    }\n    const nodeMutationMap = new Map();\n    for (const k of nodeMap.keys()) {\n      nodeMutationMap.set(k, 'created');\n    }\n    if (nodeMutationMap.size > 0) {\n      listener(nodeMutationMap, {\n        dirtyLeaves: new Set(),\n        prevEditorState,\n        updateTags: new Set(['registerMutationListener'])\n      });\n    }\n  }\n\n  /** @internal */\n  registerNodeTransformToKlass(klass, listener) {\n    const registeredNode = this.getRegisteredNode(klass);\n    registeredNode.transforms.add(listener);\n    return registeredNode;\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n\n  /**\n   * Used to assert that a certain node is registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered the provided node type, false otherwise.\n   */\n  hasNode(node) {\n    return this._nodes.has(node.getType());\n  }\n\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n  hasNodes(nodes) {\n    return nodes.every(this.hasNode.bind(this));\n  }\n\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n  getDecorators() {\n    return this._decorators;\n  }\n\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        $commitPendingUpdates(this);\n\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        // If content editable is unmounted we'll reset editor state back to original\n        // (or pending) editor state since there will be no reconciliation\n        this._editorState = pendingEditorState;\n        this._pendingEditorState = null;\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n  getEditorState() {\n    return this._editorState;\n  }\n\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    $flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      $commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    $commitPendingUpdates(this);\n  }\n\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserialization from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  /**\n   * Executes a read of the editor's state, with the\n   * editor context available (useful for exporting and read-only DOM\n   * operations). Much like update, but prevents any mutation of the\n   * editor's state. Any pending updates will be flushed immediately before\n   * the read.\n   * @param callbackFn - A function that has access to read-only editor state.\n   */\n  read(callbackFn) {\n    $commitPendingUpdates(this);\n    return this.getEditorState().read(callbackFn, {\n      editor: this\n    });\n  }\n\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n  focus(callbackFn, options = {}) {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      });\n      // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  /**\n   * Removes focus from the editor.\n   */\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\nLexicalEditor.version = \"0.17.1+dev.esm\";\n\nexport { $addUpdateTag, $applyNodeReplacement, $cloneWithProperties, $copyNode, $createLineBreakNode, $createNodeSelection, $createParagraphNode, $createPoint, $createRangeSelection, $createRangeSelectionFromDom, $createTabNode, $createTextNode, $getAdjacentNode, $getCharacterOffsets, $getEditor, $getNearestNodeFromDOMNode, $getNearestRootOrShadowRoot, $getNodeByKey, $getNodeByKeyOrThrow, $getPreviousSelection, $getRoot, $getSelection, $getTextContent, $hasAncestor, $hasUpdateTag, $insertNodes, $isBlockElementNode, $isDecoratorNode, $isElementNode, $isInlineElementOrDecoratorNode, $isLeafNode, $isLineBreakNode, $isNodeSelection, $isParagraphNode, $isRangeSelection, $isRootNode, $isRootOrShadowRoot, $isTabNode, $isTextNode, $isTokenOrSegmented, $nodesOfType, $normalizeSelection as $normalizeSelection__EXPERIMENTAL, $parseSerializedNode, $selectAll, $setCompositionKey, $setSelection, $splitNode, ArtificialNode__DO_NOT_USE, BLUR_COMMAND, CAN_REDO_COMMAND, CAN_UNDO_COMMAND, CLEAR_EDITOR_COMMAND, CLEAR_HISTORY_COMMAND, CLICK_COMMAND, COMMAND_PRIORITY_CRITICAL, COMMAND_PRIORITY_EDITOR, COMMAND_PRIORITY_HIGH, COMMAND_PRIORITY_LOW, COMMAND_PRIORITY_NORMAL, CONTROLLED_TEXT_INSERTION_COMMAND, COPY_COMMAND, CUT_COMMAND, DELETE_CHARACTER_COMMAND, DELETE_LINE_COMMAND, DELETE_WORD_COMMAND, DRAGEND_COMMAND, DRAGOVER_COMMAND, DRAGSTART_COMMAND, DROP_COMMAND, DecoratorNode, ElementNode, FOCUS_COMMAND, FORMAT_ELEMENT_COMMAND, FORMAT_TEXT_COMMAND, INDENT_CONTENT_COMMAND, INSERT_LINE_BREAK_COMMAND, INSERT_PARAGRAPH_COMMAND, INSERT_TAB_COMMAND, IS_ALL_FORMATTING, IS_BOLD, IS_CODE, IS_HIGHLIGHT, IS_ITALIC, IS_STRIKETHROUGH, IS_SUBSCRIPT, IS_SUPERSCRIPT, IS_UNDERLINE, KEY_ARROW_DOWN_COMMAND, KEY_ARROW_LEFT_COMMAND, KEY_ARROW_RIGHT_COMMAND, KEY_ARROW_UP_COMMAND, KEY_BACKSPACE_COMMAND, KEY_DELETE_COMMAND, KEY_DOWN_COMMAND, KEY_ENTER_COMMAND, KEY_ESCAPE_COMMAND, KEY_MODIFIER_COMMAND, KEY_SPACE_COMMAND, KEY_TAB_COMMAND, LineBreakNode, MOVE_TO_END, MOVE_TO_START, OUTDENT_CONTENT_COMMAND, PASTE_COMMAND, ParagraphNode, REDO_COMMAND, REMOVE_TEXT_COMMAND, RootNode, SELECTION_CHANGE_COMMAND, SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, SELECT_ALL_COMMAND, TEXT_TYPE_TO_FORMAT, TabNode, TextNode, UNDO_COMMAND, createCommand, createEditor, getEditorPropertyFromDOMNode, getNearestEditorFromDOMNode, isBlockDomNode, isCurrentlyReadOnlyMode, isHTMLAnchorElement, isHTMLElement, isInlineDomNode, isLexicalEditor, isSelectionCapturedInDecoratorInput, isSelectionWithinEditor, resetRandomKey };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}