{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalCommandsLog, TreeView as TreeView$1, generateContent } from '@lexical/devtools-core';\nimport { mergeRegister } from '@lexical/utils';\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction TreeView(_ref) {\n  let {\n    treeTypeButtonClassName,\n    timeTravelButtonClassName,\n    timeTravelPanelSliderClassName,\n    timeTravelPanelButtonClassName,\n    viewClassName,\n    timeTravelPanelClassName,\n    editor,\n    customPrintNode\n  } = _ref;\n  const treeElementRef = /*#__PURE__*/React.createRef();\n  const [editorCurrentState, setEditorCurrentState] = useState(editor.getEditorState());\n  const commandsLog = useLexicalCommandsLog(editor);\n  useEffect(() => {\n    return mergeRegister(editor.registerUpdateListener(_ref2 => {\n      let {\n        editorState\n      } = _ref2;\n      setEditorCurrentState(editorState);\n    }), editor.registerEditableListener(() => {\n      setEditorCurrentState(editor.getEditorState());\n    }));\n  }, [editor]);\n  useEffect(() => {\n    const element = treeElementRef.current;\n    if (element !== null) {\n      // @ts-ignore Internal field\n      element.__lexicalEditor = editor;\n      return () => {\n        // @ts-ignore Internal field\n        element.__lexicalEditor = null;\n      };\n    }\n  }, [editor, treeElementRef]);\n  const handleEditorReadOnly = isReadonly => {\n    const rootElement = editor.getRootElement();\n    if (rootElement == null) {\n      return;\n    }\n    rootElement.contentEditable = isReadonly ? 'false' : 'true';\n  };\n  return /*#__PURE__*/jsx(TreeView$1, {\n    treeTypeButtonClassName: treeTypeButtonClassName,\n    timeTravelButtonClassName: timeTravelButtonClassName,\n    timeTravelPanelSliderClassName: timeTravelPanelSliderClassName,\n    timeTravelPanelButtonClassName: timeTravelPanelButtonClassName,\n    viewClassName: viewClassName,\n    timeTravelPanelClassName: timeTravelPanelClassName,\n    setEditorReadOnly: handleEditorReadOnly,\n    editorState: editorCurrentState,\n    setEditorState: state => editor.setEditorState(state),\n    generateContent: async function (exportDOM) {\n      return generateContent(editor, commandsLog, exportDOM, customPrintNode);\n    },\n    ref: treeElementRef\n  });\n}\nexport { TreeView };","map":{"version":3,"names":["useLexicalCommandsLog","TreeView","TreeView$1","generateContent","mergeRegister","React","useState","useEffect","jsx","_ref","treeTypeButtonClassName","timeTravelButtonClassName","timeTravelPanelSliderClassName","timeTravelPanelButtonClassName","viewClassName","timeTravelPanelClassName","editor","customPrintNode","treeElementRef","createRef","editorCurrentState","setEditorCurrentState","getEditorState","commandsLog","registerUpdateListener","_ref2","editorState","registerEditableListener","element","current","__lexicalEditor","handleEditorReadOnly","isReadonly","rootElement","getRootElement","contentEditable","setEditorReadOnly","setEditorState","state","exportDOM","ref"],"sources":["/media/ks/My thing/test/textditor/node_modules/@lexical/react/LexicalTreeView.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useLexicalCommandsLog, TreeView as TreeView$1, generateContent } from '@lexical/devtools-core';\nimport { mergeRegister } from '@lexical/utils';\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsx } from 'react/jsx-runtime';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction TreeView({\n  treeTypeButtonClassName,\n  timeTravelButtonClassName,\n  timeTravelPanelSliderClassName,\n  timeTravelPanelButtonClassName,\n  viewClassName,\n  timeTravelPanelClassName,\n  editor,\n  customPrintNode\n}) {\n  const treeElementRef = /*#__PURE__*/React.createRef();\n  const [editorCurrentState, setEditorCurrentState] = useState(editor.getEditorState());\n  const commandsLog = useLexicalCommandsLog(editor);\n  useEffect(() => {\n    return mergeRegister(editor.registerUpdateListener(({\n      editorState\n    }) => {\n      setEditorCurrentState(editorState);\n    }), editor.registerEditableListener(() => {\n      setEditorCurrentState(editor.getEditorState());\n    }));\n  }, [editor]);\n  useEffect(() => {\n    const element = treeElementRef.current;\n    if (element !== null) {\n      // @ts-ignore Internal field\n      element.__lexicalEditor = editor;\n      return () => {\n        // @ts-ignore Internal field\n        element.__lexicalEditor = null;\n      };\n    }\n  }, [editor, treeElementRef]);\n  const handleEditorReadOnly = isReadonly => {\n    const rootElement = editor.getRootElement();\n    if (rootElement == null) {\n      return;\n    }\n    rootElement.contentEditable = isReadonly ? 'false' : 'true';\n  };\n  return /*#__PURE__*/jsx(TreeView$1, {\n    treeTypeButtonClassName: treeTypeButtonClassName,\n    timeTravelButtonClassName: timeTravelButtonClassName,\n    timeTravelPanelSliderClassName: timeTravelPanelSliderClassName,\n    timeTravelPanelButtonClassName: timeTravelPanelButtonClassName,\n    viewClassName: viewClassName,\n    timeTravelPanelClassName: timeTravelPanelClassName,\n    setEditorReadOnly: handleEditorReadOnly,\n    editorState: editorCurrentState,\n    setEditorState: state => editor.setEditorState(state),\n    generateContent: async function (exportDOM) {\n      return generateContent(editor, commandsLog, exportDOM, customPrintNode);\n    },\n    ref: treeElementRef\n  });\n}\n\nexport { TreeView };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,qBAAqB,EAAEC,QAAQ,IAAIC,UAAU,EAAEC,eAAe,QAAQ,wBAAwB;AACvG,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,GAAG,QAAQ,mBAAmB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASP,QAAQA,CAAAQ,IAAA,EASd;EAAA,IATe;IAChBC,uBAAuB;IACvBC,yBAAyB;IACzBC,8BAA8B;IAC9BC,8BAA8B;IAC9BC,aAAa;IACbC,wBAAwB;IACxBC,MAAM;IACNC;EACF,CAAC,GAAAR,IAAA;EACC,MAAMS,cAAc,GAAG,aAAab,KAAK,CAACc,SAAS,CAAC,CAAC;EACrD,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGf,QAAQ,CAACU,MAAM,CAACM,cAAc,CAAC,CAAC,CAAC;EACrF,MAAMC,WAAW,GAAGvB,qBAAqB,CAACgB,MAAM,CAAC;EACjDT,SAAS,CAAC,MAAM;IACd,OAAOH,aAAa,CAACY,MAAM,CAACQ,sBAAsB,CAACC,KAAA,IAE7C;MAAA,IAF8C;QAClDC;MACF,CAAC,GAAAD,KAAA;MACCJ,qBAAqB,CAACK,WAAW,CAAC;IACpC,CAAC,CAAC,EAAEV,MAAM,CAACW,wBAAwB,CAAC,MAAM;MACxCN,qBAAqB,CAACL,MAAM,CAACM,cAAc,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EACZT,SAAS,CAAC,MAAM;IACd,MAAMqB,OAAO,GAAGV,cAAc,CAACW,OAAO;IACtC,IAAID,OAAO,KAAK,IAAI,EAAE;MACpB;MACAA,OAAO,CAACE,eAAe,GAAGd,MAAM;MAChC,OAAO,MAAM;QACX;QACAY,OAAO,CAACE,eAAe,GAAG,IAAI;MAChC,CAAC;IACH;EACF,CAAC,EAAE,CAACd,MAAM,EAAEE,cAAc,CAAC,CAAC;EAC5B,MAAMa,oBAAoB,GAAGC,UAAU,IAAI;IACzC,MAAMC,WAAW,GAAGjB,MAAM,CAACkB,cAAc,CAAC,CAAC;IAC3C,IAAID,WAAW,IAAI,IAAI,EAAE;MACvB;IACF;IACAA,WAAW,CAACE,eAAe,GAAGH,UAAU,GAAG,OAAO,GAAG,MAAM;EAC7D,CAAC;EACD,OAAO,aAAaxB,GAAG,CAACN,UAAU,EAAE;IAClCQ,uBAAuB,EAAEA,uBAAuB;IAChDC,yBAAyB,EAAEA,yBAAyB;IACpDC,8BAA8B,EAAEA,8BAA8B;IAC9DC,8BAA8B,EAAEA,8BAA8B;IAC9DC,aAAa,EAAEA,aAAa;IAC5BC,wBAAwB,EAAEA,wBAAwB;IAClDqB,iBAAiB,EAAEL,oBAAoB;IACvCL,WAAW,EAAEN,kBAAkB;IAC/BiB,cAAc,EAAEC,KAAK,IAAItB,MAAM,CAACqB,cAAc,CAACC,KAAK,CAAC;IACrDnC,eAAe,EAAE,eAAAA,CAAgBoC,SAAS,EAAE;MAC1C,OAAOpC,eAAe,CAACa,MAAM,EAAEO,WAAW,EAAEgB,SAAS,EAAEtB,eAAe,CAAC;IACzE,CAAC;IACDuB,GAAG,EAAEtB;EACP,CAAC,CAAC;AACJ;AAEA,SAASjB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}