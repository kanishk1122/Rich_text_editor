{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar markdown = require('@lexical/markdown');\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar LexicalHorizontalRuleNode = require('@lexical/react/LexicalHorizontalRuleNode');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst HR = {\n  dependencies: [LexicalHorizontalRuleNode.HorizontalRuleNode],\n  export: node => {\n    return LexicalHorizontalRuleNode.$isHorizontalRuleNode(node) ? '***' : null;\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = LexicalHorizontalRuleNode.$createHorizontalRuleNode(); // TODO: Get rid of isImport flag\n\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line);\n    } else {\n      parentNode.insertBefore(line);\n    }\n    line.selectNext();\n  },\n  type: 'element'\n};\nconst DEFAULT_TRANSFORMERS = [HR, ...markdown.TRANSFORMERS];\nfunction MarkdownShortcutPlugin(_ref) {\n  let {\n    transformers = DEFAULT_TRANSFORMERS\n  } = _ref;\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return markdown.registerMarkdownShortcuts(editor, transformers);\n  }, [editor, transformers]);\n  return null;\n}\nexports.DEFAULT_TRANSFORMERS = DEFAULT_TRANSFORMERS;\nexports.MarkdownShortcutPlugin = MarkdownShortcutPlugin;","map":{"version":3,"names":["markdown","require","LexicalComposerContext","LexicalHorizontalRuleNode","react","HR","dependencies","HorizontalRuleNode","export","node","$isHorizontalRuleNode","regExp","replace","parentNode","_1","_2","isImport","line","$createHorizontalRuleNode","getNextSibling","insertBefore","selectNext","type","DEFAULT_TRANSFORMERS","TRANSFORMERS","MarkdownShortcutPlugin","_ref","transformers","editor","useLexicalComposerContext","useEffect","registerMarkdownShortcuts","exports"],"sources":["/media/ks/My thing/test/textditor/node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar markdown = require('@lexical/markdown');\nvar LexicalComposerContext = require('@lexical/react/LexicalComposerContext');\nvar LexicalHorizontalRuleNode = require('@lexical/react/LexicalHorizontalRuleNode');\nvar react = require('react');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst HR = {\n  dependencies: [LexicalHorizontalRuleNode.HorizontalRuleNode],\n  export: node => {\n    return LexicalHorizontalRuleNode.$isHorizontalRuleNode(node) ? '***' : null;\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = LexicalHorizontalRuleNode.$createHorizontalRuleNode(); // TODO: Get rid of isImport flag\n\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line);\n    } else {\n      parentNode.insertBefore(line);\n    }\n\n    line.selectNext();\n  },\n  type: 'element'\n};\nconst DEFAULT_TRANSFORMERS = [HR, ...markdown.TRANSFORMERS];\nfunction MarkdownShortcutPlugin({\n  transformers = DEFAULT_TRANSFORMERS\n}) {\n  const [editor] = LexicalComposerContext.useLexicalComposerContext();\n  react.useEffect(() => {\n    return markdown.registerMarkdownShortcuts(editor, transformers);\n  }, [editor, transformers]);\n  return null;\n}\n\nexports.DEFAULT_TRANSFORMERS = DEFAULT_TRANSFORMERS;\nexports.MarkdownShortcutPlugin = MarkdownShortcutPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAC3C,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,uCAAuC,CAAC;AAC7E,IAAIE,yBAAyB,GAAGF,OAAO,CAAC,0CAA0C,CAAC;AACnF,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,EAAE,GAAG;EACTC,YAAY,EAAE,CAACH,yBAAyB,CAACI,kBAAkB,CAAC;EAC5DC,MAAM,EAAEC,IAAI,IAAI;IACd,OAAON,yBAAyB,CAACO,qBAAqB,CAACD,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI;EAC7E,CAAC;EACDE,MAAM,EAAE,uBAAuB;EAC/BC,OAAO,EAAEA,CAACC,UAAU,EAAEC,EAAE,EAAEC,EAAE,EAAEC,QAAQ,KAAK;IACzC,MAAMC,IAAI,GAAGd,yBAAyB,CAACe,yBAAyB,CAAC,CAAC,CAAC,CAAC;;IAEpE,IAAIF,QAAQ,IAAIH,UAAU,CAACM,cAAc,CAAC,CAAC,IAAI,IAAI,EAAE;MACnDN,UAAU,CAACD,OAAO,CAACK,IAAI,CAAC;IAC1B,CAAC,MAAM;MACLJ,UAAU,CAACO,YAAY,CAACH,IAAI,CAAC;IAC/B;IAEAA,IAAI,CAACI,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,IAAI,EAAE;AACR,CAAC;AACD,MAAMC,oBAAoB,GAAG,CAAClB,EAAE,EAAE,GAAGL,QAAQ,CAACwB,YAAY,CAAC;AAC3D,SAASC,sBAAsBA,CAAAC,IAAA,EAE5B;EAAA,IAF6B;IAC9BC,YAAY,GAAGJ;EACjB,CAAC,GAAAG,IAAA;EACC,MAAM,CAACE,MAAM,CAAC,GAAG1B,sBAAsB,CAAC2B,yBAAyB,CAAC,CAAC;EACnEzB,KAAK,CAAC0B,SAAS,CAAC,MAAM;IACpB,OAAO9B,QAAQ,CAAC+B,yBAAyB,CAACH,MAAM,EAAED,YAAY,CAAC;EACjE,CAAC,EAAE,CAACC,MAAM,EAAED,YAAY,CAAC,CAAC;EAC1B,OAAO,IAAI;AACb;AAEAK,OAAO,CAACT,oBAAoB,GAAGA,oBAAoB;AACnDS,OAAO,CAACP,sBAAsB,GAAGA,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}