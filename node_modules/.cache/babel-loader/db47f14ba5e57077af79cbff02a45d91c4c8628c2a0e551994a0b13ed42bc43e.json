{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction createCommand(type) {\n  return {\n    type\n  };\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = createCommand('SELECTION_INSERT_CLIPBOARD_NODES_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INSERT_TAB_COMMAND = createCommand('INSERT_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst SELECT_ALL_COMMAND = createCommand('SELECT_ALL_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nconst IS_ANDROID = CAN_USE_DOM && /Android/.test(navigator.userAgent);\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// DOM\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3;\n\n// Reconciling\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2;\n\n// Text node modes\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2;\n// IS_INERT = 3\n\n// Text node formatting\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT;\n\n// Text node details\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1;\n\n// Element node formatting\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6;\n\n// Reconciliation\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b';\n\n// For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n';\n\n// For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n// eslint-disable-next-line no-misleading-character-class\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']');\n// eslint-disable-next-line no-misleading-character-class\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// The time between a text entry event and the mutation observer firing.\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcessingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement();\n      // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true;\n          // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      }\n\n      // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      }\n\n      // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n      const records = observer.takeRecords();\n\n      // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        }\n\n        // Clear any of those removal mutations\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  }\n\n  // Backward\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  }\n\n  // Forward\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet keyCounter = 1;\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' &&\n  // @ts-ignore iternal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n    if (editor != null) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  if (alignWithFormat !== null && (format & activeFormat) === (alignWithFormat & activeFormat)) {\n    return format;\n  }\n  let newFormat = format ^ activeFormat;\n  if (type === 'subscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.superscript;\n  } else if (type === 'superscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.subscript;\n  }\n  return newFormat;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node);\n  // TODO Split this function into leaf/element\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling();\n    // TODO: this function duplicates a bunch of operations, can be simplified.\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n// Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor();\n  // @ts-ignore We intentionally add this to the Node.\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection.setCachedNodes(null);\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  flushRootMutations(editor);\n}\nfunction getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const prevTextContentSize = node.getTextContentSize();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start or boundaries when not insertable, and we need\n      // to clear this input from occurring as that action wasn't permitted.\n      $isRangeSelection(prevSelection) && (parent !== null && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0 || prevSelection.anchor.key === textNode.__key && prevSelection.anchor.offset === 0 && !node.canInsertTextBefore() && !isComposing || prevSelection.focus.key === textNode.__key && prevSelection.focus.offset === prevTextContentSize && !node.canInsertTextAfter() && !isComposing)) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n}\n\n// This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(keyCode, altKey, ctrlKey, metaKey) {\n  return keyCode === 9 && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 66 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 73 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 85 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(keyCode, shiftKey) {\n  return isReturn(keyCode) && !shiftKey;\n}\nfunction isLineBreak(keyCode, shiftKey) {\n  return isReturn(keyCode) && shiftKey;\n}\n\n// Inserts a new line after the selection\n\nfunction isOpenLineBreak(keyCode, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && keyCode === 79;\n}\nfunction isDeleteWordBackward(keyCode, altKey, ctrlKey) {\n  return isBackspace(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(keyCode, altKey, ctrlKey) {\n  return isDelete(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(keyCode);\n}\nfunction isDeleteLineForward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isDelete(keyCode);\n}\nfunction isDeleteBackward(keyCode, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(keyCode) || keyCode === 72 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(keyCode);\n}\nfunction isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(keyCode) || keyCode === 68 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(keyCode);\n}\nfunction isUndo(keyCode, shiftKey, metaKey, ctrlKey) {\n  return keyCode === 90 && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return keyCode === 90 && metaKey && shiftKey;\n  }\n  return keyCode === 89 && ctrlKey || keyCode === 90 && ctrlKey && shiftKey;\n}\nfunction isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 67) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 88) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(keyCode) {\n  return keyCode === 37;\n}\nfunction isArrowRight(keyCode) {\n  return keyCode === 39;\n}\nfunction isArrowUp(keyCode) {\n  return keyCode === 38;\n}\nfunction isArrowDown(keyCode) {\n  return keyCode === 40;\n}\nfunction isMoveBackward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(keyCode, ctrlKey, metaKey) {\n  return isArrowUp(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(keyCode, ctrlKey, metaKey) {\n  return isArrowDown(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(keyCode) {\n  return keyCode === 32;\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(keyCode) {\n  return keyCode === 13;\n}\nfunction isBackspace(keyCode) {\n  return keyCode === 8;\n}\nfunction isEscape(keyCode) {\n  return keyCode === 27;\n}\nfunction isDelete(keyCode) {\n  return keyCode === 46;\n}\nfunction isSelectAll(keyCode, metaKey, ctrlKey) {\n  return keyCode === 65 && controlOrMeta(metaKey, ctrlKey);\n}\nfunction $selectAll() {\n  const root = $getRoot();\n  const selection = root.select(0, root.getChildrenSize());\n  $setSelection($normalizeSelection(selection));\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  if (classNamesTheme.__lexicalClassNameCache === undefined) {\n    classNamesTheme.__lexicalClassNameCache = {};\n  }\n  const classNamesCache = classNamesTheme.__lexicalClassNameCache;\n  const cachedClassNames = classNamesCache[classNameThemeType];\n  if (cachedClassNames !== undefined) {\n    return cachedClassNames;\n  }\n  const classNames = classNamesTheme[classNameThemeType];\n  // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n  if (typeof classNames === 'string') {\n    const classNamesArr = classNames.split(' ');\n    classNamesCache[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey);\n  // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  // @ts-expect-error\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = blockCursorTheme.split(' ');\n      // @ts-expect-error: intentional\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  }\n  // Remove cursor\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent);\n    // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      if (!($isElementNode(currentNode) && $isElementNode(nodeToMove))) {\n        throw Error(`Children of a root must be ElementNode`);\n      }\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML anchor tag, false otherwise\n */\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\n\n/**\n * @param x - The element being testing\n * @returns Returns true if x is an HTML element, false otherwise.\n */\nfunction isHTMLElement(x) {\n  // @ts-ignore-next-line - strict check on nodeType here should filter out non-Element EventTarget implementors\n  return x.nodeType === 1;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isDecoratorNode(node) && !node.isInline()) {\n    return true;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Utility function for accessing current active editor instance.\n * @returns Current active editor\n */\nfunction $getEditor() {\n  return getActiveEditor();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    // TODO Revise condition below, redundant? LexicalNode already cleans up children when moving Nodes\n    if (child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes);\n      }\n\n      // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMapDelete.push(childKey);\n    }\n    child = child.getNextSibling();\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  // Store dirtyElements in a queue for later deletion; deleting dirty subtrees too early will\n  // hinder accessing .__next on child nodes\n  const nodeMapDelete = [];\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyElements);\n        }\n        // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMapDelete.push(nodeKey);\n      }\n    }\n  }\n  for (const nodeKey of nodeMapDelete) {\n    nodeMap.delete(nodeKey);\n  }\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  }\n\n  // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1);\n\n  // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n      // Decorators are always non editable\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    createNode(children[startIndex], dom, insertDOM);\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n}\n\n// If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        dom.removeChild(element);\n      }\n\n      // @ts-expect-error: internal field\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br');\n    // @ts-expect-error: internal field\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent;\n  // @ts-expect-error: internal field\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined;\n\n      // Remove the old theme classes if they exist\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = previousDirectionTheme.split(' ');\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        }\n\n        // @ts-ignore: intentional\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = nextDirectionTheme.split(' ');\n            // @ts-expect-error: intentional\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        }\n\n        // Update direction\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction;\n    // @ts-expect-error: internal field\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent;\n    // @ts-expect-error: internal field\n    dom.__lexicalDir = direction;\n  }\n}\nfunction reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key);\n\n  // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      }\n\n      // @ts-expect-error: internal field\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  }\n  // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  }\n\n  // Update node. If it returns true, we need to unmount and re-create the node\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    const nextRootNode = nextNode.getWritable();\n    nextRootNode.__cachedText = editorTextContent;\n    nextNode = nextRootNode;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = '';\n  // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap);\n  // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  reconcileNode('root', null);\n  // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n  activeEditor$1 = undefined;\n  // @ts-ignore\n  activeEditorNodes = undefined;\n  // @ts-ignore\n  activeDirtyElements = undefined;\n  // @ts-ignore\n  activeDirtyLeaves = undefined;\n  // @ts-ignore\n  activePrevNodeMap = undefined;\n  // @ts-ignore\n  activeNextNodeMap = undefined;\n  // @ts-ignore\n  activeEditorConfig = undefined;\n  // @ts-ignore\n  activePrevKeyToDOMMap = undefined;\n  // @ts-ignore\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap;\n  // @ts-ignore We intentionally add this to the Node.\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = 0;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nlet rootElementsRegistered = 0;\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0];\n\n// This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false;\n\n    // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection();\n\n    // Update the selection format\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        }\n\n        // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        const root = $getRoot();\n        const isRootTextContentEmpty = editor.isComposing() === false && root.getTextContent() === '';\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Point.getNode() must return TextNode when type is text`);\n            }\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element' && !isRootTextContentEmpty) {\n            selection.format = 0;\n            selection.style = '';\n          }\n        }\n      } else {\n        const anchorKey = anchor.key;\n        const focus = selection.focus;\n        const focusKey = focus.key;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        const isBackward = selection.isBackward();\n        const startOffset = isBackward ? focusOffset : anchorOffset;\n        const endOffset = isBackward ? anchorOffset : focusOffset;\n        const startKey = isBackward ? focusKey : anchorKey;\n        const endKey = isBackward ? anchorKey : focusKey;\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          const textContentSize = node.getTextContentSize();\n          if ($isTextNode(node) && textContentSize !== 0 &&\n          // Exclude empty text nodes at boundaries resulting from user's selection\n          !(i === 0 && node.__key === startKey && startOffset === textContentSize || i === nodesLength - 1 && node.__key === endKey && endOffset === 0)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n}\n\n// This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if (domSelection) {\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const anchorNode = anchor.getNode();\n        if (anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n          domSelection.removeAllRanges();\n          selection.dirty = true;\n        } else if (event.detail === 3 && !selection.isCollapsed()) {\n          // Tripple click causing selection to overflow into the nearest element. In that\n          // case visually it looks like a single element content is selected, focus node\n          // is actually at the beginning of the next element (if present) and any manipulations\n          // with selection (formatting) are affecting second element as well\n          const focus = selection.focus;\n          const focusNode = focus.getNode();\n          if (anchorNode !== focusNode) {\n            if ($isElementNode(anchorNode)) {\n              anchorNode.select(0);\n            } else {\n              anchorNode.getParentOrThrow().select(0);\n            }\n          }\n        }\n      } else if (event.pointerType === 'touch') {\n        // This is used to update the selection on touch devices when the user clicks on text after a\n        // node selection. See isSelectionChangeFromMouseDown for the inverse\n        const domAnchorNode = domSelection.anchorNode;\n        if (domAnchorNode !== null) {\n          const nodeType = domAnchorNode.nodeType;\n          // If the user is attempting to click selection back onto text, then\n          // we should attempt create a range selection.\n          // When we click on an empty paragraph node or the end of a paragraph that ends\n          // with an image/poll, the nodeType will be ELEMENT_NODE\n          if (nodeType === DOM_ELEMENT_TYPE || nodeType === DOM_TEXT_TYPE) {\n            const newSelection = internalCreateRangeSelection(lastSelection, domSelection, editor, event);\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 229 && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event);\n\n  // We let the browser do its own thing for composition.\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        // Used for handling backspace in Android.\n        if (IS_ANDROID) {\n          $setCompositionKey(selection.anchor.key);\n        }\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && selection.anchor.key === selection.focus.key) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0;\n          // Fixes an Android bug where selection flickers when backspacing\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Anchor node must be a TextNode`);\n            }\n            selection.style = anchorNode.getStyle();\n          }\n          const selectedText = selection.anchor.getNode().getTextContent();\n          if (selectedText.length <= 1) {\n            event.preventDefault();\n            dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n          }\n        } else {\n          $setCompositionKey(null);\n          event.preventDefault();\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n\n    // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    }\n\n    // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n\n          // Safari does not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n          // We do not apply this logic to iOS to allow newline auto-capitalization\n          // work without creating linebreaks when pressing Enter\n          if (isInsertLineBreak && !IS_IOS) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n      // NO-OP\n    }\n  });\n}\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const offset = anchor.offset;\n      // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, offset) + data + anchorNode.getTextContent().slice(offset + selection.focus.offset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length;\n\n      // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      }\n\n      // This ensures consistency on Android.\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData);\n\n      // onInput always fires after onCompositionEnd for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    }\n\n    // Also flush any other mutations that might have occurred\n    // since the change.\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || $isTextNode(node) && node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null);\n\n  // Handle termination of composition.\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    }\n\n    // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.keyCode;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    keyCode,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (isMoveForward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(keyCode, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(keyCode)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(keyCode, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(keyCode, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(keyCode, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(keyCode)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(keyCode)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(keyCode)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(keyCode, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(keyCode, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n      }\n      // FF does it well (no need to override behavior)\n    } else if (!IS_FIREFOX && isSelectAll(keyCode, metaKey, ctrlKey)) {\n      event.preventDefault();\n      dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = [];\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n}\n\n// Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType;\n      // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor, event);\n      $setSelection(newSelection);\n    });\n  }\n\n  // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true);\n\n  // If newly selected editor is nested, then add it to the map, clean map otherwise\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  if (rootElementsRegistered === 0) {\n    const doc = rootElement.ownerDocument;\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered++;\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        switch (eventName) {\n          case 'cut':\n            return dispatchCommand(editor, CUT_COMMAND, event);\n          case 'copy':\n            return dispatchCommand(editor, COPY_COMMAND, event);\n          case 'paste':\n            return dispatchCommand(editor, PASTE_COMMAND, event);\n          case 'dragstart':\n            return dispatchCommand(editor, DRAGSTART_COMMAND, event);\n          case 'dragover':\n            return dispatchCommand(editor, DRAGOVER_COMMAND, event);\n          case 'dragend':\n            return dispatchCommand(editor, DRAGEND_COMMAND, event);\n          case 'focus':\n            return dispatchCommand(editor, FOCUS_COMMAND, event);\n          case 'blur':\n            {\n              return dispatchCommand(editor, BLUR_COMMAND, event);\n            }\n          case 'drop':\n            return dispatchCommand(editor, DROP_COMMAND, event);\n        }\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  if (rootElementsRegistered !== 0) {\n    rootElementsRegistered--;\n\n    // We only want to have a single global selectionchange event handler, shared\n    // between all editor instances.\n    if (rootElementsRegistered === 0) {\n      const doc = rootElement.ownerDocument;\n      doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n    }\n  }\n\n  // @ts-expect-error: internal field\n  const editor = rootElement.__lexicalEditor;\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor);\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = null;\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  }\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  } else if ($isNodeSelection(selection) && restoreSelection && nodeToRemove.isSelected()) {\n    nodeToRemove.selectPrevious();\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // Allow us to look up the type including static props\n\n  /** @internal */\n\n  /** @internal */ //@ts-ignore We set the key in the constructor.\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  constructor(key) {\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, this.constructor);\n      }\n    }\n  }\n  // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n  getType() {\n    return this.__type;\n  }\n  isInline() {\n    {\n      throw Error(`LexicalNode: Node ${this.constructor.name} does not implement .isInline().`);\n    }\n  }\n\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    }\n    // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n    if ($isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element' && targetSelection.anchor.key === targetSelection.focus.key && targetSelection.anchor.offset === targetSelection.focus.offset) {\n      return false;\n    }\n    return isSelected;\n  }\n\n  /**\n   * Returns this nodes key.\n   */\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        if (!$isElementNode(node)) {\n          throw Error(`Children of root nodes must be elements`);\n        }\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  }\n\n  // TO-DO: this function can be simplified a lot\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n\n  /**\n   * Returns a mutable version of the node. Will throw an error if\n   * called outside of a Lexical Editor {@link LexicalEditor.update} callback.\n   *\n   */\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key;\n    // Ensure we get the latest node from pending state\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection.setCachedNodes(null);\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const constructor = latestNode.constructor;\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode);\n    // Update reference in node map\n    nodeMap.set(key, mutableNode);\n\n    // @ts-expect-error\n    return mutableNode;\n  }\n\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n  getTextContent() {\n    return '';\n  }\n\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n  getTextContentSize() {\n    return this.getTextContent().length;\n  }\n\n  // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n  static transform() {\n    return null;\n  }\n\n  // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n  remove(preserveEmptyParent) {\n    removeNode(this, true, preserveEmptyParent);\n  }\n\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) selection = selection.clone();\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      if (!($isElementNode(this) && $isElementNode(writableReplaceWith))) {\n        throw Error(`includeChildren should only be true for ElementNodes`);\n      }\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertAfter(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert before this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertBefore(nodeToInsert) {\n    let restoreSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev;\n    // TODO: this is O(n), can we improve?\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n  isParentRequired() {\n    return false;\n  }\n\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  selectStart() {\n    return this.selectPrevious();\n  }\n  selectEnd() {\n    return this.selectNext(0, 0);\n  }\n\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type);\n  // Common error - split in its own invariant\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Insert a series of nodes after this LexicalNode (as next siblings)\n *\n * @param firstToInsert - The first node to insert after this one.\n * @param lastToInsert - The last node to insert after this one. Must be a\n * later sibling of FirstNode. If not provided, it will be its last sibling.\n */\nfunction insertRangeAfter(node, firstToInsert, lastToInsert) {\n  const lastToInsert2 = lastToInsert || firstToInsert.getParentOrThrow().getLastChild();\n  let current = firstToInsert;\n  const nodesToInsert = [firstToInsert];\n  while (current !== lastToInsert2) {\n    if (!current.getNextSibling()) {\n      {\n        throw Error(`insertRangeAfter: lastToInsert must be a later sibling of firstToInsert`);\n      }\n    }\n    current = current.getNextSibling();\n    nodesToInsert.push(current);\n  }\n  let currentNode = node;\n  for (const nodeToInsert of nodesToInsert) {\n    currentNode = currentNode.insertAfter(nodeToInsert);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        if (isOnlyChild(node)) {\n          return null;\n        }\n        return {\n          conversion: convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\nfunction isOnlyChild(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null) {\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      const lastChild = parentElement.lastChild;\n      if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isWhitespaceDomTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE && /^( |\\t|\\r?\\n)+$/.test(node.textContent || '');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList;\n  // Firstly we handle the base theme.\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  }\n  // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing();\n  // Always add a suffix if we're composing a node\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        }\n        // @ts-expect-error\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme;\n  // Apply theme class names\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n\n/** @noInheritDoc */\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead.\n   *\n   * @returns a number representing the format of the text node.\n   */\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\n   * or TextNode.isUnmergeable instead.\n   *\n   * @returns a number representing the detail of the text node.\n   */\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  /**\n   * Returns the mode (TextModeType) of the TextNode, which may be \"normal\", \"token\", or \"segmented\"\n   *\n   * @returns TextModeType.\n   */\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  /**\n   * Returns the styles currently applied to the node. This is analogous to CSSText in the DOM.\n   *\n   * @returns CSSText-like string of styles applied to the underlying DOM node.\n   */\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  /**\n   * Returns whether or not the node is in \"token\" mode. TextNodes in token mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted as a single entity (not invdividually by character).\n   *\n   * @returns true if the node is in token mode, false otherwise.\n   */\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  /**\n   *\n   * @returns true if Lexical detects that an IME or other 3rd-party script is attempting to\n   * mutate the TextNode, false otherwise.\n   */\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  /**\n   * Returns whether or not the node is in \"segemented\" mode. TextNodes in segemented mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted in space-delimited \"segments\".\n   *\n   * @returns true if the node is in segmented mode, false otherwise.\n   */\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  /**\n   * Returns whether or not the node is \"directionless\". Directionless nodes don't respect changes between RTL and LTR modes.\n   *\n   * @returns true if the node is directionless, false otherwise.\n   */\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  /**\n   * Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\n   * adjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen.\n   *\n   * @returns true if the node is unmergeable, false otherwise.\n   */\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\n   * string values to get the format of a TextNode.\n   *\n   * @param type - the TextFormatType to check for.\n   *\n   * @returns true if the node has the provided format, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type \"text\"\n   * (i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).\n   *\n   * @returns true if the node is simple text, false otherwise.\n   */\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  /**\n   * Returns the text content of the node as a string.\n   *\n   * @returns a string representing the text content of the node.\n   */\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n\n  /**\n   *\n   * @returns true if the text node supports font styling, false otherwise.\n   */\n  canHaveFormat() {\n    return true;\n  }\n\n  // View\n\n  createDOM(config, editor) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (this.hasFormat('code')) {\n      dom.setAttribute('spellcheck', 'false');\n    }\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme;\n    // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor);\n    if (!(element !== null && isHTMLElement(element))) {\n      throw Error(`Expected TextNode createDOM to always return a HTMLElement`);\n    }\n    element.style.whiteSpace = 'pre-wrap';\n    // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n    if (this.hasFormat('bold')) {\n      element = wrapElementWith(element, 'b');\n    }\n    if (this.hasFormat('italic')) {\n      element = wrapElementWith(element, 'i');\n    }\n    if (this.hasFormat('strikethrough')) {\n      element = wrapElementWith(element, 's');\n    }\n    if (this.hasFormat('underline')) {\n      element = wrapElementWith(element, 'u');\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  }\n\n  // Mutators\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  }\n\n  /**\n   * Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\n   * version of the argument can only specify one format and doing so will remove all other formats that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleFormat}\n   *\n   * @param format - TextFormatType or 32-bit integer representing the node format.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  }\n\n  /**\n   * Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\n   * version of the argument can only specify one detail value and doing so will remove all other detail values that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleDirectionless}\n   * or {@link TextNode.togglerUnmergeable}\n   *\n   * @param detail - TextDetailType or 32-bit integer representing the node detail.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  /**\n   * Sets the node style to the provided CSSText-like string. Set this property as you\n   * would an HTMLElement style attribute to apply inline styles to the underlying DOM Element.\n   *\n   * @param style - CSSText to be applied to the underlying HTMLElement.\n   *\n   * @returns this TextNode.\n   */\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  /**\n   * Applies the provided format to this TextNode if it's not present. Removes it if it's present.\n   * The subscript and superscript formats are mutually exclusive.\n   * Prefer using this method to turn specific formats on and off.\n   *\n   * @param type - TextFormatType to toggle.\n   *\n   * @returns this TextNode.\n   */\n  toggleFormat(type) {\n    const format = this.getFormat();\n    const newFormat = toggleTextFormatType(format, type, null);\n    return this.setFormat(newFormat);\n  }\n\n  /**\n   * Toggles the directionless detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  /**\n   * Toggles the unmergeable detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  /**\n   * Sets the mode of the node.\n   *\n   * @returns this TextNode.\n   */\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  /**\n   * Sets the text content of the node.\n   *\n   * @param text - the string to set as the text value of the node.\n   *\n   * @returns this TextNode.\n   */\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  /**\n   * Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets.\n   *\n   * @param _anchorOffset - the offset at which the Selection anchor will be placed.\n   * @param _focusOffset - the offset at which the Selection focus will be placed.\n   *\n   * @returns the new RangeSelection.\n   */\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  selectStart() {\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const size = this.getTextContentSize();\n    return this.select(size, size);\n  }\n\n  /**\n   * Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\n   * specified. Can optionally calculate a new selection after the operation is complete.\n   *\n   * @param offset - the offset at which the splice operation should begin.\n   * @param delCount - the number of characters to delete, starting from the offset.\n   * @param newText - the text to insert into the TextNode at the offset.\n   * @param moveSelection - optional, whether or not to move selection to the end of the inserted substring.\n   *\n   * @returns this TextNode.\n   */\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted before the node, false otherwise.\n   */\n  canInsertTextBefore() {\n    return true;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted after the node, false otherwise.\n   */\n  canInsertTextAfter() {\n    return true;\n  }\n\n  /**\n   * Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\n   * formed by the split, and inserting those new TextNodes into the editor, replacing the one that was split.\n   *\n   * @param splitOffsets - rest param of the text content character offsets at which this node should be split.\n   *\n   * @returns an Array containing the newly-created TextNodes.\n   */\n  splitText() {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    for (var _len = arguments.length, splitOffsets = new Array(_len), _key = 0; _key < _len; _key++) {\n      splitOffsets[_key] = arguments[_key];\n    }\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    }\n\n    // Handle selection\n    const selection = $getSelection();\n\n    // Then handle all other parts\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    }\n\n    // Insert the nodes into the parent's children\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n    return splitNodes;\n  }\n\n  /**\n   * Merges the target TextNode into this TextNode, removing the target node.\n   *\n   * @param target - the TextNode to merge into this one.\n   *\n   * @returns this TextNode.\n   */\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\n   * node class that you create and replace matched text with should return true from this method.\n   *\n   * @returns true if the node is to be treated as a \"text entity\", false otherwise.\n   */\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode;\n  // Google Docs uses span tags + font-weight for bold text\n  const hasBoldFontWeight = span.style.fontWeight === '700';\n  // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n  const hasLinethroughTextDecoration = span.style.textDecoration === 'line-through';\n  // Google Docs uses span tags + font-style for italic text\n  const hasItalicFontStyle = span.style.fontStyle === 'italic';\n  // Google Docs uses span tags + text-decoration: underline for underline text\n  const hasUnderlineTextDecoration = span.style.textDecoration === 'underline';\n  // Google Docs uses span tags + vertical-align to specify subscript and superscript\n  const verticalAlign = span.style.verticalAlign;\n  return {\n    forChild: lexicalNode => {\n      if (!$isTextNode(lexicalNode)) {\n        return lexicalNode;\n      }\n      if (hasBoldFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      if (hasLinethroughTextDecoration) {\n        lexicalNode.toggleFormat('strikethrough');\n      }\n      if (hasItalicFontStyle) {\n        lexicalNode.toggleFormat('italic');\n      }\n      if (hasUnderlineTextDecoration) {\n        lexicalNode.toggleFormat('underline');\n      }\n      if (verticalAlign === 'sub') {\n        lexicalNode.toggleFormat('subscript');\n      }\n      if (verticalAlign === 'super') {\n        lexicalNode.toggleFormat('superscript');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode;\n  // Google Docs wraps all copied HTML in a <b> with font-weight normal\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !hasNormalFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nconst preParentCache = new WeakMap();\nfunction isNodePre(node) {\n  return node.nodeName === 'PRE' || node.nodeType === DOM_ELEMENT_TYPE && node.style !== undefined && node.style.whiteSpace !== undefined && node.style.whiteSpace.startsWith('pre');\n}\nfunction findParentPreDOMNode(node) {\n  let cached;\n  let parent = node.parentNode;\n  const visited = [node];\n  while (parent !== null && (cached = preParentCache.get(parent)) === undefined && !isNodePre(parent)) {\n    visited.push(parent);\n    parent = parent.parentNode;\n  }\n  const resultNode = cached === undefined ? parent : cached;\n  for (let i = 0; i < visited.length; i++) {\n    preParentCache.set(visited[i], resultNode);\n  }\n  return resultNode;\n}\nfunction convertTextDOMNode(domNode) {\n  const domNode_ = domNode;\n  const parentDom = domNode.parentElement;\n  if (!(parentDom !== null)) {\n    throw Error(`Expected parentElement of Text not to be null`);\n  }\n  let textContent = domNode_.textContent || '';\n  // No collapse and preserve segment break for pre, pre-wrap and pre-line\n  if (findParentPreDOMNode(domNode_) !== null) {\n    const parts = textContent.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else if (part !== '') {\n        nodes.push($createTextNode(part));\n      }\n    }\n    return {\n      node: nodes\n    };\n  }\n  textContent = textContent.replace(/\\r/g, '').replace(/[ \\t\\n]+/g, ' ');\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  if (textContent[0] === ' ') {\n    // Traverse backward while in the same line. If content contains new line or tab -> pontential\n    // delete, other elements can borrow from this one. Deletion depends on whether it's also the\n    // last space (see next condition: textContent[textContent.length - 1] === ' '))\n    let previousText = domNode_;\n    let isStartOfLine = true;\n    while (previousText !== null && (previousText = findTextInLine(previousText, false)) !== null) {\n      const previousTextContent = previousText.textContent || '';\n      if (previousTextContent.length > 0) {\n        if (/[ \\t\\n]$/.test(previousTextContent)) {\n          textContent = textContent.slice(1);\n        }\n        isStartOfLine = false;\n        break;\n      }\n    }\n    if (isStartOfLine) {\n      textContent = textContent.slice(1);\n    }\n  }\n  if (textContent[textContent.length - 1] === ' ') {\n    // Traverse forward while in the same line, preserve if next inline will require a space\n    let nextText = domNode_;\n    let isEndOfLine = true;\n    while (nextText !== null && (nextText = findTextInLine(nextText, true)) !== null) {\n      const nextTextContent = (nextText.textContent || '').replace(/^( |\\t|\\r?\\n)+/, '');\n      if (nextTextContent.length > 0) {\n        isEndOfLine = false;\n        break;\n      }\n    }\n    if (isEndOfLine) {\n      textContent = textContent.slice(0, textContent.length - 1);\n    }\n  }\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nconst inlineParents = new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/, 'i');\nfunction findTextInLine(text, forward) {\n  let node = text;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let sibling;\n    while ((sibling = forward ? node.nextSibling : node.previousSibling) === null) {\n      const parentElement = node.parentElement;\n      if (parentElement === null) {\n        return null;\n      }\n      node = parentElement;\n    }\n    node = sibling;\n    if (node.nodeType === DOM_ELEMENT_TYPE) {\n      const display = node.style.display;\n      if (display === '' && node.nodeName.match(inlineParents) === null || display !== '' && !display.startsWith('inline')) {\n        return null;\n      }\n    }\n    let descendant = node;\n    while ((descendant = forward ? node.firstChild : node.lastChild) !== null) {\n      node = descendant;\n    }\n    if (node.nodeType === DOM_TEXT_TYPE) {\n      return node;\n    } else if (node.nodeName === 'BR') {\n      return null;\n    }\n  }\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !lexicalNode.hasFormat(format)) {\n        lexicalNode.toggleFormat(format);\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction $createTextNode() {\n  let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TabNode extends TextNode {\n  static getType() {\n    return 'tab';\n  }\n  static clone(node) {\n    const newNode = new TabNode(node.__key);\n    // TabNode __text can be either '\\t' or ''. insertText will remove the empty Node\n    newNode.__text = node.__text;\n    newNode.__format = node.__format;\n    newNode.__style = node.__style;\n    return newNode;\n  }\n  constructor(key) {\n    super('\\t', key);\n    this.__detail = IS_UNMERGEABLE;\n  }\n  static importDOM() {\n    return null;\n  }\n  static importJSON(serializedTabNode) {\n    const node = $createTabNode();\n    node.setFormat(serializedTabNode.format);\n    node.setStyle(serializedTabNode.style);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tab',\n      version: 1\n    };\n  }\n  setTextContent(_text) {\n    {\n      throw Error(`TabNode does not support setTextContent`);\n    }\n  }\n  setDetail(_detail) {\n    {\n      throw Error(`TabNode does not support setDetail`);\n    }\n  }\n  setMode(_type) {\n    {\n      throw Error(`TabNode does not support setMode`);\n    }\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n}\nfunction $createTabNode() {\n  return $applyNodeReplacement(new TabNode());\n}\nfunction $isTabNode(node) {\n  return node instanceof TabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection.setCachedNodes(null);\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  }\n  // Transfer the element point to a text point.\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this._cachedNodes = null;\n    this._nodes = objects;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return false;\n  }\n  getStartEndPoints() {\n    return null;\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd;\n    // Insert nodes\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes);\n    // Remove selected nodes\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.format = format;\n    this.style = style;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n\n  /**\n   * Used to check if the provided selections is equal to this one by value,\n   * inluding anchor, focus, format, and style properties.\n   * @param selection - the Selection to compare this one to.\n   * @returns true if the Selections are equal, false otherwise.\n   */\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  /**\n   * Returns whether the Selection is \"collapsed\", meaning the anchor and focus are\n   * the same node and have the same offset.\n   *\n   * @returns true if the Selection is collapsed, false otherwise.\n   */\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  /**\n   * Gets all the nodes in the Selection. Uses caching to make it generally suitable\n   * for use in hot paths.\n   *\n   * @returns an Array containing all the nodes in the Selection\n   */\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset);\n      // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n\n  /**\n   * Sets this Selection to be of type \"text\" at the provided anchor and focus values.\n   *\n   * @param anchorNode - the anchor node to set on the Selection\n   * @param anchorOffset - the offset to set on the Selection\n   * @param focusNode - the focus node to set on the Selection\n   * @param focusOffset - the focus offset to set on the Selection\n   */\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  /**\n   * Gets the (plain) text content of all the nodes in the selection.\n   *\n   * @returns a string representing the text content of all the nodes in the Selection\n   */\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n\n  /**\n   * Attempts to map a DOM selection range onto this Lexical Selection,\n   * setting the anchor, focus, and type accordingly\n   *\n   * @param range a DOM Selection range conforming to the StaticRange interface.\n   */\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  /**\n   * Creates a new RangeSelection, copying over all the property values from this one.\n   *\n   * @returns a new RangeSelection with the same property values as this one.\n   */\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  /**\n   * Toggles the provided format on all the TextNodes in the Selection.\n   *\n   * @param format a string TextFormatType to toggle on the TextNodes in the selection\n   */\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the value of the style property on the Selection\n   *\n   * @param style - the style to set at the value of the style property.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\n   * has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection.\n   * converts tabs, newlines, and carriage returns into LexicalNodes.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertRawText(text) {\n    const parts = text.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else {\n        nodes.push($createTextNode(part));\n      }\n    }\n    this.insertNodes(nodes);\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection as a new\n   * Lexical TextNode, according to a series of insertion heuristics based on the selection type and position.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = this.isCollapsed() || anchor.isBefore(focus);\n    const format = this.format;\n    const style = this.style;\n    if (isBefore && anchor.type === 'element') {\n      $transferStartingElementPointToTextPoint(anchor, focus, format, style);\n    } else if (!isBefore && focus.type === 'element') {\n      $transferStartingElementPointToTextPoint(focus, anchor, format, style);\n    }\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const firstPoint = isBefore ? anchor : focus;\n    const endPoint = isBefore ? focus : anchor;\n    const startOffset = firstPoint.offset;\n    const endOffset = endPoint.offset;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || !nextSibling.canInsertTextBefore() || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          }\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      } else if ($isTabNode(firstNode)) {\n        // We don't need to check for delCount because there is only the entire selected node case\n        // that can hit here for content size 1 and with canInsertTextBeforeAfter false\n        const textNode = $createTextNode(text);\n        textNode.setFormat(format);\n        textNode.setStyle(style);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]);\n\n      // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode;\n\n      // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      }\n\n      // Handle mutations to the last node.\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          // root node selections only select whole nodes, so no text splice is necessary\n          if (!$isRootNode(endPoint.getNode()) && endPoint.type === 'text') {\n            lastNode = lastNode.spliceText(0, endOffset, '');\n          }\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      }\n\n      // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement);\n\n      // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      }\n\n      // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      }\n\n      // Remove all selected nodes that haven't already been removed.\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the text in the Selection, adjusting the EditorState accordingly.\n   */\n  removeText() {\n    this.insertText('');\n  }\n\n  /**\n   * Applies the provided format to the TextNodes in the Selection, splitting or\n   * merging nodes as necessary.\n   *\n   * @param formatType the format type to apply to the nodes in the Selection.\n   */\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset;\n\n    // In case selection started at the end of text node use next text node\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize();\n\n    // Single node selected\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n      // The entire node is selected, so just format it\n      if (startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat);\n\n        // Update selection only if starts/ends on text node\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    }\n    // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n    if (startOffset !== 0) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat);\n    // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize()) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    }\n\n    // Process all text nodes in between\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      if (!textNode.isToken()) {\n        const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n        textNode.setFormat(nextFormat);\n      }\n    }\n\n    // Update selection only if starts/ends on text node\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  /**\n   * Attempts to \"intelligently\" insert an arbitrary list of Lexical nodes into the EditorState at the\n   * current Selection according to a set of heuristics that determine how surrounding nodes\n   * should be changed, replaced, or moved to accomodate the incoming ones.\n   *\n   * @param nodes - the nodes to insert\n   */\n  insertNodes(nodes) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (this.anchor.key === 'root') {\n      this.insertParagraph();\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        throw Error(`Expected RangeSelection after insertParagraph`);\n      }\n      return selection.insertNodes(nodes);\n    }\n    const firstPoint = this.isBackward() ? this.focus : this.anchor;\n    const firstBlock = $getAncestor(firstPoint.getNode(), INTERNAL_$isBlock);\n    const last = nodes[nodes.length - 1];\n\n    // CASE 1: insert inside a code block\n    if ('__language' in firstBlock && $isElementNode(firstBlock)) {\n      if ('__language' in nodes[0]) {\n        this.insertText(nodes[0].getTextContent());\n      } else {\n        const index = removeTextAndSplitBlock(this);\n        firstBlock.splice(index, 0, nodes);\n        last.selectEnd();\n      }\n      return;\n    }\n\n    // CASE 2: All elements of the array are inline\n    const notInline = node => ($isElementNode(node) || $isDecoratorNode(node)) && !node.isInline();\n    if (!nodes.some(notInline)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      const index = removeTextAndSplitBlock(this);\n      firstBlock.splice(index, 0, nodes);\n      last.selectEnd();\n      return;\n    }\n\n    // CASE 3: At least 1 element of the array is not inline\n    const blocksParent = $wrapInlineNodes(nodes);\n    const nodeToSelect = blocksParent.getLastDescendant();\n    const blocks = blocksParent.getChildren();\n    const isLI = node => '__value' in node && '__checked' in node;\n    const isMergeable = node => $isElementNode(node) && INTERNAL_$isBlock(node) && !node.isEmpty() && $isElementNode(firstBlock) && (!firstBlock.isEmpty() || isLI(firstBlock));\n    const shouldInsert = !$isElementNode(firstBlock) || !firstBlock.isEmpty();\n    const insertedParagraph = shouldInsert ? this.insertParagraph() : null;\n    const lastToInsert = blocks[blocks.length - 1];\n    let firstToInsert = blocks[0];\n    if (isMergeable(firstToInsert)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      firstBlock.append(...firstToInsert.getChildren());\n      firstToInsert = blocks[1];\n    }\n    if (firstToInsert) {\n      insertRangeAfter(firstBlock, firstToInsert);\n    }\n    const lastInsertedBlock = $getAncestor(nodeToSelect, INTERNAL_$isBlock);\n    if (insertedParagraph && $isElementNode(lastInsertedBlock) && (isLI(insertedParagraph) || INTERNAL_$isBlock(lastToInsert))) {\n      lastInsertedBlock.append(...insertedParagraph.getChildren());\n      insertedParagraph.remove();\n    }\n    if ($isElementNode(firstBlock) && firstBlock.isEmpty()) {\n      firstBlock.remove();\n    }\n    nodeToSelect.selectEnd();\n\n    // To understand this take a look at the test \"can wrap post-linebreak nodes into new element\"\n    const lastChild = $isElementNode(firstBlock) ? firstBlock.getLastChild() : null;\n    if ($isLineBreakNode(lastChild) && lastInsertedBlock !== firstBlock) {\n      lastChild.remove();\n    }\n  }\n\n  /**\n   * Inserts a new ParagraphNode into the EditorState at the current Selection\n   *\n   * @returns the newly inserted node.\n   */\n  insertParagraph() {\n    if (this.anchor.key === 'root') {\n      const paragraph = $createParagraphNode();\n      $getRoot().splice(this.anchor.offset, 0, [paragraph]);\n      paragraph.select();\n      return paragraph;\n    }\n    const index = removeTextAndSplitBlock(this);\n    const block = $getAncestor(this.anchor.getNode(), INTERNAL_$isBlock);\n    if (!$isElementNode(block)) {\n      throw Error(`Expected ancestor to be an ElementNode`);\n    }\n    const firstToAppend = block.getChildAtIndex(index);\n    const nodesToInsert = firstToAppend ? [firstToAppend, ...firstToAppend.getNextSiblings()] : [];\n    const newBlock = block.insertNewAfter(this, false);\n    if (newBlock) {\n      newBlock.append(...nodesToInsert);\n      newBlock.selectStart();\n      return newBlock;\n    }\n    // if newBlock is null, it means that block is of type CodeNode.\n    return null;\n  }\n\n  /**\n   * Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\n   * current Selection.\n   */\n  insertLineBreak(selectStart) {\n    const lineBreak = $createLineBreakNode();\n    this.insertNodes([lineBreak]);\n    // this is used in MacOS with the command 'ctrl-O' (openLineBreak)\n    if (selectStart) {\n      const parent = lineBreak.getParentOrThrow();\n      const index = lineBreak.getIndexWithinParent();\n      parent.select(index, index);\n    }\n  }\n\n  /**\n   * Extracts the nodes in the Selection, splitting nodes where necessary\n   * to get offset-level precision.\n   *\n   * @returns The nodes in the Selection\n   */\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Modifies the Selection according to the parameters and a set of heuristics that account for\n   * various node types. Can be used to safely move or extend selection by one logical \"unit\" without\n   * dealing explicitly with all the possible node types.\n   *\n   * @param alter the type of modification to perform\n   * @param isBackward whether or not selection is backwards\n   * @param granularity the granularity at which to apply the modification\n   */\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move';\n\n    // Handle the selection movement around decorators.\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement;\n    // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    }\n    // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity);\n    // Guard against no ranges\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0);\n      // Apply the DOM selection to our Lexical selection.\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        }\n\n        // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Performs one logical character deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteCharacter(isBackward) {\n    const wasCollapsed = this.isCollapsed();\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const focus = this.focus;\n      let anchorNode = anchor.getNode();\n      if (!isBackward && (\n      // Delete forward handle case\n      anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n        const parent = anchorNode.getParent();\n        const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n        if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n          return;\n        }\n      }\n      // Handle the deletion around decorators.\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n          const editor = getActiveEditor();\n          editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        }\n        return;\n      } else if (!isBackward && $isElementNode(possibleNode) && $isElementNode(anchorNode) && anchorNode.isEmpty()) {\n        anchorNode.remove();\n        possibleNode.selectStart();\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  /**\n   * Performs one logical line deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      if (this.anchor.type === 'text') {\n        this.modify('extend', isBackward, 'lineboundary');\n      }\n\n      // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n    }\n    this.removeText();\n  }\n\n  /**\n   * Performs one logical word deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $getCharacterOffsets(selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return [0, 0];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode;\n  // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false;\n    // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length;\n    // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === editor._blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (editor._blockCursorElement !== null) {\n      resolvedOffset--;\n    }\n    resolvedNode = getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = getNodeFromDOM(dom);\n      // Ensure resolvedElement is actually a element.\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n            resolvedOffset = 0;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent();\n        // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize();\n        // @ts-expect-error: intentional\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0;\n      // @ts-expect-error: intentional\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus);\n\n    // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = getNodeFromDOM(anchorDOM);\n    const focusNode = getNodeFromDOM(focusDOM);\n    // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  }\n\n  // Handle normalization of selection when it is at the boundaries.\n  normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n}\n\n// This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isRangeSelection(lastSelection) || lastSelection == null) {\n    return internalCreateRangeSelection(lastSelection, domSelection, editor, null);\n  }\n  return lastSelection.clone();\n}\nfunction internalCreateRangeSelection(lastSelection, domSelection, editor, event) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  }\n  // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = event || windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcessingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  }\n  // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n  const resolvedSelectionPoints = internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset) {\n  let times = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key;\n  // Single node. We shift selection but never redimension it\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element');\n      // The new selection might point to text nodes, try to resolve them\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  }\n  // The new selection might point to text nodes, try to resolve them\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement;\n\n  // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  }\n\n  // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  }\n\n  // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  }\n\n  // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {\n    // If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes) {\n  let selection = $getSelection() || $getPreviousSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  selection.insertNodes(nodes);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction removeTextAndSplitBlock(selection) {\n  if (!selection.isCollapsed()) {\n    selection.removeText();\n  }\n  const anchor = selection.anchor;\n  let node = anchor.getNode();\n  let offset = anchor.offset;\n  while (!INTERNAL_$isBlock(node)) {\n    [node, offset] = splitNodeAtPoint(node, offset);\n  }\n  return offset;\n}\nfunction splitNodeAtPoint(node, offset) {\n  const parent = node.getParent();\n  if (!parent) {\n    const paragraph = $createParagraphNode();\n    $getRoot().append(paragraph);\n    paragraph.select();\n    return [$getRoot(), 0];\n  }\n  if ($isTextNode(node)) {\n    const split = node.splitText(offset);\n    if (split.length === 0) {\n      return [parent, node.getIndexWithinParent()];\n    }\n    const x = offset === 0 ? 0 : 1;\n    const index = split[0].getIndexWithinParent() + x;\n    return [parent, index];\n  }\n  if (!$isElementNode(node) || offset === 0) {\n    return [parent, node.getIndexWithinParent()];\n  }\n  const firstToAppend = node.getChildAtIndex(offset);\n  if (firstToAppend) {\n    const insertPoint = new RangeSelection($createPoint(node.__key, offset, 'element'), $createPoint(node.__key, offset, 'element'), 0, '');\n    const newElement = node.insertNewAfter(insertPoint);\n    if (newElement) {\n      newElement.append(firstToAppend, ...firstToAppend.getNextSiblings());\n    }\n  }\n  return [parent, node.getIndexWithinParent() + 1];\n}\nfunction $wrapInlineNodes(nodes) {\n  // We temporarily insert the topLevelNodes into an arbitrary ElementNode,\n  // since insertAfter does not work on nodes that have no parent (TO-DO: fix that).\n  const virtualRoot = $createParagraphNode();\n  let currentBlock = null;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = $isLineBreakNode(node);\n    if (isLineBreakNode || $isDecoratorNode(node) && node.isInline() || $isElementNode(node) && node.isInline() || $isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        virtualRoot.append(currentBlock);\n        // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      virtualRoot.append(node);\n      currentBlock = null;\n    }\n  }\n  return virtualRoot;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n\n      // We want to prioritize node transforms over element transforms\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    }\n\n    // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    }\n\n    // Make the editorState immutable\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n}\n\n// This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction commitPendingUpdates(editor, recoveryEditorState) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  }\n\n  // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false;\n    // We don't want updates to sync block the reconciliation.\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      }\n\n      // Reset editor and restore incoming editor state to the DOM\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        commitPendingUpdates(editor, currentEditorState);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState);\n\n  // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window);\n\n  // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, mutatedNodes, tags, dirtyLeaves, currentEditorState);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  // If reconciler fails, we reset whole editor (so current editor state becomes empty)\n  // and attempt to re-render pendingEditorState. If that goes through we trigger\n  // listeners, but instead use recoverEditorState which is current editor state before reset\n  // This specifically important for collab that relies on prevEditorState from update\n  // listener to calculate delta of changed nodes/properties\n  triggerTextContentListeners(editor, recoveryEditorState || currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: recoveryEditorState || currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, mutatedNodes, updateTags, dirtyLeaves, prevEditorState) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        prevEditorState,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (var _len2 = arguments.length, payload = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      payload[_key2 - 3] = arguments[_key2];\n    }\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false;\n\n  // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection !== null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n\n    // Restore existing editor state to the DOM\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  /**\n   * The returned value is added to the LexicalEditor._decorators\n   */\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getFirstChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getLastChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  }\n\n  // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    return firstNode ? firstNode.selectStart() : this.select();\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    return lastNode ? lastNode.selectEnd() : this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append() {\n    for (var _len3 = arguments.length, nodesToAppend = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      nodesToAppend[_key3] = arguments[_key3];\n    }\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      }\n      // Set child parent to self\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize;\n\n    // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        // Cleanup if node can't be empty\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  }\n  // JSON serialization\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  }\n  // These are intended to be extends for specific element heuristics.\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  // TODO 0.10 deprecate\n  canExtractContents() {\n    return true;\n  }\n  canReplaceWith(replacement) {\n    return true;\n  }\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  }\n  // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n  isShadowRoot() {\n    return false;\n  }\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  }\n\n  // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  // Mutate\n\n  append() {\n    for (let i = 0; i < arguments.length; i++) {\n      const node = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...arguments);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection;\n\n  // Check if we need to update because of changes in selection\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  }\n\n  // @ts-expect-error\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  static getType() {\n    return 'paragraph';\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) element.append(document.createElement('br'));\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'paragraph',\n      version: 1\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newElement = $createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren();\n    // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// https://github.com/microsoft/TypeScript/issues/3841\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/**\n * Type helper for extracting the payload type from a command.\n *\n * @example\n * ```ts\n * const MY_COMMAND = createCommand<SomeType>();\n *\n * // ...\n *\n * editor.registerCommand(MY_COMMAND, payload => {\n *   // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n *   handleMyCommand(editor, payload);\n *   return true;\n * });\n *\n * function handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n *   // `payload` is of type `SomeType`, extracted from the command.\n * }\n * ```\n */\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  }\n\n  // Remove all the DOM nodes from the root element\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes, additionalConversions) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  const addConversionsToCache = map => {\n    Object.keys(map).forEach(key => {\n      let currentCache = conversionCache.get(key);\n      if (currentCache === undefined) {\n        currentCache = [];\n        conversionCache.set(key, currentCache);\n      }\n      currentCache.push(map[key]);\n    });\n  };\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM != null ? node.klass.importDOM.bind(node.klass) : null;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM();\n    if (map !== null) {\n      addConversionsToCache(map);\n    }\n  });\n  if (additionalConversions) {\n    addConversionsToCache(additionalConversions);\n  }\n  return conversionCache;\n}\n\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, TabNode, ParagraphNode, ...(config.nodes || [])];\n  const {\n    onError,\n    html\n  } = config;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replace = null;\n      let replaceWithKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replace = options.with;\n        replaceWithKlass = options.withKlass || null;\n      }\n      // Ensure custom nodes implement required methods.\n      {\n        const name = klass.name;\n        if (name !== 'RootNode') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        exportDOM: html && html.export ? html.export.get(klass) : undefined,\n        klass,\n        replace,\n        replaceWithKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes, html ? html.import : undefined), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor;\n    // The root element associated with this editor\n    this._rootElement = null;\n    // The current editor state\n    this._editorState = editorState;\n    // Handling of drafts and updates\n    this._pendingEditorState = null;\n    // Used to help co-ordinate selection and events\n    this._compositionKey = null;\n    this._deferred = [];\n    // Used during reconciliation\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false;\n    // Listeners\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    };\n    // Commands\n    this._commands = new Map();\n    // Editor configuration for theme/context.\n    this._config = config;\n    // Mapping of types to their nodes\n    this._nodes = nodes;\n    // React node decorators for portals\n    this._decorators = {};\n    this._pendingDecorators = null;\n    // Used to optimize reconciliation\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set();\n    // Handling of DOM mutations\n    this._observer = null;\n    // Used for identifying owning editors\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerMutationListener(klass, listener) {\n    const registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klass);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  /** @internal */\n  registerNodeTransformToKlass(klass, listener) {\n    const type = klass.getType();\n    const registeredNode = this._nodes.get(type);\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    return registeredNode;\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n\n  /**\n   * Used to assert that a certain node is registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered the provided node type, false otherwise.\n   */\n  hasNode(node) {\n    return this._nodes.has(node.getType());\n  }\n\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n  hasNodes(nodes) {\n    return nodes.every(this.hasNode.bind(this));\n  }\n\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n  getDecorators() {\n    return this._decorators;\n  }\n\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        commitPendingUpdates(this);\n\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        // If content editable is unmounted we'll reset editor state back to original\n        // (or pending) editor state since there will be no reconciliation\n        this._editorState = pendingEditorState;\n        this._pendingEditorState = null;\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n  getEditorState() {\n    return this._editorState;\n  }\n\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    commitPendingUpdates(this);\n  }\n\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserliazation from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n  focus(callbackFn) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      });\n      // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  /**\n   * Removes focus from the editor.\n   */\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\nexports.$addUpdateTag = $addUpdateTag;\nexports.$applyNodeReplacement = $applyNodeReplacement;\nexports.$copyNode = $copyNode;\nexports.$createLineBreakNode = $createLineBreakNode;\nexports.$createNodeSelection = $createNodeSelection;\nexports.$createParagraphNode = $createParagraphNode;\nexports.$createPoint = $createPoint;\nexports.$createRangeSelection = $createRangeSelection;\nexports.$createTabNode = $createTabNode;\nexports.$createTextNode = $createTextNode;\nexports.$getAdjacentNode = $getAdjacentNode;\nexports.$getCharacterOffsets = $getCharacterOffsets;\nexports.$getEditor = $getEditor;\nexports.$getNearestNodeFromDOMNode = $getNearestNodeFromDOMNode;\nexports.$getNearestRootOrShadowRoot = $getNearestRootOrShadowRoot;\nexports.$getNodeByKey = $getNodeByKey;\nexports.$getPreviousSelection = $getPreviousSelection;\nexports.$getRoot = $getRoot;\nexports.$getSelection = $getSelection;\nexports.$getTextContent = $getTextContent;\nexports.$hasAncestor = $hasAncestor;\nexports.$hasUpdateTag = $hasUpdateTag;\nexports.$insertNodes = $insertNodes;\nexports.$isBlockElementNode = $isBlockElementNode;\nexports.$isDecoratorNode = $isDecoratorNode;\nexports.$isElementNode = $isElementNode;\nexports.$isInlineElementOrDecoratorNode = $isInlineElementOrDecoratorNode;\nexports.$isLeafNode = $isLeafNode;\nexports.$isLineBreakNode = $isLineBreakNode;\nexports.$isNodeSelection = $isNodeSelection;\nexports.$isParagraphNode = $isParagraphNode;\nexports.$isRangeSelection = $isRangeSelection;\nexports.$isRootNode = $isRootNode;\nexports.$isRootOrShadowRoot = $isRootOrShadowRoot;\nexports.$isTabNode = $isTabNode;\nexports.$isTextNode = $isTextNode;\nexports.$nodesOfType = $nodesOfType;\nexports.$normalizeSelection__EXPERIMENTAL = $normalizeSelection;\nexports.$parseSerializedNode = $parseSerializedNode;\nexports.$selectAll = $selectAll;\nexports.$setCompositionKey = $setCompositionKey;\nexports.$setSelection = $setSelection;\nexports.$splitNode = $splitNode;\nexports.BLUR_COMMAND = BLUR_COMMAND;\nexports.CAN_REDO_COMMAND = CAN_REDO_COMMAND;\nexports.CAN_UNDO_COMMAND = CAN_UNDO_COMMAND;\nexports.CLEAR_EDITOR_COMMAND = CLEAR_EDITOR_COMMAND;\nexports.CLEAR_HISTORY_COMMAND = CLEAR_HISTORY_COMMAND;\nexports.CLICK_COMMAND = CLICK_COMMAND;\nexports.COMMAND_PRIORITY_CRITICAL = COMMAND_PRIORITY_CRITICAL;\nexports.COMMAND_PRIORITY_EDITOR = COMMAND_PRIORITY_EDITOR;\nexports.COMMAND_PRIORITY_HIGH = COMMAND_PRIORITY_HIGH;\nexports.COMMAND_PRIORITY_LOW = COMMAND_PRIORITY_LOW;\nexports.COMMAND_PRIORITY_NORMAL = COMMAND_PRIORITY_NORMAL;\nexports.CONTROLLED_TEXT_INSERTION_COMMAND = CONTROLLED_TEXT_INSERTION_COMMAND;\nexports.COPY_COMMAND = COPY_COMMAND;\nexports.CUT_COMMAND = CUT_COMMAND;\nexports.DELETE_CHARACTER_COMMAND = DELETE_CHARACTER_COMMAND;\nexports.DELETE_LINE_COMMAND = DELETE_LINE_COMMAND;\nexports.DELETE_WORD_COMMAND = DELETE_WORD_COMMAND;\nexports.DRAGEND_COMMAND = DRAGEND_COMMAND;\nexports.DRAGOVER_COMMAND = DRAGOVER_COMMAND;\nexports.DRAGSTART_COMMAND = DRAGSTART_COMMAND;\nexports.DROP_COMMAND = DROP_COMMAND;\nexports.DecoratorNode = DecoratorNode;\nexports.ElementNode = ElementNode;\nexports.FOCUS_COMMAND = FOCUS_COMMAND;\nexports.FORMAT_ELEMENT_COMMAND = FORMAT_ELEMENT_COMMAND;\nexports.FORMAT_TEXT_COMMAND = FORMAT_TEXT_COMMAND;\nexports.INDENT_CONTENT_COMMAND = INDENT_CONTENT_COMMAND;\nexports.INSERT_LINE_BREAK_COMMAND = INSERT_LINE_BREAK_COMMAND;\nexports.INSERT_PARAGRAPH_COMMAND = INSERT_PARAGRAPH_COMMAND;\nexports.INSERT_TAB_COMMAND = INSERT_TAB_COMMAND;\nexports.KEY_ARROW_DOWN_COMMAND = KEY_ARROW_DOWN_COMMAND;\nexports.KEY_ARROW_LEFT_COMMAND = KEY_ARROW_LEFT_COMMAND;\nexports.KEY_ARROW_RIGHT_COMMAND = KEY_ARROW_RIGHT_COMMAND;\nexports.KEY_ARROW_UP_COMMAND = KEY_ARROW_UP_COMMAND;\nexports.KEY_BACKSPACE_COMMAND = KEY_BACKSPACE_COMMAND;\nexports.KEY_DELETE_COMMAND = KEY_DELETE_COMMAND;\nexports.KEY_DOWN_COMMAND = KEY_DOWN_COMMAND;\nexports.KEY_ENTER_COMMAND = KEY_ENTER_COMMAND;\nexports.KEY_ESCAPE_COMMAND = KEY_ESCAPE_COMMAND;\nexports.KEY_MODIFIER_COMMAND = KEY_MODIFIER_COMMAND;\nexports.KEY_SPACE_COMMAND = KEY_SPACE_COMMAND;\nexports.KEY_TAB_COMMAND = KEY_TAB_COMMAND;\nexports.LineBreakNode = LineBreakNode;\nexports.MOVE_TO_END = MOVE_TO_END;\nexports.MOVE_TO_START = MOVE_TO_START;\nexports.OUTDENT_CONTENT_COMMAND = OUTDENT_CONTENT_COMMAND;\nexports.PASTE_COMMAND = PASTE_COMMAND;\nexports.ParagraphNode = ParagraphNode;\nexports.REDO_COMMAND = REDO_COMMAND;\nexports.REMOVE_TEXT_COMMAND = REMOVE_TEXT_COMMAND;\nexports.RootNode = RootNode;\nexports.SELECTION_CHANGE_COMMAND = SELECTION_CHANGE_COMMAND;\nexports.SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = SELECTION_INSERT_CLIPBOARD_NODES_COMMAND;\nexports.SELECT_ALL_COMMAND = SELECT_ALL_COMMAND;\nexports.TabNode = TabNode;\nexports.TextNode = TextNode;\nexports.UNDO_COMMAND = UNDO_COMMAND;\nexports.createCommand = createCommand;\nexports.createEditor = createEditor;\nexports.getNearestEditorFromDOMNode = getNearestEditorFromDOMNode;\nexports.isCurrentlyReadOnlyMode = isCurrentlyReadOnlyMode;\nexports.isHTMLAnchorElement = isHTMLAnchorElement;\nexports.isHTMLElement = isHTMLElement;\nexports.isSelectionCapturedInDecoratorInput = isSelectionCapturedInDecoratorInput;\nexports.isSelectionWithinEditor = isSelectionWithinEditor;","map":{"version":3,"names":["createCommand","type","SELECTION_CHANGE_COMMAND","SELECTION_INSERT_CLIPBOARD_NODES_COMMAND","CLICK_COMMAND","DELETE_CHARACTER_COMMAND","INSERT_LINE_BREAK_COMMAND","INSERT_PARAGRAPH_COMMAND","CONTROLLED_TEXT_INSERTION_COMMAND","PASTE_COMMAND","REMOVE_TEXT_COMMAND","DELETE_WORD_COMMAND","DELETE_LINE_COMMAND","FORMAT_TEXT_COMMAND","UNDO_COMMAND","REDO_COMMAND","KEY_DOWN_COMMAND","KEY_ARROW_RIGHT_COMMAND","MOVE_TO_END","KEY_ARROW_LEFT_COMMAND","MOVE_TO_START","KEY_ARROW_UP_COMMAND","KEY_ARROW_DOWN_COMMAND","KEY_ENTER_COMMAND","KEY_SPACE_COMMAND","KEY_BACKSPACE_COMMAND","KEY_ESCAPE_COMMAND","KEY_DELETE_COMMAND","KEY_TAB_COMMAND","INSERT_TAB_COMMAND","INDENT_CONTENT_COMMAND","OUTDENT_CONTENT_COMMAND","DROP_COMMAND","FORMAT_ELEMENT_COMMAND","DRAGSTART_COMMAND","DRAGOVER_COMMAND","DRAGEND_COMMAND","COPY_COMMAND","CUT_COMMAND","SELECT_ALL_COMMAND","CLEAR_EDITOR_COMMAND","CLEAR_HISTORY_COMMAND","CAN_REDO_COMMAND","CAN_UNDO_COMMAND","FOCUS_COMMAND","BLUR_COMMAND","KEY_MODIFIER_COMMAND","CAN_USE_DOM","window","document","createElement","documentMode","IS_APPLE","test","navigator","platform","IS_FIREFOX","userAgent","CAN_USE_BEFORE_INPUT","InputEvent","IS_SAFARI","IS_IOS","MSStream","IS_ANDROID","IS_CHROME","IS_APPLE_WEBKIT","DOM_ELEMENT_TYPE","DOM_TEXT_TYPE","NO_DIRTY_NODES","HAS_DIRTY_NODES","FULL_RECONCILE","IS_NORMAL","IS_TOKEN","IS_SEGMENTED","IS_BOLD","IS_ITALIC","IS_STRIKETHROUGH","IS_UNDERLINE","IS_CODE","IS_SUBSCRIPT","IS_SUPERSCRIPT","IS_HIGHLIGHT","IS_ALL_FORMATTING","IS_DIRECTIONLESS","IS_UNMERGEABLE","IS_ALIGN_LEFT","IS_ALIGN_CENTER","IS_ALIGN_RIGHT","IS_ALIGN_JUSTIFY","IS_ALIGN_START","IS_ALIGN_END","NON_BREAKING_SPACE","ZERO_WIDTH_SPACE","COMPOSITION_SUFFIX","DOUBLE_LINE_BREAK","COMPOSITION_START_CHAR","RTL","LTR","RTL_REGEX","RegExp","LTR_REGEX","TEXT_TYPE_TO_FORMAT","bold","code","highlight","italic","strikethrough","subscript","superscript","underline","DETAIL_TYPE_TO_DETAIL","directionless","unmergeable","ELEMENT_TYPE_TO_FORMAT","center","end","justify","left","right","start","ELEMENT_FORMAT_TO_TYPE","TEXT_MODE_TO_TYPE","normal","segmented","token","TEXT_TYPE_TO_MODE","TEXT_MUTATION_VARIANCE","isProcessingMutations","lastTextEntryTimeStamp","getIsProcessingMutations","updateTimeStamp","event","timeStamp","initTextEntryListener","editor","getWindow","addEventListener","isManagedLineBreak","dom","target","__lexicalLineBreak","_key","undefined","getLastSelection","getEditorState","read","selection","$getSelection","clone","handleTextMutation","node","domSelection","getDOMSelection","_window","anchorOffset","focusOffset","anchorNode","text","nodeValue","$updateTextNodeFromDOMContent","shouldUpdateTextNodeFromMutation","targetDOM","targetNode","$isRangeSelection","anchor","getNode","is","format","getFormat","nodeType","isAttached","$flushMutations$1","mutations","observer","shouldFlushTextMutations","performance","now","updateEditor","badDOMTargets","Map","rootElement","getRootElement","currentEditorState","_editorState","blockCursorElement","_blockCursorElement","shouldRevertSelection","possibleTextForFirefoxPaste","i","length","mutation","$getNearestNodeFromDOMNode","$isDecoratorNode","$isTextNode","addedDOMs","addedNodes","s","addedDOM","getNodeFromDOMNode","parentDOM","parentNode","nodeName","possibleText","innerText","removeChild","removedDOMs","removedNodes","removedDOMsLength","unremovedBRs","removedDOM","appendChild","internalGetRoot","set","size","$isElementNode","childKeys","getChildrenKeys","currentDOM","firstChild","key","correctDOM","getElementByKey","replaceChild","nextSibling","markDirty","records","takeRecords","record","dirty","$setSelection","isFirefoxClipboardEvents","insertRawText","flushRootMutations","_observer","initMutationObserver","MutationObserver","$canSimpleTextNodesBeMerged","node1","node2","node1Mode","__mode","node1Format","__format","node1Style","__style","node2Mode","node2Format","node2Style","$mergeTextNodes","writableNode1","mergeWithSibling","normalizedNodes","getActiveEditor","_normalizedNodes","add","__key","$normalizeTextNode","textNode","__text","isSimpleText","isUnmergeable","remove","previousNode","getPreviousSibling","nextNode","getNextSibling","$normalizeSelection","$normalizePoint","focus","point","offset","nextOffsetAtEnd","getChildrenSize","getChildAtIndex","getTextContentSize","keyCounter","generateRandomKey","getRegisteredNodeOrThrow","registeredNode","_nodes","get","Error","scheduleMicroTask","queueMicrotask","fn","Promise","resolve","then","$isSelectionCapturedInDecorator","isSelectionCapturedInDecoratorInput","anchorDOM","activeElement","contentEditable","__lexicalEditor","isSelectionWithinEditor","focusDOM","contains","getNearestEditorFromDOMNode","error","currentNode","getParentElement","getTextDirection","$isTokenOrSegmented","isToken","isSegmented","isDOMNodeLexicalTextNode","getDOMTextNode","element","toggleTextFormatType","alignWithFormat","activeFormat","newFormat","$isLeafNode","$isLineBreakNode","$setNodeKey","existingKey","errorOnReadOnly","errorOnInfiniteTransforms","editorState","getActiveEditorState","_nodeMap","_dirtyElements","_dirtyLeaves","_cloneNotNeeded","_dirtyType","internalMarkParentElementsAsDirty","parentKey","nodeMap","dirtyElements","nextParentKey","has","__parent","removeFromParent","oldParent","getParent","writableNode","getWritable","writableParent","prevSibling","writableNextSibling","__first","__prev","writablePrevSibling","__next","__last","__size","internalMarkNodeAsDirty","latest","getLatest","parent","internalMarkSiblingsAsDirty","$setCompositionKey","compositionKey","previousCompositionKey","_compositionKey","$getNodeByKey","$getCompositionKey","isCurrentlyReadOnlyMode","startingDOM","cloneDecorators","currentDecorators","_decorators","pendingDecorators","Object","assign","_pendingDecorators","getEditorStateTextContent","$getRoot","getTextContent","markAllNodesAsDirty","isEmpty","_pendingEditorState","tag","isFrozen","setCachedNodes","_selection","$flushMutations","getNodeFromDOM","nodeKey","getNodeKeyFromDOM","getTextNodeOffset","moveSelectionToEnd","doesContainGrapheme","str","getEditorsToPropagate","editorsToPropagate","currentEditor","push","_parentEditor","createUID","Math","random","toString","replace","substr","getAnchorTextFromDOM","$updateSelectedTextFromDOM","isCompositionEnd","data","textContent","compositionEnd","isDirty","isComposing","normalizedTextContent","slice","prevTextContent","setTimeout","update","prevSelection","$getPreviousSelection","prevTextContentSize","getKey","canInsertTextBefore","canInsertTextAfter","setTextContent","setTextNodeRange","originalTextContent","replacement","$createTextNode","$previousSiblingDoesNotAcceptText","previousSibling","isInline","$shouldInsertTextAfterOrBeforeTextNode","isCollapsed","getParentOrThrow","isTab","keyCode","altKey","ctrlKey","metaKey","isBold","controlOrMeta","isItalic","isUnderline","isParagraph","shiftKey","isReturn","isLineBreak","isOpenLineBreak","isDeleteWordBackward","isBackspace","isDeleteWordForward","isDelete","isDeleteLineBackward","isDeleteLineForward","isDeleteBackward","isDeleteForward","isUndo","isRedo","isCopy","isCut","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","isMoveBackward","isMoveToStart","isMoveForward","isMoveToEnd","isMoveUp","isMoveDown","isModifier","isSpace","isEscape","isSelectAll","$selectAll","root","select","getCachedClassNameArray","classNamesTheme","classNameThemeType","__lexicalClassNameCache","classNamesCache","cachedClassNames","classNames","classNamesArr","split","setMutatedNode","mutatedNodes","registeredNodes","mutationListeners","__type","klass","mutatedNodesByType","prevMutation","isMove","$nodesOfType","readOnly","_readOnly","klassType","getType","nodes","nodesOfType","resolveElement","isBackward","block","getIndexWithinParent","$getAdjacentNode","focusNode","possibleNode","inputType","dispatchCommand","command","payload","triggerCommandListeners","$textContentRequiresDoubleLinebreakAtEnd","$isRootNode","isLastChild","getElementByKeyOrThrow","_keyToDOMMap","parentElement","assignedSlot","host","scrollIntoViewIfNeeded","selectionRect","doc","ownerDocument","defaultView","top","currentTop","bottom","currentBottom","targetTop","targetBottom","isBodyElement","body","innerHeight","targetRect","getBoundingClientRect","diff","scrollBy","scrollTop","yOffset","$hasUpdateTag","_updateTags","$addUpdateTag","$maybeMoveChildrenSelectionToParent","$hasAncestor","child","getDefaultView","domElem","ownerDoc","windowObj","$isInlineElementOrDecoratorNode","$getNearestRootOrShadowRoot","$isRootOrShadowRoot","isShadowRoot","$copyNode","copy","constructor","$applyNodeReplacement","replaceFunc","replacementNode","errorOnInsertTextNodeOnRoot","insertNode","createBlockCursorElement","editorConfig","theme","setAttribute","blockCursorTheme","blockCursor","classList","needsBlockCursor","canBeEmpty","removeDOMBlockCursorElement","style","removeProperty","updateDOMBlockCursorElement","nextSelection","elementNode","elementNodeSize","isBlockCursor","insertBeforeElement","sibling","elementDOM","_config","caretColor","insertBefore","targetWindow","getSelection","$splitNode","startNode","recurse","isParentRoot","nodeToMove","insertAfter","leftTree","rightTree","newParent","nextSiblings","getNextSiblings","append","isHTMLAnchorElement","x","isHTMLElement","tagName","INTERNAL_$isBlock","getFirstChild","isLeafElement","$getAncestor","predicate","$getEditor","$garbageCollectDetachedDecorators","pendingEditorState","decorators","$garbageCollectDetachedDeepChildNodes","prevNodeMap","nodeMapDelete","dirtyNodes","childKey","delete","$garbageCollectDetachedNodes","prevEditorState","dirtyLeaves","subTreeTextContent","subTreeDirectionedTextContent","editorTextContent","activeEditorConfig","activeEditor$1","activeEditorNodes","treatAllNodesAsDirty","activeEditorStateReadOnly","activeMutationListeners","activeTextDirection","activeDirtyElements","activeDirtyLeaves","activePrevNodeMap","activeNextNodeMap","activePrevKeyToDOMMap","destroyNode","getPrevElementByKeyOrThrow","children","createChildrenArray","destroyChildren","_startIndex","endIndex","startIndex","setTextAlign","domStyle","value","setProperty","DEFAULT_INDENT_VALUE","setElementIndent","indent","indentClassName","elementHasClassName","indentationBaseValue","getComputedStyle","getPropertyValue","setElementFormat","createNode","insertDOM","createDOM","storeDOMWithKey","__indent","childrenSize","createChildrenWithDirection","reconcileElementTerminatingLineBreak","decorator","decorate","reconcileDecorator","isDirectionless","possibleLineBreak","freeze","previousSubTreeDirectionedTextContent","createChildren","reconcileBlockDirection","previousSubTreeTextContent","__lexicalTextContent","isLastChildLineBreakOrDecorator","prevElement","nextElement","prevLineBreak","nextLineBreak","previousSubTreeDirectionTextContent","__lexicalDirTextContent","previousDirection","__lexicalDir","hasEmptyDirectionedTextContent","direction","previousDirectionTheme","nextDirectionTheme","removeAttribute","dir","__dir","reconcileChildrenWithDirection","reconcileChildren","prevChildrenSize","nextChildrenSize","prevFirstChildKey","nextFrstChildKey","reconcileNode","lastDOM","replacementDOM","prevChildren","nextChildren","lexicalLineBreak","canUseFastPath","reconcileNodeChildren","prevNode","updateDOM","nextIndent","nextFormat","__cachedText","nextRootNode","prevChildrenLength","nextChildrenLength","prevEndIndex","nextEndIndex","prevChildrenSet","nextChildrenSet","siblingDOM","prevIndex","nextIndex","prevKey","nextKey","Set","nextHasPrevKey","prevHasNextKey","childDOM","appendNewChildren","removeOldChildren","reconcileRoot","nextEditorState","dirtyType","_listeners","currentMutatedNodes","keyToDOMMap","PASS_THROUGH_COMMAND","ANDROID_COMPOSITION_LATENCY","rootElementEvents","onKeyDown","onPointerDown","onCompositionStart","onCompositionEnd","onInput","onClick","onBeforeInput","lastKeyDownTimeStamp","lastKeyCode","lastBeforeInputInsertTextTimeStamp","unprocessedBeforeInputData","rootElementsRegistered","isSelectionChangeFromDOMUpdate","isSelectionChangeFromMouseDown","isInsertLineBreak","isFirefoxEndingComposition","collapsedSelectionFormat","$shouldPreventDefaultAndInsertText","domTargetRange","isBeforeInput","domAnchorNode","anchorKey","backingAnchorElement","textLength","collapsed","startContainer","startOffset","getStyle","shouldSkipSelectionChange","domNode","onSelectionChange","isActive","windowEvent","currentTimeStamp","lastFormat","lastStyle","lastOffset","lastKey","isRootTextContentEmpty","focusKey","getNodes","nodesLength","endOffset","startKey","endKey","combinedFormat","hasTextNodes","textContentSize","lastSelection","getTopLevelElementOrThrow","removeAllRanges","detail","pointerType","newSelection","internalCreateRangeSelection","Node","getTargetRange","getTargetRanges","targetRanges","$canRemoveText","isPossiblyAndroidKeyPress","targetRange","selectedText","preventDefault","applyDOMRange","dataTransfer","getData","stopPropagation","onCompositionEndImpl","characterData","$isNodeSelection","getRootElementRemoveHandles","eventHandles","__lexicalEventHandles","activeNestedEditorsMap","onDocumentSelectionChange","nextActiveEditor","editors","rootEditor","rootEditorKey","activeNestedEditor","prevActiveEditor","stopLexicalPropagation","_lexicalHandled","hasStoppedLexicalPropagation","stopped","addRootElementEvents","removeHandles","eventName","onEvent","eventHandler","isEditable","removeEventListener","removeRootElementEvents","cleanActiveNestedEditorsMap","markSelectionChangeFromDOMUpdate","markCollapsedSelectionFormat","removeNode","nodeToRemove","restoreSelection","preserveEmptyParent","selectionMoved","moveSelectionPointToSibling","isSelected","selectPrevious","index","$updateElementSelectionOnCreateDeleteNode","selectEnd","LexicalNode","name","_data","errorOnTypeKlassMismatch","targetSelection","some","n","getTopLevelElement","getParents","parents","getParentKeys","self","getPreviousSiblings","siblings","getCommonAncestor","a","b","unshift","aLength","bLength","bSet","ancestor","object","isBefore","isParentOf","commonAncestor","indexA","indexB","getNodesBetween","visited","getLastChild","parentSibling","reverse","latestNode","cloneNotNeeded","mutableNode","__detail","_editor","_prevNode","_dom","exportDOM","exportJSON","importJSON","_serializedNode","transform","replaceWith","includeChildren","toReplaceKey","writableReplaceWith","getChildren","forEach","$moveSelectionPointToEnd","nodeToInsert","arguments","writableSelf","writableNodeToInsert","elementAnchorSelectionOnNode","elementFocusSelectionOnNode","oldIndex","oldParentKey","insertKey","writableParentKey","isParentRequired","createParentElementNode","$createParagraphNode","selectStart","selectNext","editorKlass","insertRangeAfter","firstToInsert","lastToInsert","lastToInsert2","current","nodesToInsert","LineBreakNode","importDOM","br","isOnlyChild","conversion","convertLineBreakElement","priority","serializedLineBreakNode","$createLineBreakNode","version","isWhitespaceDomTextNode","lastChild","getElementOuterTag","getElementInnerTag","setTextThemeClassNames","prevFormat","textClassNames","domClassList","hasUnderlineStrikethrough","prevUnderlineStrikethrough","nextUnderlineStrikethrough","flag","diffComposedText","nextText","suffix","insert","deleteData","insertData","createTextInnerDOM","innerDOM","innerTag","config","wrapElementWith","el","TextNode","getDetail","getMode","hasFormat","formatFlag","getFormatFlags","canHaveFormat","outerTag","cssText","prevOuterTag","nextOuterTag","prevInnerTag","nextInnerTag","prevTag","nextTag","prevInnerDOM","nextInnerDOM","prevStyle","nextStyle","#text","convertTextDOMNode","convertBringAttentionToElement","convertTextFormatElement","em","span","convertSpanElement","strong","sub","sup","u","serializedNode","setFormat","setDetail","setMode","mode","setStyle","whiteSpace","selectionTransform","toggleFormat","toggleDirectionless","toggleUnmergeable","_anchorOffset","_focusOffset","internalMakeRangeSelection","spliceText","delCount","newText","moveSelection","handledTextLength","newOffset","updatedText","splitText","_len","splitOffsets","Array","offsetsSet","parts","string","partsLength","firstPart","hasReplacedSelf","splitNodes","textSize","part","partSize","siblingKey","nextTextSize","insertionIndex","splice","targetKey","adjustPointOffsetForMergedSibling","targetText","isTextEntity","hasBoldFontWeight","fontWeight","hasLinethroughTextDecoration","textDecoration","hasItalicFontStyle","fontStyle","hasUnderlineTextDecoration","verticalAlign","forChild","lexicalNode","hasNormalFontWeight","preParentCache","WeakMap","isNodePre","startsWith","findParentPreDOMNode","cached","resultNode","domNode_","parentDom","$createTabNode","previousText","isStartOfLine","findTextInLine","previousTextContent","isEndOfLine","nextTextContent","inlineParents","forward","display","match","descendant","nodeNameToTextFormat","toLowerCase","TabNode","newNode","serializedTabNode","_text","_detail","_type","$isTabNode","Point","aNode","bNode","aOffset","bOffset","aNodeDescendant","getDescendantByIndex","bNodeDescendant","oldKey","$createPoint","selectPointOnNode","textContentLength","lastNode","getLastDescendant","$transferStartingElementPointToTextPoint","placementNode","$setPointValues","NodeSelection","objects","_cachedNodes","getCachedNodes","from","every","getStartEndPoints","clear","extract","insertText","insertNodes","selectedNodes","selectedNodesLength","lastSelectedNode","selectionAtEnd","cachedNodes","RangeSelection","firstPoint","lastPoint","firstNode","firstNodeDescendant","lastNodeDescendant","$getCharacterOffsets","prevWasElement","range","resolvedSelectionPoints","internalResolveSelectionPoints","endContainer","anchorPoint","focusPoint","endPoint","firstNodeText","firstNodeTextLength","firstNodeParent","lastIndex","lastNodeParent","normalizeSelectionPointsForBoundaries","firstNodeFormat","firstNodeStyle","markedNodeKeysForKeep","firstElement","lastElement","lastElementChild","lastNodeChildren","selectedNodesSet","firstAndLastElementsAreEqual","insertionTarget","lastNodeChild","lastRemovedParent","childrenLength","selectedNode","removeText","formatText","formatType","selectedTextNodes","selectedTextNodesLength","startPoint","firstIndex","firstNextFormat","lastNextFormat","insertParagraph","firstBlock","last","removeTextAndSplitBlock","notInline","blocksParent","$wrapInlineNodes","nodeToSelect","blocks","isLI","isMergeable","shouldInsert","insertedParagraph","lastInsertedBlock","paragraph","firstToAppend","newBlock","insertNewAfter","insertLineBreak","lineBreak","shift","lastNodeText","lastNodeTextLength","pop","modify","alter","granularity","collapse","isIsolated","isKeyboardSelectable","nodeSelection","$createNodeSelection","elementKey","_rootElement","moveNativeSelection","rangeCount","getRangeAt","validNodes","shrinkSelection","firstValidNode","lastValidNode","$swapPoints","deleteCharacter","wasCollapsed","$removeSegment","$updateCaretSelectionForUnicodeCharacter","collapseAtStart","deleteLine","deleteWord","getCharacterOffset","anchorAndFocus","anchorType","characterOffset","splitLength","segmentOffset","restoreOffset","isLast","join","trim","shouldResolveAncestor","resolvedElement","resolvedOffset","internalResolveSelectionPoint","resolvedNode","childNodes","childNodesLength","hasBlockCursor","getFirstDescendant","resolveSelectionPointOnBoundary","lastAnchor","lastFocus","resolvedAnchorPoint","resolvedFocusPoint","$isBlockElementNode","focusType","$createRangeSelection","internalCreateSelection","eventType","isSelectionChange","useDOMSelection","nodeOffset","times","selectionOffset","newSelectionOffset","max","$updateSelectionResolveTextNodes","firstPointNode","lastPointNode","firstPointOffset","lastPointOffset","childSize","anchorOffsetAtEnd","focusOffsetAtEnd","applySelectionTransforms","updateDOMSelection","tags","nodeCount","anchorDOMNode","focusDOMNode","nextAnchorOffset","nextFocusOffset","nextAnchorNode","nextFocusNode","anchorFormatOrStyleChanged","preventScroll","setBaseAndExtent","selectionTarget","Text","createRange","selectNode","$insertNodes","$getTextContent","splitNodeAtPoint","insertPoint","newElement","virtualRoot","currentBlock","isLineBreakNode","activeEditorState","activeEditor","isReadOnlyMode","isAttemptingToRecoverFromReconcilerError","infiniteTransformCount","observerOptions","childList","subtree","internalGetActiveEditor","$applyTransforms","transformsCache","transformsArr","transforms","transformsArrLength","$isNodeValidForTransform","$normalizeAllDirtyTextNodes","$applyAllTransforms","untransformedDirtyLeaves","untransformedDirtyLeavesLength","untransformedDirtyElements","untransformedDirtyElementsLength","currentUntransformedDirtyElement","intentionallyMarkedAsDirty","$parseSerializedNode","internalSerializedNode","$parseSerializedNodeImpl","nodeClass","isArray","serializedJSONChildNode","childNode","parseEditorState","serializedEditorState","updateFn","createEmptyEditorState","previousActiveEditorState","previousReadOnlyMode","previousActiveEditor","previousDirtyElements","previousDirtyLeaves","previousCloneNotNeeded","previousDirtyType","handleDEVOnlyPendingUpdateGuarantees","_onError","readEditorState","callbackFn","commitPendingUpdates","recoveryEditorState","shouldSkipDOM","_headless","currentSelection","pendingSelection","needsUpdate","previouslyUpdating","_updating","disconnect","resetEditor","observe","deferred","_deferred","_editable","triggerMutationListeners","triggerListeners","triggerTextContentListeners","triggerDeferredUpdateCallbacks","triggerEnqueuedUpdates","currentTextContent","latestTextContent","updateTags","listeners","listenersLength","listener","isCurrentlyEnqueuingUpdates","_len2","_key2","apply","returnVal","e","commandListeners","_commands","listenerInPriorityOrder","listenersSet","j","queuedUpdates","_updates","queuedUpdate","options","beginUpdate","processNestedUpdates","initialSkipTransforms","skipTransforms","nextUpdateFn","onUpdate","discrete","editorStateWasCloned","cloneEditorState","_flushSync","startingCompositionKey","endingCompositionKey","pendingNodeMap","shouldUpdate","editorStateHasDirtySelection","DecoratorNode","ElementNode","getFormatType","getIndent","parentLastChild","getAllTextNodes","textNodes","subChildrenNodes","firstKey","getFirstChildOrThrow","getLastChildOrThrow","getDirection","childrenCount","_len3","nodesToAppend","_key3","setDirection","setIndent","indentLevel","deleteCount","nodesToInsertLength","oldSize","writableSelfKey","nodesToInsertKeys","nodesToRemoveKeys","nodeAfterRange","nodeBeforeRange","newSize","nodeToDelete","nodeKeyToDelete","writableNodeToDelete","nodeKeyToInsert","writablePrevNode","writableNodeAfterRange","nodesToRemoveKeySet","nodesToInsertKeySet","isPointRemoved","canIndent","excludeFromCopy","destination","canExtractContents","canReplaceWith","canInsertAfter","canMergeWith","extractWithChild","RootNode","cachedText","$createRootNode","EditorState","exportNodeToJSON","serializedChildren","serializedChildNode","toJSON","ParagraphNode","p","convertParagraphElement","textAlign","textIndent","_","parseInt","$isParagraphNode","COMMAND_PRIORITY_EDITOR","COMMAND_PRIORITY_LOW","COMMAND_PRIORITY_NORMAL","COMMAND_PRIORITY_HIGH","COMMAND_PRIORITY_CRITICAL","prevRootElement","nextRootElement","keyNodeMap","initializeConversionCache","additionalConversions","conversionCache","handledConversions","addConversionsToCache","map","keys","currentCache","bind","createEditor","parentEditor","disableEvents","namespace","initialEditorState","onError","html","editable","replaceWithKlass","with","withKlass","proto","prototype","method","hasOwnProperty","console","warn","export","LexicalEditor","import","htmlConversions","textcontent","_htmlConversions","registerUpdateListener","listenerSetOrMap","registerEditableListener","registerDecoratorListener","registerTextContentListener","registerRootListener","registerCommand","commandsMap","listenersInPriorityOrder","String","registerMutationListener","registerNodeTransformToKlass","registerNodeTransform","registeredReplaceWithNode","hasNode","hasNodes","getDecorators","setRootElement","userSelect","wordBreak","setEditorState","maybeStringifiedEditorState","JSON","parse","defaultSelection","blur","setEditable","exports","$normalizeSelection__EXPERIMENTAL"],"sources":["/media/ks/My thing/test/textditor/node_modules/lexical/Lexical.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction createCommand(type) {\n  return {\n    type\n  } ;\n}\nconst SELECTION_CHANGE_COMMAND = createCommand('SELECTION_CHANGE_COMMAND');\nconst SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = createCommand('SELECTION_INSERT_CLIPBOARD_NODES_COMMAND');\nconst CLICK_COMMAND = createCommand('CLICK_COMMAND');\nconst DELETE_CHARACTER_COMMAND = createCommand('DELETE_CHARACTER_COMMAND');\nconst INSERT_LINE_BREAK_COMMAND = createCommand('INSERT_LINE_BREAK_COMMAND');\nconst INSERT_PARAGRAPH_COMMAND = createCommand('INSERT_PARAGRAPH_COMMAND');\nconst CONTROLLED_TEXT_INSERTION_COMMAND = createCommand('CONTROLLED_TEXT_INSERTION_COMMAND');\nconst PASTE_COMMAND = createCommand('PASTE_COMMAND');\nconst REMOVE_TEXT_COMMAND = createCommand('REMOVE_TEXT_COMMAND');\nconst DELETE_WORD_COMMAND = createCommand('DELETE_WORD_COMMAND');\nconst DELETE_LINE_COMMAND = createCommand('DELETE_LINE_COMMAND');\nconst FORMAT_TEXT_COMMAND = createCommand('FORMAT_TEXT_COMMAND');\nconst UNDO_COMMAND = createCommand('UNDO_COMMAND');\nconst REDO_COMMAND = createCommand('REDO_COMMAND');\nconst KEY_DOWN_COMMAND = createCommand('KEYDOWN_COMMAND');\nconst KEY_ARROW_RIGHT_COMMAND = createCommand('KEY_ARROW_RIGHT_COMMAND');\nconst MOVE_TO_END = createCommand('MOVE_TO_END');\nconst KEY_ARROW_LEFT_COMMAND = createCommand('KEY_ARROW_LEFT_COMMAND');\nconst MOVE_TO_START = createCommand('MOVE_TO_START');\nconst KEY_ARROW_UP_COMMAND = createCommand('KEY_ARROW_UP_COMMAND');\nconst KEY_ARROW_DOWN_COMMAND = createCommand('KEY_ARROW_DOWN_COMMAND');\nconst KEY_ENTER_COMMAND = createCommand('KEY_ENTER_COMMAND');\nconst KEY_SPACE_COMMAND = createCommand('KEY_SPACE_COMMAND');\nconst KEY_BACKSPACE_COMMAND = createCommand('KEY_BACKSPACE_COMMAND');\nconst KEY_ESCAPE_COMMAND = createCommand('KEY_ESCAPE_COMMAND');\nconst KEY_DELETE_COMMAND = createCommand('KEY_DELETE_COMMAND');\nconst KEY_TAB_COMMAND = createCommand('KEY_TAB_COMMAND');\nconst INSERT_TAB_COMMAND = createCommand('INSERT_TAB_COMMAND');\nconst INDENT_CONTENT_COMMAND = createCommand('INDENT_CONTENT_COMMAND');\nconst OUTDENT_CONTENT_COMMAND = createCommand('OUTDENT_CONTENT_COMMAND');\nconst DROP_COMMAND = createCommand('DROP_COMMAND');\nconst FORMAT_ELEMENT_COMMAND = createCommand('FORMAT_ELEMENT_COMMAND');\nconst DRAGSTART_COMMAND = createCommand('DRAGSTART_COMMAND');\nconst DRAGOVER_COMMAND = createCommand('DRAGOVER_COMMAND');\nconst DRAGEND_COMMAND = createCommand('DRAGEND_COMMAND');\nconst COPY_COMMAND = createCommand('COPY_COMMAND');\nconst CUT_COMMAND = createCommand('CUT_COMMAND');\nconst SELECT_ALL_COMMAND = createCommand('SELECT_ALL_COMMAND');\nconst CLEAR_EDITOR_COMMAND = createCommand('CLEAR_EDITOR_COMMAND');\nconst CLEAR_HISTORY_COMMAND = createCommand('CLEAR_HISTORY_COMMAND');\nconst CAN_REDO_COMMAND = createCommand('CAN_REDO_COMMAND');\nconst CAN_UNDO_COMMAND = createCommand('CAN_UNDO_COMMAND');\nconst FOCUS_COMMAND = createCommand('FOCUS_COMMAND');\nconst BLUR_COMMAND = createCommand('BLUR_COMMAND');\nconst KEY_MODIFIER_COMMAND = createCommand('KEY_MODIFIER_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst documentMode = CAN_USE_DOM && 'documentMode' in document ? document.documentMode : null;\nconst IS_APPLE = CAN_USE_DOM && /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconst IS_FIREFOX = CAN_USE_DOM && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nconst CAN_USE_BEFORE_INPUT = CAN_USE_DOM && 'InputEvent' in window && !documentMode ? 'getTargetRanges' in new window.InputEvent('input') : false;\nconst IS_SAFARI = CAN_USE_DOM && /Version\\/[\\d.]+.*Safari/.test(navigator.userAgent);\nconst IS_IOS = CAN_USE_DOM && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nconst IS_ANDROID = CAN_USE_DOM && /Android/.test(navigator.userAgent);\n\n// Keep these in case we need to use them in the future.\n// export const IS_WINDOWS: boolean = CAN_USE_DOM && /Win/.test(navigator.platform);\nconst IS_CHROME = CAN_USE_DOM && /^(?=.*Chrome).*/i.test(navigator.userAgent);\n// export const canUseTextInputEvent: boolean = CAN_USE_DOM && 'TextEvent' in window && !documentMode;\n\nconst IS_APPLE_WEBKIT = CAN_USE_DOM && /AppleWebKit\\/[\\d.]+/.test(navigator.userAgent) && !IS_CHROME;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// DOM\nconst DOM_ELEMENT_TYPE = 1;\nconst DOM_TEXT_TYPE = 3;\n\n// Reconciling\nconst NO_DIRTY_NODES = 0;\nconst HAS_DIRTY_NODES = 1;\nconst FULL_RECONCILE = 2;\n\n// Text node modes\nconst IS_NORMAL = 0;\nconst IS_TOKEN = 1;\nconst IS_SEGMENTED = 2;\n// IS_INERT = 3\n\n// Text node formatting\nconst IS_BOLD = 1;\nconst IS_ITALIC = 1 << 1;\nconst IS_STRIKETHROUGH = 1 << 2;\nconst IS_UNDERLINE = 1 << 3;\nconst IS_CODE = 1 << 4;\nconst IS_SUBSCRIPT = 1 << 5;\nconst IS_SUPERSCRIPT = 1 << 6;\nconst IS_HIGHLIGHT = 1 << 7;\nconst IS_ALL_FORMATTING = IS_BOLD | IS_ITALIC | IS_STRIKETHROUGH | IS_UNDERLINE | IS_CODE | IS_SUBSCRIPT | IS_SUPERSCRIPT | IS_HIGHLIGHT;\n\n// Text node details\nconst IS_DIRECTIONLESS = 1;\nconst IS_UNMERGEABLE = 1 << 1;\n\n// Element node formatting\nconst IS_ALIGN_LEFT = 1;\nconst IS_ALIGN_CENTER = 2;\nconst IS_ALIGN_RIGHT = 3;\nconst IS_ALIGN_JUSTIFY = 4;\nconst IS_ALIGN_START = 5;\nconst IS_ALIGN_END = 6;\n\n// Reconciliation\nconst NON_BREAKING_SPACE = '\\u00A0';\nconst ZERO_WIDTH_SPACE = '\\u200b';\n\n// For iOS/Safari we use a non breaking space, otherwise the cursor appears\n// overlapping the composed text.\nconst COMPOSITION_SUFFIX = IS_SAFARI || IS_IOS || IS_APPLE_WEBKIT ? NON_BREAKING_SPACE : ZERO_WIDTH_SPACE;\nconst DOUBLE_LINE_BREAK = '\\n\\n';\n\n// For FF, we need to use a non-breaking space, or it gets composition\n// in a stuck state.\nconst COMPOSITION_START_CHAR = IS_FIREFOX ? NON_BREAKING_SPACE : COMPOSITION_SUFFIX;\nconst RTL = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\nconst LTR = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n\n// eslint-disable-next-line no-misleading-character-class\nconst RTL_REGEX = new RegExp('^[^' + LTR + ']*[' + RTL + ']');\n// eslint-disable-next-line no-misleading-character-class\nconst LTR_REGEX = new RegExp('^[^' + RTL + ']*[' + LTR + ']');\nconst TEXT_TYPE_TO_FORMAT = {\n  bold: IS_BOLD,\n  code: IS_CODE,\n  highlight: IS_HIGHLIGHT,\n  italic: IS_ITALIC,\n  strikethrough: IS_STRIKETHROUGH,\n  subscript: IS_SUBSCRIPT,\n  superscript: IS_SUPERSCRIPT,\n  underline: IS_UNDERLINE\n};\nconst DETAIL_TYPE_TO_DETAIL = {\n  directionless: IS_DIRECTIONLESS,\n  unmergeable: IS_UNMERGEABLE\n};\nconst ELEMENT_TYPE_TO_FORMAT = {\n  center: IS_ALIGN_CENTER,\n  end: IS_ALIGN_END,\n  justify: IS_ALIGN_JUSTIFY,\n  left: IS_ALIGN_LEFT,\n  right: IS_ALIGN_RIGHT,\n  start: IS_ALIGN_START\n};\nconst ELEMENT_FORMAT_TO_TYPE = {\n  [IS_ALIGN_CENTER]: 'center',\n  [IS_ALIGN_END]: 'end',\n  [IS_ALIGN_JUSTIFY]: 'justify',\n  [IS_ALIGN_LEFT]: 'left',\n  [IS_ALIGN_RIGHT]: 'right',\n  [IS_ALIGN_START]: 'start'\n};\nconst TEXT_MODE_TO_TYPE = {\n  normal: IS_NORMAL,\n  segmented: IS_SEGMENTED,\n  token: IS_TOKEN\n};\nconst TEXT_TYPE_TO_MODE = {\n  [IS_NORMAL]: 'normal',\n  [IS_SEGMENTED]: 'segmented',\n  [IS_TOKEN]: 'token'\n};\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// The time between a text entry event and the mutation observer firing.\nconst TEXT_MUTATION_VARIANCE = 100;\nlet isProcessingMutations = false;\nlet lastTextEntryTimeStamp = 0;\nfunction getIsProcessingMutations() {\n  return isProcessingMutations;\n}\nfunction updateTimeStamp(event) {\n  lastTextEntryTimeStamp = event.timeStamp;\n}\nfunction initTextEntryListener(editor) {\n  if (lastTextEntryTimeStamp === 0) {\n    getWindow(editor).addEventListener('textInput', updateTimeStamp, true);\n  }\n}\nfunction isManagedLineBreak(dom, target, editor) {\n  return (\n    // @ts-expect-error: internal field\n    target.__lexicalLineBreak === dom ||\n    // @ts-ignore We intentionally add this to the Node.\n    dom[`__lexicalKey_${editor._key}`] !== undefined\n  );\n}\nfunction getLastSelection(editor) {\n  return editor.getEditorState().read(() => {\n    const selection = $getSelection();\n    return selection !== null ? selection.clone() : null;\n  });\n}\nfunction handleTextMutation(target, node, editor) {\n  const domSelection = getDOMSelection(editor._window);\n  let anchorOffset = null;\n  let focusOffset = null;\n  if (domSelection !== null && domSelection.anchorNode === target) {\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n  }\n  const text = target.nodeValue;\n  if (text !== null) {\n    $updateTextNodeFromDOMContent(node, text, anchorOffset, focusOffset, false);\n  }\n}\nfunction shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode) {\n  if ($isRangeSelection(selection)) {\n    const anchorNode = selection.anchor.getNode();\n    if (anchorNode.is(targetNode) && selection.format !== anchorNode.getFormat()) {\n      return false;\n    }\n  }\n  return targetDOM.nodeType === DOM_TEXT_TYPE && targetNode.isAttached();\n}\nfunction $flushMutations$1(editor, mutations, observer) {\n  isProcessingMutations = true;\n  const shouldFlushTextMutations = performance.now() - lastTextEntryTimeStamp > TEXT_MUTATION_VARIANCE;\n  try {\n    updateEditor(editor, () => {\n      const selection = $getSelection() || getLastSelection(editor);\n      const badDOMTargets = new Map();\n      const rootElement = editor.getRootElement();\n      // We use the current editor state, as that reflects what is\n      // actually \"on screen\".\n      const currentEditorState = editor._editorState;\n      const blockCursorElement = editor._blockCursorElement;\n      let shouldRevertSelection = false;\n      let possibleTextForFirefoxPaste = '';\n      for (let i = 0; i < mutations.length; i++) {\n        const mutation = mutations[i];\n        const type = mutation.type;\n        const targetDOM = mutation.target;\n        let targetNode = $getNearestNodeFromDOMNode(targetDOM, currentEditorState);\n        if (targetNode === null && targetDOM !== rootElement || $isDecoratorNode(targetNode)) {\n          continue;\n        }\n        if (type === 'characterData') {\n          // Text mutations are deferred and passed to mutation listeners to be\n          // processed outside of the Lexical engine.\n          if (shouldFlushTextMutations && $isTextNode(targetNode) && shouldUpdateTextNodeFromMutation(selection, targetDOM, targetNode)) {\n            handleTextMutation(\n            // nodeType === DOM_TEXT_TYPE is a Text DOM node\n            targetDOM, targetNode, editor);\n          }\n        } else if (type === 'childList') {\n          shouldRevertSelection = true;\n          // We attempt to \"undo\" any changes that have occurred outside\n          // of Lexical. We want Lexical's editor state to be source of truth.\n          // To the user, these will look like no-ops.\n          const addedDOMs = mutation.addedNodes;\n          for (let s = 0; s < addedDOMs.length; s++) {\n            const addedDOM = addedDOMs[s];\n            const node = getNodeFromDOMNode(addedDOM);\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM !== blockCursorElement && node === null && (addedDOM.nodeName !== 'BR' || !isManagedLineBreak(addedDOM, parentDOM, editor))) {\n              if (IS_FIREFOX) {\n                const possibleText = addedDOM.innerText || addedDOM.nodeValue;\n                if (possibleText) {\n                  possibleTextForFirefoxPaste += possibleText;\n                }\n              }\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n          const removedDOMs = mutation.removedNodes;\n          const removedDOMsLength = removedDOMs.length;\n          if (removedDOMsLength > 0) {\n            let unremovedBRs = 0;\n            for (let s = 0; s < removedDOMsLength; s++) {\n              const removedDOM = removedDOMs[s];\n              if (removedDOM.nodeName === 'BR' && isManagedLineBreak(removedDOM, targetDOM, editor) || blockCursorElement === removedDOM) {\n                targetDOM.appendChild(removedDOM);\n                unremovedBRs++;\n              }\n            }\n            if (removedDOMsLength !== unremovedBRs) {\n              if (targetDOM === rootElement) {\n                targetNode = internalGetRoot(currentEditorState);\n              }\n              badDOMTargets.set(targetDOM, targetNode);\n            }\n          }\n        }\n      }\n\n      // Now we process each of the unique target nodes, attempting\n      // to restore their contents back to the source of truth, which\n      // is Lexical's \"current\" editor state. This is basically like\n      // an internal revert on the DOM.\n      if (badDOMTargets.size > 0) {\n        for (const [targetDOM, targetNode] of badDOMTargets) {\n          if ($isElementNode(targetNode)) {\n            const childKeys = targetNode.getChildrenKeys();\n            let currentDOM = targetDOM.firstChild;\n            for (let s = 0; s < childKeys.length; s++) {\n              const key = childKeys[s];\n              const correctDOM = editor.getElementByKey(key);\n              if (correctDOM === null) {\n                continue;\n              }\n              if (currentDOM == null) {\n                targetDOM.appendChild(correctDOM);\n                currentDOM = correctDOM;\n              } else if (currentDOM !== correctDOM) {\n                targetDOM.replaceChild(correctDOM, currentDOM);\n              }\n              currentDOM = currentDOM.nextSibling;\n            }\n          } else if ($isTextNode(targetNode)) {\n            targetNode.markDirty();\n          }\n        }\n      }\n\n      // Capture all the mutations made during this function. This\n      // also prevents us having to process them on the next cycle\n      // of onMutation, as these mutations were made by us.\n      const records = observer.takeRecords();\n\n      // Check for any random auto-added <br> elements, and remove them.\n      // These get added by the browser when we undo the above mutations\n      // and this can lead to a broken UI.\n      if (records.length > 0) {\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const addedNodes = record.addedNodes;\n          const target = record.target;\n          for (let s = 0; s < addedNodes.length; s++) {\n            const addedDOM = addedNodes[s];\n            const parentDOM = addedDOM.parentNode;\n            if (parentDOM != null && addedDOM.nodeName === 'BR' && !isManagedLineBreak(addedDOM, target, editor)) {\n              parentDOM.removeChild(addedDOM);\n            }\n          }\n        }\n\n        // Clear any of those removal mutations\n        observer.takeRecords();\n      }\n      if (selection !== null) {\n        if (shouldRevertSelection) {\n          selection.dirty = true;\n          $setSelection(selection);\n        }\n        if (IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n          selection.insertRawText(possibleTextForFirefoxPaste);\n        }\n      }\n    });\n  } finally {\n    isProcessingMutations = false;\n  }\n}\nfunction flushRootMutations(editor) {\n  const observer = editor._observer;\n  if (observer !== null) {\n    const mutations = observer.takeRecords();\n    $flushMutations$1(editor, mutations, observer);\n  }\n}\nfunction initMutationObserver(editor) {\n  initTextEntryListener(editor);\n  editor._observer = new MutationObserver((mutations, observer) => {\n    $flushMutations$1(editor, mutations, observer);\n  });\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $canSimpleTextNodesBeMerged(node1, node2) {\n  const node1Mode = node1.__mode;\n  const node1Format = node1.__format;\n  const node1Style = node1.__style;\n  const node2Mode = node2.__mode;\n  const node2Format = node2.__format;\n  const node2Style = node2.__style;\n  return (node1Mode === null || node1Mode === node2Mode) && (node1Format === null || node1Format === node2Format) && (node1Style === null || node1Style === node2Style);\n}\nfunction $mergeTextNodes(node1, node2) {\n  const writableNode1 = node1.mergeWithSibling(node2);\n  const normalizedNodes = getActiveEditor()._normalizedNodes;\n  normalizedNodes.add(node1.__key);\n  normalizedNodes.add(node2.__key);\n  return writableNode1;\n}\nfunction $normalizeTextNode(textNode) {\n  let node = textNode;\n  if (node.__text === '' && node.isSimpleText() && !node.isUnmergeable()) {\n    node.remove();\n    return;\n  }\n\n  // Backward\n  let previousNode;\n  while ((previousNode = node.getPreviousSibling()) !== null && $isTextNode(previousNode) && previousNode.isSimpleText() && !previousNode.isUnmergeable()) {\n    if (previousNode.__text === '') {\n      previousNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(previousNode, node)) {\n      node = $mergeTextNodes(previousNode, node);\n      break;\n    } else {\n      break;\n    }\n  }\n\n  // Forward\n  let nextNode;\n  while ((nextNode = node.getNextSibling()) !== null && $isTextNode(nextNode) && nextNode.isSimpleText() && !nextNode.isUnmergeable()) {\n    if (nextNode.__text === '') {\n      nextNode.remove();\n    } else if ($canSimpleTextNodesBeMerged(node, nextNode)) {\n      node = $mergeTextNodes(node, nextNode);\n      break;\n    } else {\n      break;\n    }\n  }\n}\nfunction $normalizeSelection(selection) {\n  $normalizePoint(selection.anchor);\n  $normalizePoint(selection.focus);\n  return selection;\n}\nfunction $normalizePoint(point) {\n  while (point.type === 'element') {\n    const node = point.getNode();\n    const offset = point.offset;\n    let nextNode;\n    let nextOffsetAtEnd;\n    if (offset === node.getChildrenSize()) {\n      nextNode = node.getChildAtIndex(offset - 1);\n      nextOffsetAtEnd = true;\n    } else {\n      nextNode = node.getChildAtIndex(offset);\n      nextOffsetAtEnd = false;\n    }\n    if ($isTextNode(nextNode)) {\n      point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getTextContentSize() : 0, 'text');\n      break;\n    } else if (!$isElementNode(nextNode)) {\n      break;\n    }\n    point.set(nextNode.__key, nextOffsetAtEnd ? nextNode.getChildrenSize() : 0, 'element');\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet keyCounter = 1;\nfunction generateRandomKey() {\n  return '' + keyCounter++;\n}\nfunction getRegisteredNodeOrThrow(editor, nodeType) {\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`registeredNode: Type ${nodeType} not found`);\n    }\n  }\n  return registeredNode;\n}\nconst scheduleMicroTask = typeof queueMicrotask === 'function' ? queueMicrotask : fn => {\n  // No window prefix intended (#1400)\n  Promise.resolve().then(fn);\n};\nfunction $isSelectionCapturedInDecorator(node) {\n  return $isDecoratorNode($getNearestNodeFromDOMNode(node));\n}\nfunction isSelectionCapturedInDecoratorInput(anchorDOM) {\n  const activeElement = document.activeElement;\n  if (activeElement === null) {\n    return false;\n  }\n  const nodeName = activeElement.nodeName;\n  return $isDecoratorNode($getNearestNodeFromDOMNode(anchorDOM)) && (nodeName === 'INPUT' || nodeName === 'TEXTAREA' || activeElement.contentEditable === 'true' &&\n  // @ts-ignore iternal field\n  activeElement.__lexicalEditor == null);\n}\nfunction isSelectionWithinEditor(editor, anchorDOM, focusDOM) {\n  const rootElement = editor.getRootElement();\n  try {\n    return rootElement !== null && rootElement.contains(anchorDOM) && rootElement.contains(focusDOM) &&\n    // Ignore if selection is within nested editor\n    anchorDOM !== null && !isSelectionCapturedInDecoratorInput(anchorDOM) && getNearestEditorFromDOMNode(anchorDOM) === editor;\n  } catch (error) {\n    return false;\n  }\n}\nfunction getNearestEditorFromDOMNode(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    // @ts-expect-error: internal field\n    const editor = currentNode.__lexicalEditor;\n    if (editor != null) {\n      return editor;\n    }\n    currentNode = getParentElement(currentNode);\n  }\n  return null;\n}\nfunction getTextDirection(text) {\n  if (RTL_REGEX.test(text)) {\n    return 'rtl';\n  }\n  if (LTR_REGEX.test(text)) {\n    return 'ltr';\n  }\n  return null;\n}\nfunction $isTokenOrSegmented(node) {\n  return node.isToken() || node.isSegmented();\n}\nfunction isDOMNodeLexicalTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE;\n}\nfunction getDOMTextNode(element) {\n  let node = element;\n  while (node != null) {\n    if (isDOMNodeLexicalTextNode(node)) {\n      return node;\n    }\n    node = node.firstChild;\n  }\n  return null;\n}\nfunction toggleTextFormatType(format, type, alignWithFormat) {\n  const activeFormat = TEXT_TYPE_TO_FORMAT[type];\n  if (alignWithFormat !== null && (format & activeFormat) === (alignWithFormat & activeFormat)) {\n    return format;\n  }\n  let newFormat = format ^ activeFormat;\n  if (type === 'subscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.superscript;\n  } else if (type === 'superscript') {\n    newFormat &= ~TEXT_TYPE_TO_FORMAT.subscript;\n  }\n  return newFormat;\n}\nfunction $isLeafNode(node) {\n  return $isTextNode(node) || $isLineBreakNode(node) || $isDecoratorNode(node);\n}\nfunction $setNodeKey(node, existingKey) {\n  if (existingKey != null) {\n    node.__key = existingKey;\n    return;\n  }\n  errorOnReadOnly();\n  errorOnInfiniteTransforms();\n  const editor = getActiveEditor();\n  const editorState = getActiveEditorState();\n  const key = generateRandomKey();\n  editorState._nodeMap.set(key, node);\n  // TODO Split this function into leaf/element\n  if ($isElementNode(node)) {\n    editor._dirtyElements.set(key, true);\n  } else {\n    editor._dirtyLeaves.add(key);\n  }\n  editor._cloneNotNeeded.add(key);\n  editor._dirtyType = HAS_DIRTY_NODES;\n  node.__key = key;\n}\nfunction internalMarkParentElementsAsDirty(parentKey, nodeMap, dirtyElements) {\n  let nextParentKey = parentKey;\n  while (nextParentKey !== null) {\n    if (dirtyElements.has(nextParentKey)) {\n      return;\n    }\n    const node = nodeMap.get(nextParentKey);\n    if (node === undefined) {\n      break;\n    }\n    dirtyElements.set(nextParentKey, false);\n    nextParentKey = node.__parent;\n  }\n}\nfunction removeFromParent(node) {\n  const oldParent = node.getParent();\n  if (oldParent !== null) {\n    const writableNode = node.getWritable();\n    const writableParent = oldParent.getWritable();\n    const prevSibling = node.getPreviousSibling();\n    const nextSibling = node.getNextSibling();\n    // TODO: this function duplicates a bunch of operations, can be simplified.\n    if (prevSibling === null) {\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableParent.__first = nextSibling.__key;\n        writableNextSibling.__prev = null;\n      } else {\n        writableParent.__first = null;\n      }\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      if (nextSibling !== null) {\n        const writableNextSibling = nextSibling.getWritable();\n        writableNextSibling.__prev = writablePrevSibling.__key;\n        writablePrevSibling.__next = writableNextSibling.__key;\n      } else {\n        writablePrevSibling.__next = null;\n      }\n      writableNode.__prev = null;\n    }\n    if (nextSibling === null) {\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writableParent.__last = prevSibling.__key;\n        writablePrevSibling.__next = null;\n      } else {\n        writableParent.__last = null;\n      }\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      if (prevSibling !== null) {\n        const writablePrevSibling = prevSibling.getWritable();\n        writablePrevSibling.__next = writableNextSibling.__key;\n        writableNextSibling.__prev = writablePrevSibling.__key;\n      } else {\n        writableNextSibling.__prev = null;\n      }\n      writableNode.__next = null;\n    }\n    writableParent.__size--;\n    writableNode.__parent = null;\n  }\n}\n\n// Never use this function directly! It will break\n// the cloning heuristic. Instead use node.getWritable().\nfunction internalMarkNodeAsDirty(node) {\n  errorOnInfiniteTransforms();\n  const latest = node.getLatest();\n  const parent = latest.__parent;\n  const editorState = getActiveEditorState();\n  const editor = getActiveEditor();\n  const nodeMap = editorState._nodeMap;\n  const dirtyElements = editor._dirtyElements;\n  if (parent !== null) {\n    internalMarkParentElementsAsDirty(parent, nodeMap, dirtyElements);\n  }\n  const key = latest.__key;\n  editor._dirtyType = HAS_DIRTY_NODES;\n  if ($isElementNode(node)) {\n    dirtyElements.set(key, true);\n  } else {\n    // TODO split internally MarkNodeAsDirty into two dedicated Element/leave functions\n    editor._dirtyLeaves.add(key);\n  }\n}\nfunction internalMarkSiblingsAsDirty(node) {\n  const previousNode = node.getPreviousSibling();\n  const nextNode = node.getNextSibling();\n  if (previousNode !== null) {\n    internalMarkNodeAsDirty(previousNode);\n  }\n  if (nextNode !== null) {\n    internalMarkNodeAsDirty(nextNode);\n  }\n}\nfunction $setCompositionKey(compositionKey) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  const previousCompositionKey = editor._compositionKey;\n  if (compositionKey !== previousCompositionKey) {\n    editor._compositionKey = compositionKey;\n    if (previousCompositionKey !== null) {\n      const node = $getNodeByKey(previousCompositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n    if (compositionKey !== null) {\n      const node = $getNodeByKey(compositionKey);\n      if (node !== null) {\n        node.getWritable();\n      }\n    }\n  }\n}\nfunction $getCompositionKey() {\n  if (isCurrentlyReadOnlyMode()) {\n    return null;\n  }\n  const editor = getActiveEditor();\n  return editor._compositionKey;\n}\nfunction $getNodeByKey(key, _editorState) {\n  const editorState = _editorState || getActiveEditorState();\n  const node = editorState._nodeMap.get(key);\n  if (node === undefined) {\n    return null;\n  }\n  return node;\n}\nfunction getNodeFromDOMNode(dom, editorState) {\n  const editor = getActiveEditor();\n  // @ts-ignore We intentionally add this to the Node.\n  const key = dom[`__lexicalKey_${editor._key}`];\n  if (key !== undefined) {\n    return $getNodeByKey(key, editorState);\n  }\n  return null;\n}\nfunction $getNearestNodeFromDOMNode(startingDOM, editorState) {\n  let dom = startingDOM;\n  while (dom != null) {\n    const node = getNodeFromDOMNode(dom, editorState);\n    if (node !== null) {\n      return node;\n    }\n    dom = getParentElement(dom);\n  }\n  return null;\n}\nfunction cloneDecorators(editor) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = Object.assign({}, currentDecorators);\n  editor._pendingDecorators = pendingDecorators;\n  return pendingDecorators;\n}\nfunction getEditorStateTextContent(editorState) {\n  return editorState.read(() => $getRoot().getTextContent());\n}\nfunction markAllNodesAsDirty(editor, type) {\n  // Mark all existing text nodes as dirty\n  updateEditor(editor, () => {\n    const editorState = getActiveEditorState();\n    if (editorState.isEmpty()) {\n      return;\n    }\n    if (type === 'root') {\n      $getRoot().markDirty();\n      return;\n    }\n    const nodeMap = editorState._nodeMap;\n    for (const [, node] of nodeMap) {\n      node.markDirty();\n    }\n  }, editor._pendingEditorState === null ? {\n    tag: 'history-merge'\n  } : undefined);\n}\nfunction $getRoot() {\n  return internalGetRoot(getActiveEditorState());\n}\nfunction internalGetRoot(editorState) {\n  return editorState._nodeMap.get('root');\n}\nfunction $setSelection(selection) {\n  errorOnReadOnly();\n  const editorState = getActiveEditorState();\n  if (selection !== null) {\n    {\n      if (Object.isFrozen(selection)) {\n        {\n          throw Error(`$setSelection called on frozen selection object. Ensure selection is cloned before passing in.`);\n        }\n      }\n    }\n    selection.dirty = true;\n    selection.setCachedNodes(null);\n  }\n  editorState._selection = selection;\n}\nfunction $flushMutations() {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  flushRootMutations(editor);\n}\nfunction getNodeFromDOM(dom) {\n  const editor = getActiveEditor();\n  const nodeKey = getNodeKeyFromDOM(dom, editor);\n  if (nodeKey === null) {\n    const rootElement = editor.getRootElement();\n    if (dom === rootElement) {\n      return $getNodeByKey('root');\n    }\n    return null;\n  }\n  return $getNodeByKey(nodeKey);\n}\nfunction getTextNodeOffset(node, moveSelectionToEnd) {\n  return moveSelectionToEnd ? node.getTextContentSize() : 0;\n}\nfunction getNodeKeyFromDOM(\n// Note that node here refers to a DOM Node, not an Lexical Node\ndom, editor) {\n  let node = dom;\n  while (node != null) {\n    // @ts-ignore We intentionally add this to the Node.\n    const key = node[`__lexicalKey_${editor._key}`];\n    if (key !== undefined) {\n      return key;\n    }\n    node = getParentElement(node);\n  }\n  return null;\n}\nfunction doesContainGrapheme(str) {\n  return /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g.test(str);\n}\nfunction getEditorsToPropagate(editor) {\n  const editorsToPropagate = [];\n  let currentEditor = editor;\n  while (currentEditor !== null) {\n    editorsToPropagate.push(currentEditor);\n    currentEditor = currentEditor._parentEditor;\n  }\n  return editorsToPropagate;\n}\nfunction createUID() {\n  return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n}\nfunction getAnchorTextFromDOM(anchorNode) {\n  if (anchorNode.nodeType === DOM_TEXT_TYPE) {\n    return anchorNode.nodeValue;\n  }\n  return null;\n}\nfunction $updateSelectedTextFromDOM(isCompositionEnd, editor, data) {\n  // Update the text content with the latest composition text\n  const domSelection = getDOMSelection(editor._window);\n  if (domSelection === null) {\n    return;\n  }\n  const anchorNode = domSelection.anchorNode;\n  let {\n    anchorOffset,\n    focusOffset\n  } = domSelection;\n  if (anchorNode !== null) {\n    let textContent = getAnchorTextFromDOM(anchorNode);\n    const node = $getNearestNodeFromDOMNode(anchorNode);\n    if (textContent !== null && $isTextNode(node)) {\n      // Data is intentionally truthy, as we check for boolean, null and empty string.\n      if (textContent === COMPOSITION_SUFFIX && data) {\n        const offset = data.length;\n        textContent = data;\n        anchorOffset = offset;\n        focusOffset = offset;\n      }\n      if (textContent !== null) {\n        $updateTextNodeFromDOMContent(node, textContent, anchorOffset, focusOffset, isCompositionEnd);\n      }\n    }\n  }\n}\nfunction $updateTextNodeFromDOMContent(textNode, textContent, anchorOffset, focusOffset, compositionEnd) {\n  let node = textNode;\n  if (node.isAttached() && (compositionEnd || !node.isDirty())) {\n    const isComposing = node.isComposing();\n    let normalizedTextContent = textContent;\n    if ((isComposing || compositionEnd) && textContent[textContent.length - 1] === COMPOSITION_SUFFIX) {\n      normalizedTextContent = textContent.slice(0, -1);\n    }\n    const prevTextContent = node.getTextContent();\n    if (compositionEnd || normalizedTextContent !== prevTextContent) {\n      if (normalizedTextContent === '') {\n        $setCompositionKey(null);\n        if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT) {\n          // For composition (mainly Android), we have to remove the node on a later update\n          const editor = getActiveEditor();\n          setTimeout(() => {\n            editor.update(() => {\n              if (node.isAttached()) {\n                node.remove();\n              }\n            });\n          }, 20);\n        } else {\n          node.remove();\n        }\n        return;\n      }\n      const parent = node.getParent();\n      const prevSelection = $getPreviousSelection();\n      const prevTextContentSize = node.getTextContentSize();\n      const compositionKey = $getCompositionKey();\n      const nodeKey = node.getKey();\n      if (node.isToken() || compositionKey !== null && nodeKey === compositionKey && !isComposing ||\n      // Check if character was added at the start or boundaries when not insertable, and we need\n      // to clear this input from occurring as that action wasn't permitted.\n      $isRangeSelection(prevSelection) && (parent !== null && !parent.canInsertTextBefore() && prevSelection.anchor.offset === 0 || prevSelection.anchor.key === textNode.__key && prevSelection.anchor.offset === 0 && !node.canInsertTextBefore() && !isComposing || prevSelection.focus.key === textNode.__key && prevSelection.focus.offset === prevTextContentSize && !node.canInsertTextAfter() && !isComposing)) {\n        node.markDirty();\n        return;\n      }\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || anchorOffset === null || focusOffset === null) {\n        node.setTextContent(normalizedTextContent);\n        return;\n      }\n      selection.setTextNodeRange(node, anchorOffset, node, focusOffset);\n      if (node.isSegmented()) {\n        const originalTextContent = node.getTextContent();\n        const replacement = $createTextNode(originalTextContent);\n        node.replace(replacement);\n        node = replacement;\n      }\n      node.setTextContent(normalizedTextContent);\n    }\n  }\n}\nfunction $previousSiblingDoesNotAcceptText(node) {\n  const previousSibling = node.getPreviousSibling();\n  return ($isTextNode(previousSibling) || $isElementNode(previousSibling) && previousSibling.isInline()) && !previousSibling.canInsertTextAfter();\n}\n\n// This function is connected to $shouldPreventDefaultAndInsertText and determines whether the\n// TextNode boundaries are writable or we should use the previous/next sibling instead. For example,\n// in the case of a LinkNode, boundaries are not writable.\nfunction $shouldInsertTextAfterOrBeforeTextNode(selection, node) {\n  if (node.isSegmented()) {\n    return true;\n  }\n  if (!selection.isCollapsed()) {\n    return false;\n  }\n  const offset = selection.anchor.offset;\n  const parent = node.getParentOrThrow();\n  const isToken = node.isToken();\n  if (offset === 0) {\n    return !node.canInsertTextBefore() || !parent.canInsertTextBefore() || isToken || $previousSiblingDoesNotAcceptText(node);\n  } else if (offset === node.getTextContentSize()) {\n    return !node.canInsertTextAfter() || !parent.canInsertTextAfter() || isToken;\n  } else {\n    return false;\n  }\n}\nfunction isTab(keyCode, altKey, ctrlKey, metaKey) {\n  return keyCode === 9 && !altKey && !ctrlKey && !metaKey;\n}\nfunction isBold(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 66 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isItalic(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 73 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isUnderline(keyCode, altKey, metaKey, ctrlKey) {\n  return keyCode === 85 && !altKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isParagraph(keyCode, shiftKey) {\n  return isReturn(keyCode) && !shiftKey;\n}\nfunction isLineBreak(keyCode, shiftKey) {\n  return isReturn(keyCode) && shiftKey;\n}\n\n// Inserts a new line after the selection\n\nfunction isOpenLineBreak(keyCode, ctrlKey) {\n  // 79 = KeyO\n  return IS_APPLE && ctrlKey && keyCode === 79;\n}\nfunction isDeleteWordBackward(keyCode, altKey, ctrlKey) {\n  return isBackspace(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteWordForward(keyCode, altKey, ctrlKey) {\n  return isDelete(keyCode) && (IS_APPLE ? altKey : ctrlKey);\n}\nfunction isDeleteLineBackward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isBackspace(keyCode);\n}\nfunction isDeleteLineForward(keyCode, metaKey) {\n  return IS_APPLE && metaKey && isDelete(keyCode);\n}\nfunction isDeleteBackward(keyCode, altKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    if (altKey || metaKey) {\n      return false;\n    }\n    return isBackspace(keyCode) || keyCode === 72 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isBackspace(keyCode);\n}\nfunction isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  if (IS_APPLE) {\n    if (shiftKey || altKey || metaKey) {\n      return false;\n    }\n    return isDelete(keyCode) || keyCode === 68 && ctrlKey;\n  }\n  if (ctrlKey || altKey || metaKey) {\n    return false;\n  }\n  return isDelete(keyCode);\n}\nfunction isUndo(keyCode, shiftKey, metaKey, ctrlKey) {\n  return keyCode === 90 && !shiftKey && controlOrMeta(metaKey, ctrlKey);\n}\nfunction isRedo(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return keyCode === 90 && metaKey && shiftKey;\n  }\n  return keyCode === 89 && ctrlKey || keyCode === 90 && ctrlKey && shiftKey;\n}\nfunction isCopy(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 67) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isCut(keyCode, shiftKey, metaKey, ctrlKey) {\n  if (shiftKey) {\n    return false;\n  }\n  if (keyCode === 88) {\n    return IS_APPLE ? metaKey : ctrlKey;\n  }\n  return false;\n}\nfunction isArrowLeft(keyCode) {\n  return keyCode === 37;\n}\nfunction isArrowRight(keyCode) {\n  return keyCode === 39;\n}\nfunction isArrowUp(keyCode) {\n  return keyCode === 38;\n}\nfunction isArrowDown(keyCode) {\n  return keyCode === 40;\n}\nfunction isMoveBackward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowLeft(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveForward(keyCode, ctrlKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !ctrlKey && !metaKey && !altKey;\n}\nfunction isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey) {\n  return isArrowRight(keyCode) && !altKey && !shiftKey && (ctrlKey || metaKey);\n}\nfunction isMoveUp(keyCode, ctrlKey, metaKey) {\n  return isArrowUp(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isMoveDown(keyCode, ctrlKey, metaKey) {\n  return isArrowDown(keyCode) && !ctrlKey && !metaKey;\n}\nfunction isModifier(ctrlKey, shiftKey, altKey, metaKey) {\n  return ctrlKey || shiftKey || altKey || metaKey;\n}\nfunction isSpace(keyCode) {\n  return keyCode === 32;\n}\nfunction controlOrMeta(metaKey, ctrlKey) {\n  if (IS_APPLE) {\n    return metaKey;\n  }\n  return ctrlKey;\n}\nfunction isReturn(keyCode) {\n  return keyCode === 13;\n}\nfunction isBackspace(keyCode) {\n  return keyCode === 8;\n}\nfunction isEscape(keyCode) {\n  return keyCode === 27;\n}\nfunction isDelete(keyCode) {\n  return keyCode === 46;\n}\nfunction isSelectAll(keyCode, metaKey, ctrlKey) {\n  return keyCode === 65 && controlOrMeta(metaKey, ctrlKey);\n}\nfunction $selectAll() {\n  const root = $getRoot();\n  const selection = root.select(0, root.getChildrenSize());\n  $setSelection($normalizeSelection(selection));\n}\nfunction getCachedClassNameArray(classNamesTheme, classNameThemeType) {\n  if (classNamesTheme.__lexicalClassNameCache === undefined) {\n    classNamesTheme.__lexicalClassNameCache = {};\n  }\n  const classNamesCache = classNamesTheme.__lexicalClassNameCache;\n  const cachedClassNames = classNamesCache[classNameThemeType];\n  if (cachedClassNames !== undefined) {\n    return cachedClassNames;\n  }\n  const classNames = classNamesTheme[classNameThemeType];\n  // As we're using classList, we need\n  // to handle className tokens that have spaces.\n  // The easiest way to do this to convert the\n  // className tokens to an array that can be\n  // applied to classList.add()/remove().\n  if (typeof classNames === 'string') {\n    const classNamesArr = classNames.split(' ');\n    classNamesCache[classNameThemeType] = classNamesArr;\n    return classNamesArr;\n  }\n  return classNames;\n}\nfunction setMutatedNode(mutatedNodes, registeredNodes, mutationListeners, node, mutation) {\n  if (mutationListeners.size === 0) {\n    return;\n  }\n  const nodeType = node.__type;\n  const nodeKey = node.__key;\n  const registeredNode = registeredNodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Type ${nodeType} not in registeredNodes`);\n    }\n  }\n  const klass = registeredNode.klass;\n  let mutatedNodesByType = mutatedNodes.get(klass);\n  if (mutatedNodesByType === undefined) {\n    mutatedNodesByType = new Map();\n    mutatedNodes.set(klass, mutatedNodesByType);\n  }\n  const prevMutation = mutatedNodesByType.get(nodeKey);\n  // If the node has already been \"destroyed\", yet we are\n  // re-making it, then this means a move likely happened.\n  // We should change the mutation to be that of \"updated\"\n  // instead.\n  const isMove = prevMutation === 'destroyed' && mutation === 'created';\n  if (prevMutation === undefined || isMove) {\n    mutatedNodesByType.set(nodeKey, isMove ? 'updated' : mutation);\n  }\n}\nfunction $nodesOfType(klass) {\n  const editorState = getActiveEditorState();\n  const readOnly = editorState._readOnly;\n  const klassType = klass.getType();\n  const nodes = editorState._nodeMap;\n  const nodesOfType = [];\n  for (const [, node] of nodes) {\n    if (node instanceof klass && node.__type === klassType && (readOnly || node.isAttached())) {\n      nodesOfType.push(node);\n    }\n  }\n  return nodesOfType;\n}\nfunction resolveElement(element, isBackward, focusOffset) {\n  const parent = element.getParent();\n  let offset = focusOffset;\n  let block = element;\n  if (parent !== null) {\n    if (isBackward && focusOffset === 0) {\n      offset = block.getIndexWithinParent();\n      block = parent;\n    } else if (!isBackward && focusOffset === block.getChildrenSize()) {\n      offset = block.getIndexWithinParent() + 1;\n      block = parent;\n    }\n  }\n  return block.getChildAtIndex(isBackward ? offset - 1 : offset);\n}\nfunction $getAdjacentNode(focus, isBackward) {\n  const focusOffset = focus.offset;\n  if (focus.type === 'element') {\n    const block = focus.getNode();\n    return resolveElement(block, isBackward, focusOffset);\n  } else {\n    const focusNode = focus.getNode();\n    if (isBackward && focusOffset === 0 || !isBackward && focusOffset === focusNode.getTextContentSize()) {\n      const possibleNode = isBackward ? focusNode.getPreviousSibling() : focusNode.getNextSibling();\n      if (possibleNode === null) {\n        return resolveElement(focusNode.getParentOrThrow(), isBackward, focusNode.getIndexWithinParent() + (isBackward ? 0 : 1));\n      }\n      return possibleNode;\n    }\n  }\n  return null;\n}\nfunction isFirefoxClipboardEvents(editor) {\n  const event = getWindow(editor).event;\n  const inputType = event && event.inputType;\n  return inputType === 'insertFromPaste' || inputType === 'insertFromPasteAsQuotation';\n}\nfunction dispatchCommand(editor, command, payload) {\n  return triggerCommandListeners(editor, command, payload);\n}\nfunction $textContentRequiresDoubleLinebreakAtEnd(node) {\n  return !$isRootNode(node) && !node.isLastChild() && !node.isInline();\n}\nfunction getElementByKeyOrThrow(editor, key) {\n  const element = editor._keyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\nfunction getParentElement(node) {\n  const parentElement = node.assignedSlot || node.parentElement;\n  return parentElement !== null && parentElement.nodeType === 11 ? parentElement.host : parentElement;\n}\nfunction scrollIntoViewIfNeeded(editor, selectionRect, rootElement) {\n  const doc = rootElement.ownerDocument;\n  const defaultView = doc.defaultView;\n  if (defaultView === null) {\n    return;\n  }\n  let {\n    top: currentTop,\n    bottom: currentBottom\n  } = selectionRect;\n  let targetTop = 0;\n  let targetBottom = 0;\n  let element = rootElement;\n  while (element !== null) {\n    const isBodyElement = element === doc.body;\n    if (isBodyElement) {\n      targetTop = 0;\n      targetBottom = getWindow(editor).innerHeight;\n    } else {\n      const targetRect = element.getBoundingClientRect();\n      targetTop = targetRect.top;\n      targetBottom = targetRect.bottom;\n    }\n    let diff = 0;\n    if (currentTop < targetTop) {\n      diff = -(targetTop - currentTop);\n    } else if (currentBottom > targetBottom) {\n      diff = currentBottom - targetBottom;\n    }\n    if (diff !== 0) {\n      if (isBodyElement) {\n        // Only handles scrolling of Y axis\n        defaultView.scrollBy(0, diff);\n      } else {\n        const scrollTop = element.scrollTop;\n        element.scrollTop += diff;\n        const yOffset = element.scrollTop - scrollTop;\n        currentTop -= yOffset;\n        currentBottom -= yOffset;\n      }\n    }\n    if (isBodyElement) {\n      break;\n    }\n    element = getParentElement(element);\n  }\n}\nfunction $hasUpdateTag(tag) {\n  const editor = getActiveEditor();\n  return editor._updateTags.has(tag);\n}\nfunction $addUpdateTag(tag) {\n  errorOnReadOnly();\n  const editor = getActiveEditor();\n  editor._updateTags.add(tag);\n}\nfunction $maybeMoveChildrenSelectionToParent(parentNode) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection) || !$isElementNode(parentNode)) {\n    return selection;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if ($hasAncestor(anchorNode, parentNode)) {\n    anchor.set(parentNode.__key, 0, 'element');\n  }\n  if ($hasAncestor(focusNode, parentNode)) {\n    focus.set(parentNode.__key, 0, 'element');\n  }\n  return selection;\n}\nfunction $hasAncestor(child, targetNode) {\n  let parent = child.getParent();\n  while (parent !== null) {\n    if (parent.is(targetNode)) {\n      return true;\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}\nfunction getDefaultView(domElem) {\n  const ownerDoc = domElem.ownerDocument;\n  return ownerDoc && ownerDoc.defaultView || null;\n}\nfunction getWindow(editor) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    {\n      throw Error(`window object not found`);\n    }\n  }\n  return windowObj;\n}\nfunction $isInlineElementOrDecoratorNode(node) {\n  return $isElementNode(node) && node.isInline() || $isDecoratorNode(node) && node.isInline();\n}\nfunction $getNearestRootOrShadowRoot(node) {\n  let parent = node.getParentOrThrow();\n  while (parent !== null) {\n    if ($isRootOrShadowRoot(parent)) {\n      return parent;\n    }\n    parent = parent.getParentOrThrow();\n  }\n  return parent;\n}\nfunction $isRootOrShadowRoot(node) {\n  return $isRootNode(node) || $isElementNode(node) && node.isShadowRoot();\n}\nfunction $copyNode(node) {\n  const copy = node.constructor.clone(node);\n  $setNodeKey(copy, null);\n  // @ts-expect-error\n  return copy;\n}\nfunction $applyNodeReplacement(node) {\n  const editor = getActiveEditor();\n  const nodeType = node.constructor.getType();\n  const registeredNode = editor._nodes.get(nodeType);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`$initializeNode failed. Ensure node has been registered to the editor. You can do this by passing the node class via the \"nodes\" array in the editor config.`);\n    }\n  }\n  const replaceFunc = registeredNode.replace;\n  if (replaceFunc !== null) {\n    const replacementNode = replaceFunc(node);\n    if (!(replacementNode instanceof node.constructor)) {\n      {\n        throw Error(`$initializeNode failed. Ensure replacement node is a subclass of the original node.`);\n      }\n    }\n    return replacementNode;\n  }\n  return node;\n}\nfunction errorOnInsertTextNodeOnRoot(node, insertNode) {\n  const parentNode = node.getParent();\n  if ($isRootNode(parentNode) && !$isElementNode(insertNode) && !$isDecoratorNode(insertNode)) {\n    {\n      throw Error(`Only element or decorator nodes can be inserted in to the root node`);\n    }\n  }\n}\nfunction createBlockCursorElement(editorConfig) {\n  const theme = editorConfig.theme;\n  const element = document.createElement('div');\n  element.contentEditable = 'false';\n  element.setAttribute('data-lexical-cursor', 'true');\n  let blockCursorTheme = theme.blockCursor;\n  if (blockCursorTheme !== undefined) {\n    if (typeof blockCursorTheme === 'string') {\n      const classNamesArr = blockCursorTheme.split(' ');\n      // @ts-expect-error: intentional\n      blockCursorTheme = theme.blockCursor = classNamesArr;\n    }\n    if (blockCursorTheme !== undefined) {\n      element.classList.add(...blockCursorTheme);\n    }\n  }\n  return element;\n}\nfunction needsBlockCursor(node) {\n  return ($isDecoratorNode(node) || $isElementNode(node) && !node.canBeEmpty()) && !node.isInline();\n}\nfunction removeDOMBlockCursorElement(blockCursorElement, editor, rootElement) {\n  rootElement.style.removeProperty('caret-color');\n  editor._blockCursorElement = null;\n  const parentElement = blockCursorElement.parentElement;\n  if (parentElement !== null) {\n    parentElement.removeChild(blockCursorElement);\n  }\n}\nfunction updateDOMBlockCursorElement(editor, rootElement, nextSelection) {\n  let blockCursorElement = editor._blockCursorElement;\n  if ($isRangeSelection(nextSelection) && nextSelection.isCollapsed() && nextSelection.anchor.type === 'element' && rootElement.contains(document.activeElement)) {\n    const anchor = nextSelection.anchor;\n    const elementNode = anchor.getNode();\n    const offset = anchor.offset;\n    const elementNodeSize = elementNode.getChildrenSize();\n    let isBlockCursor = false;\n    let insertBeforeElement = null;\n    if (offset === elementNodeSize) {\n      const child = elementNode.getChildAtIndex(offset - 1);\n      if (needsBlockCursor(child)) {\n        isBlockCursor = true;\n      }\n    } else {\n      const child = elementNode.getChildAtIndex(offset);\n      if (needsBlockCursor(child)) {\n        const sibling = child.getPreviousSibling();\n        if (sibling === null || needsBlockCursor(sibling)) {\n          isBlockCursor = true;\n          insertBeforeElement = editor.getElementByKey(child.__key);\n        }\n      }\n    }\n    if (isBlockCursor) {\n      const elementDOM = editor.getElementByKey(elementNode.__key);\n      if (blockCursorElement === null) {\n        editor._blockCursorElement = blockCursorElement = createBlockCursorElement(editor._config);\n      }\n      rootElement.style.caretColor = 'transparent';\n      if (insertBeforeElement === null) {\n        elementDOM.appendChild(blockCursorElement);\n      } else {\n        elementDOM.insertBefore(blockCursorElement, insertBeforeElement);\n      }\n      return;\n    }\n  }\n  // Remove cursor\n  if (blockCursorElement !== null) {\n    removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n  }\n}\nfunction getDOMSelection(targetWindow) {\n  return !CAN_USE_DOM ? null : (targetWindow || window).getSelection();\n}\nfunction $splitNode(node, offset) {\n  let startNode = node.getChildAtIndex(offset);\n  if (startNode == null) {\n    startNode = node;\n  }\n  if (!!$isRootOrShadowRoot(node)) {\n    throw Error(`Can not call $splitNode() on root element`);\n  }\n  const recurse = currentNode => {\n    const parent = currentNode.getParentOrThrow();\n    const isParentRoot = $isRootOrShadowRoot(parent);\n    // The node we start split from (leaf) is moved, but its recursive\n    // parents are copied to create separate tree\n    const nodeToMove = currentNode === startNode && !isParentRoot ? currentNode : $copyNode(currentNode);\n    if (isParentRoot) {\n      if (!($isElementNode(currentNode) && $isElementNode(nodeToMove))) {\n        throw Error(`Children of a root must be ElementNode`);\n      }\n      currentNode.insertAfter(nodeToMove);\n      return [currentNode, nodeToMove, nodeToMove];\n    } else {\n      const [leftTree, rightTree, newParent] = recurse(parent);\n      const nextSiblings = currentNode.getNextSiblings();\n      newParent.append(nodeToMove, ...nextSiblings);\n      return [leftTree, rightTree, nodeToMove];\n    }\n  };\n  const [leftTree, rightTree] = recurse(startNode);\n  return [leftTree, rightTree];\n}\n\n/**\n * @param x - The element being tested\n * @returns Returns true if x is an HTML anchor tag, false otherwise\n */\nfunction isHTMLAnchorElement(x) {\n  return isHTMLElement(x) && x.tagName === 'A';\n}\n\n/**\n * @param x - The element being testing\n * @returns Returns true if x is an HTML element, false otherwise.\n */\nfunction isHTMLElement(x) {\n  // @ts-ignore-next-line - strict check on nodeType here should filter out non-Element EventTarget implementors\n  return x.nodeType === 1;\n}\n\n/**\n * This function is for internal use of the library.\n * Please do not use it as it may change in the future.\n */\nfunction INTERNAL_$isBlock(node) {\n  if ($isDecoratorNode(node) && !node.isInline()) {\n    return true;\n  }\n  if (!$isElementNode(node) || $isRootOrShadowRoot(node)) {\n    return false;\n  }\n  const firstChild = node.getFirstChild();\n  const isLeafElement = firstChild === null || $isLineBreakNode(firstChild) || $isTextNode(firstChild) || firstChild.isInline();\n  return !node.isInline() && node.canBeEmpty() !== false && isLeafElement;\n}\nfunction $getAncestor(node, predicate) {\n  let parent = node;\n  while (parent !== null && parent.getParent() !== null && !predicate(parent)) {\n    parent = parent.getParentOrThrow();\n  }\n  return predicate(parent) ? parent : null;\n}\n\n/**\n * Utility function for accessing current active editor instance.\n * @returns Current active editor\n */\nfunction $getEditor() {\n  return getActiveEditor();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $garbageCollectDetachedDecorators(editor, pendingEditorState) {\n  const currentDecorators = editor._decorators;\n  const pendingDecorators = editor._pendingDecorators;\n  let decorators = pendingDecorators || currentDecorators;\n  const nodeMap = pendingEditorState._nodeMap;\n  let key;\n  for (key in decorators) {\n    if (!nodeMap.has(key)) {\n      if (decorators === currentDecorators) {\n        decorators = cloneDecorators(editor);\n      }\n      delete decorators[key];\n    }\n  }\n}\nfunction $garbageCollectDetachedDeepChildNodes(node, parentKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes) {\n  let child = node.getFirstChild();\n  while (child !== null) {\n    const childKey = child.__key;\n    // TODO Revise condition below, redundant? LexicalNode already cleans up children when moving Nodes\n    if (child.__parent === parentKey) {\n      if ($isElementNode(child)) {\n        $garbageCollectDetachedDeepChildNodes(child, childKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyNodes);\n      }\n\n      // If we have created a node and it was dereferenced, then also\n      // remove it from out dirty nodes Set.\n      if (!prevNodeMap.has(childKey)) {\n        dirtyNodes.delete(childKey);\n      }\n      nodeMapDelete.push(childKey);\n    }\n    child = child.getNextSibling();\n  }\n}\nfunction $garbageCollectDetachedNodes(prevEditorState, editorState, dirtyLeaves, dirtyElements) {\n  const prevNodeMap = prevEditorState._nodeMap;\n  const nodeMap = editorState._nodeMap;\n  // Store dirtyElements in a queue for later deletion; deleting dirty subtrees too early will\n  // hinder accessing .__next on child nodes\n  const nodeMapDelete = [];\n  for (const [nodeKey] of dirtyElements) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined) {\n      // Garbage collect node and its children if they exist\n      if (!node.isAttached()) {\n        if ($isElementNode(node)) {\n          $garbageCollectDetachedDeepChildNodes(node, nodeKey, prevNodeMap, nodeMap, nodeMapDelete, dirtyElements);\n        }\n        // If we have created a node and it was dereferenced, then also\n        // remove it from out dirty nodes Set.\n        if (!prevNodeMap.has(nodeKey)) {\n          dirtyElements.delete(nodeKey);\n        }\n        nodeMapDelete.push(nodeKey);\n      }\n    }\n  }\n  for (const nodeKey of nodeMapDelete) {\n    nodeMap.delete(nodeKey);\n  }\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if (node !== undefined && !node.isAttached()) {\n      if (!prevNodeMap.has(nodeKey)) {\n        dirtyLeaves.delete(nodeKey);\n      }\n      nodeMap.delete(nodeKey);\n    }\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet subTreeTextContent = '';\nlet subTreeDirectionedTextContent = '';\nlet editorTextContent = '';\nlet activeEditorConfig;\nlet activeEditor$1;\nlet activeEditorNodes;\nlet treatAllNodesAsDirty = false;\nlet activeEditorStateReadOnly = false;\nlet activeMutationListeners;\nlet activeTextDirection = null;\nlet activeDirtyElements;\nlet activeDirtyLeaves;\nlet activePrevNodeMap;\nlet activeNextNodeMap;\nlet activePrevKeyToDOMMap;\nlet mutatedNodes;\nfunction destroyNode(key, parentDOM) {\n  const node = activePrevNodeMap.get(key);\n  if (parentDOM !== null) {\n    const dom = getPrevElementByKeyOrThrow(key);\n    if (dom.parentNode === parentDOM) {\n      parentDOM.removeChild(dom);\n    }\n  }\n\n  // This logic is really important, otherwise we will leak DOM nodes\n  // when their corresponding LexicalNodes are removed from the editor state.\n  if (!activeNextNodeMap.has(key)) {\n    activeEditor$1._keyToDOMMap.delete(key);\n  }\n  if ($isElementNode(node)) {\n    const children = createChildrenArray(node, activePrevNodeMap);\n    destroyChildren(children, 0, children.length - 1, null);\n  }\n  if (node !== undefined) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'destroyed');\n  }\n}\nfunction destroyChildren(children, _startIndex, endIndex, dom) {\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    const child = children[startIndex];\n    if (child !== undefined) {\n      destroyNode(child, dom);\n    }\n  }\n}\nfunction setTextAlign(domStyle, value) {\n  domStyle.setProperty('text-align', value);\n}\nconst DEFAULT_INDENT_VALUE = '40px';\nfunction setElementIndent(dom, indent) {\n  const indentClassName = activeEditorConfig.theme.indent;\n  if (typeof indentClassName === 'string') {\n    const elementHasClassName = dom.classList.contains(indentClassName);\n    if (indent > 0 && !elementHasClassName) {\n      dom.classList.add(indentClassName);\n    } else if (indent < 1 && elementHasClassName) {\n      dom.classList.remove(indentClassName);\n    }\n  }\n  const indentationBaseValue = getComputedStyle(dom).getPropertyValue('--lexical-indent-base-value') || DEFAULT_INDENT_VALUE;\n  dom.style.setProperty('padding-inline-start', indent === 0 ? '' : `calc(${indent} * ${indentationBaseValue})`);\n}\nfunction setElementFormat(dom, format) {\n  const domStyle = dom.style;\n  if (format === 0) {\n    setTextAlign(domStyle, '');\n  } else if (format === IS_ALIGN_LEFT) {\n    setTextAlign(domStyle, 'left');\n  } else if (format === IS_ALIGN_CENTER) {\n    setTextAlign(domStyle, 'center');\n  } else if (format === IS_ALIGN_RIGHT) {\n    setTextAlign(domStyle, 'right');\n  } else if (format === IS_ALIGN_JUSTIFY) {\n    setTextAlign(domStyle, 'justify');\n  } else if (format === IS_ALIGN_START) {\n    setTextAlign(domStyle, 'start');\n  } else if (format === IS_ALIGN_END) {\n    setTextAlign(domStyle, 'end');\n  }\n}\nfunction createNode(key, parentDOM, insertDOM) {\n  const node = activeNextNodeMap.get(key);\n  if (node === undefined) {\n    {\n      throw Error(`createNode: node does not exist in nodeMap`);\n    }\n  }\n  const dom = node.createDOM(activeEditorConfig, activeEditor$1);\n  storeDOMWithKey(key, dom, activeEditor$1);\n\n  // This helps preserve the text, and stops spell check tools from\n  // merging or break the spans (which happens if they are missing\n  // this attribute).\n  if ($isTextNode(node)) {\n    dom.setAttribute('data-lexical-text', 'true');\n  } else if ($isDecoratorNode(node)) {\n    dom.setAttribute('data-lexical-decorator', 'true');\n  }\n  if ($isElementNode(node)) {\n    const indent = node.__indent;\n    const childrenSize = node.__size;\n    if (indent !== 0) {\n      setElementIndent(dom, indent);\n    }\n    if (childrenSize !== 0) {\n      const endIndex = childrenSize - 1;\n      const children = createChildrenArray(node, activeNextNodeMap);\n      createChildrenWithDirection(children, endIndex, node, dom);\n    }\n    const format = node.__format;\n    if (format !== 0) {\n      setElementFormat(dom, format);\n    }\n    if (!node.isInline()) {\n      reconcileElementTerminatingLineBreak(null, node, dom);\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(node)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = node.getTextContent();\n    if ($isDecoratorNode(node)) {\n      const decorator = node.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n      // Decorators are always non editable\n      dom.contentEditable = 'false';\n    } else if ($isTextNode(node)) {\n      if (!node.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (parentDOM !== null) {\n    if (insertDOM != null) {\n      parentDOM.insertBefore(dom, insertDOM);\n    } else {\n      // @ts-expect-error: internal field\n      const possibleLineBreak = parentDOM.__lexicalLineBreak;\n      if (possibleLineBreak != null) {\n        parentDOM.insertBefore(dom, possibleLineBreak);\n      } else {\n        parentDOM.appendChild(dom);\n      }\n    }\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(node);\n  }\n  setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, node, 'created');\n  return dom;\n}\nfunction createChildrenWithDirection(children, endIndex, element, dom) {\n  const previousSubTreeDirectionedTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  createChildren(children, element, 0, endIndex, dom, null);\n  reconcileBlockDirection(element, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionedTextContent;\n}\nfunction createChildren(children, element, _startIndex, endIndex, dom, insertDOM) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  subTreeTextContent = '';\n  let startIndex = _startIndex;\n  for (; startIndex <= endIndex; ++startIndex) {\n    createNode(children[startIndex], dom, insertDOM);\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(element)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction isLastChildLineBreakOrDecorator(childKey, nodeMap) {\n  const node = nodeMap.get(childKey);\n  return $isLineBreakNode(node) || $isDecoratorNode(node) && node.isInline();\n}\n\n// If we end an element with a LineBreakNode, then we need to add an additional <br>\nfunction reconcileElementTerminatingLineBreak(prevElement, nextElement, dom) {\n  const prevLineBreak = prevElement !== null && (prevElement.__size === 0 || isLastChildLineBreakOrDecorator(prevElement.__last, activePrevNodeMap));\n  const nextLineBreak = nextElement.__size === 0 || isLastChildLineBreakOrDecorator(nextElement.__last, activeNextNodeMap);\n  if (prevLineBreak) {\n    if (!nextLineBreak) {\n      // @ts-expect-error: internal field\n      const element = dom.__lexicalLineBreak;\n      if (element != null) {\n        dom.removeChild(element);\n      }\n\n      // @ts-expect-error: internal field\n      dom.__lexicalLineBreak = null;\n    }\n  } else if (nextLineBreak) {\n    const element = document.createElement('br');\n    // @ts-expect-error: internal field\n    dom.__lexicalLineBreak = element;\n    dom.appendChild(element);\n  }\n}\nfunction reconcileBlockDirection(element, dom) {\n  const previousSubTreeDirectionTextContent =\n  // @ts-expect-error: internal field\n  dom.__lexicalDirTextContent;\n  // @ts-expect-error: internal field\n  const previousDirection = dom.__lexicalDir;\n  if (previousSubTreeDirectionTextContent !== subTreeDirectionedTextContent || previousDirection !== activeTextDirection) {\n    const hasEmptyDirectionedTextContent = subTreeDirectionedTextContent === '';\n    const direction = hasEmptyDirectionedTextContent ? activeTextDirection : getTextDirection(subTreeDirectionedTextContent);\n    if (direction !== previousDirection) {\n      const classList = dom.classList;\n      const theme = activeEditorConfig.theme;\n      let previousDirectionTheme = previousDirection !== null ? theme[previousDirection] : undefined;\n      let nextDirectionTheme = direction !== null ? theme[direction] : undefined;\n\n      // Remove the old theme classes if they exist\n      if (previousDirectionTheme !== undefined) {\n        if (typeof previousDirectionTheme === 'string') {\n          const classNamesArr = previousDirectionTheme.split(' ');\n          previousDirectionTheme = theme[previousDirection] = classNamesArr;\n        }\n\n        // @ts-ignore: intentional\n        classList.remove(...previousDirectionTheme);\n      }\n      if (direction === null || hasEmptyDirectionedTextContent && direction === 'ltr') {\n        // Remove direction\n        dom.removeAttribute('dir');\n      } else {\n        // Apply the new theme classes if they exist\n        if (nextDirectionTheme !== undefined) {\n          if (typeof nextDirectionTheme === 'string') {\n            const classNamesArr = nextDirectionTheme.split(' ');\n            // @ts-expect-error: intentional\n            nextDirectionTheme = theme[direction] = classNamesArr;\n          }\n          if (nextDirectionTheme !== undefined) {\n            classList.add(...nextDirectionTheme);\n          }\n        }\n\n        // Update direction\n        dom.dir = direction;\n      }\n      if (!activeEditorStateReadOnly) {\n        const writableNode = element.getWritable();\n        writableNode.__dir = direction;\n      }\n    }\n    activeTextDirection = direction;\n    // @ts-expect-error: internal field\n    dom.__lexicalDirTextContent = subTreeDirectionedTextContent;\n    // @ts-expect-error: internal field\n    dom.__lexicalDir = direction;\n  }\n}\nfunction reconcileChildrenWithDirection(prevElement, nextElement, dom) {\n  const previousSubTreeDirectionTextContent = subTreeDirectionedTextContent;\n  subTreeDirectionedTextContent = '';\n  reconcileChildren(prevElement, nextElement, dom);\n  reconcileBlockDirection(nextElement, dom);\n  subTreeDirectionedTextContent = previousSubTreeDirectionTextContent;\n}\nfunction createChildrenArray(element, nodeMap) {\n  const children = [];\n  let nodeKey = element.__first;\n  while (nodeKey !== null) {\n    const node = nodeMap.get(nodeKey);\n    if (node === undefined) {\n      {\n        throw Error(`createChildrenArray: node does not exist in nodeMap`);\n      }\n    }\n    children.push(nodeKey);\n    nodeKey = node.__next;\n  }\n  return children;\n}\nfunction reconcileChildren(prevElement, nextElement, dom) {\n  const previousSubTreeTextContent = subTreeTextContent;\n  const prevChildrenSize = prevElement.__size;\n  const nextChildrenSize = nextElement.__size;\n  subTreeTextContent = '';\n  if (prevChildrenSize === 1 && nextChildrenSize === 1) {\n    const prevFirstChildKey = prevElement.__first;\n    const nextFrstChildKey = nextElement.__first;\n    if (prevFirstChildKey === nextFrstChildKey) {\n      reconcileNode(prevFirstChildKey, dom);\n    } else {\n      const lastDOM = getPrevElementByKeyOrThrow(prevFirstChildKey);\n      const replacementDOM = createNode(nextFrstChildKey, null, null);\n      dom.replaceChild(replacementDOM, lastDOM);\n      destroyNode(prevFirstChildKey, null);\n    }\n  } else {\n    const prevChildren = createChildrenArray(prevElement, activePrevNodeMap);\n    const nextChildren = createChildrenArray(nextElement, activeNextNodeMap);\n    if (prevChildrenSize === 0) {\n      if (nextChildrenSize !== 0) {\n        createChildren(nextChildren, nextElement, 0, nextChildrenSize - 1, dom, null);\n      }\n    } else if (nextChildrenSize === 0) {\n      if (prevChildrenSize !== 0) {\n        // @ts-expect-error: internal field\n        const lexicalLineBreak = dom.__lexicalLineBreak;\n        const canUseFastPath = lexicalLineBreak == null;\n        destroyChildren(prevChildren, 0, prevChildrenSize - 1, canUseFastPath ? null : dom);\n        if (canUseFastPath) {\n          // Fast path for removing DOM nodes\n          dom.textContent = '';\n        }\n      }\n    } else {\n      reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenSize, nextChildrenSize, dom);\n    }\n  }\n  if ($textContentRequiresDoubleLinebreakAtEnd(nextElement)) {\n    subTreeTextContent += DOUBLE_LINE_BREAK;\n  }\n\n  // @ts-expect-error: internal field\n  dom.__lexicalTextContent = subTreeTextContent;\n  subTreeTextContent = previousSubTreeTextContent + subTreeTextContent;\n}\nfunction reconcileNode(key, parentDOM) {\n  const prevNode = activePrevNodeMap.get(key);\n  let nextNode = activeNextNodeMap.get(key);\n  if (prevNode === undefined || nextNode === undefined) {\n    {\n      throw Error(`reconcileNode: prevNode or nextNode does not exist in nodeMap`);\n    }\n  }\n  const isDirty = treatAllNodesAsDirty || activeDirtyLeaves.has(key) || activeDirtyElements.has(key);\n  const dom = getElementByKeyOrThrow(activeEditor$1, key);\n\n  // If the node key points to the same instance in both states\n  // and isn't dirty, we just update the text content cache\n  // and return the existing DOM Node.\n  if (prevNode === nextNode && !isDirty) {\n    if ($isElementNode(prevNode)) {\n      // @ts-expect-error: internal field\n      const previousSubTreeTextContent = dom.__lexicalTextContent;\n      if (previousSubTreeTextContent !== undefined) {\n        subTreeTextContent += previousSubTreeTextContent;\n        editorTextContent += previousSubTreeTextContent;\n      }\n\n      // @ts-expect-error: internal field\n      const previousSubTreeDirectionTextContent = dom.__lexicalDirTextContent;\n      if (previousSubTreeDirectionTextContent !== undefined) {\n        subTreeDirectionedTextContent += previousSubTreeDirectionTextContent;\n      }\n    } else {\n      const text = prevNode.getTextContent();\n      if ($isTextNode(prevNode) && !prevNode.isDirectionless()) {\n        subTreeDirectionedTextContent += text;\n      }\n      editorTextContent += text;\n      subTreeTextContent += text;\n    }\n    return dom;\n  }\n  // If the node key doesn't point to the same instance in both maps,\n  // it means it were cloned. If they're also dirty, we mark them as mutated.\n  if (prevNode !== nextNode && isDirty) {\n    setMutatedNode(mutatedNodes, activeEditorNodes, activeMutationListeners, nextNode, 'updated');\n  }\n\n  // Update node. If it returns true, we need to unmount and re-create the node\n  if (nextNode.updateDOM(prevNode, dom, activeEditorConfig)) {\n    const replacementDOM = createNode(key, null, null);\n    if (parentDOM === null) {\n      {\n        throw Error(`reconcileNode: parentDOM is null`);\n      }\n    }\n    parentDOM.replaceChild(replacementDOM, dom);\n    destroyNode(key, null);\n    return replacementDOM;\n  }\n  if ($isElementNode(prevNode) && $isElementNode(nextNode)) {\n    // Reconcile element children\n    const nextIndent = nextNode.__indent;\n    if (nextIndent !== prevNode.__indent) {\n      setElementIndent(dom, nextIndent);\n    }\n    const nextFormat = nextNode.__format;\n    if (nextFormat !== prevNode.__format) {\n      setElementFormat(dom, nextFormat);\n    }\n    if (isDirty) {\n      reconcileChildrenWithDirection(prevNode, nextNode, dom);\n      if (!$isRootNode(nextNode) && !nextNode.isInline()) {\n        reconcileElementTerminatingLineBreak(prevNode, nextNode, dom);\n      }\n    }\n    if ($textContentRequiresDoubleLinebreakAtEnd(nextNode)) {\n      subTreeTextContent += DOUBLE_LINE_BREAK;\n      editorTextContent += DOUBLE_LINE_BREAK;\n    }\n  } else {\n    const text = nextNode.getTextContent();\n    if ($isDecoratorNode(nextNode)) {\n      const decorator = nextNode.decorate(activeEditor$1, activeEditorConfig);\n      if (decorator !== null) {\n        reconcileDecorator(key, decorator);\n      }\n    } else if ($isTextNode(nextNode) && !nextNode.isDirectionless()) {\n      // Handle text content, for LTR, LTR cases.\n      subTreeDirectionedTextContent += text;\n    }\n    subTreeTextContent += text;\n    editorTextContent += text;\n  }\n  if (!activeEditorStateReadOnly && $isRootNode(nextNode) && nextNode.__cachedText !== editorTextContent) {\n    // Cache the latest text content.\n    const nextRootNode = nextNode.getWritable();\n    nextRootNode.__cachedText = editorTextContent;\n    nextNode = nextRootNode;\n  }\n  {\n    // Freeze the node in DEV to prevent accidental mutations\n    Object.freeze(nextNode);\n  }\n  return dom;\n}\nfunction reconcileDecorator(key, decorator) {\n  let pendingDecorators = activeEditor$1._pendingDecorators;\n  const currentDecorators = activeEditor$1._decorators;\n  if (pendingDecorators === null) {\n    if (currentDecorators[key] === decorator) {\n      return;\n    }\n    pendingDecorators = cloneDecorators(activeEditor$1);\n  }\n  pendingDecorators[key] = decorator;\n}\nfunction getFirstChild(element) {\n  return element.firstChild;\n}\nfunction getNextSibling(element) {\n  let nextSibling = element.nextSibling;\n  if (nextSibling !== null && nextSibling === activeEditor$1._blockCursorElement) {\n    nextSibling = nextSibling.nextSibling;\n  }\n  return nextSibling;\n}\nfunction reconcileNodeChildren(nextElement, prevChildren, nextChildren, prevChildrenLength, nextChildrenLength, dom) {\n  const prevEndIndex = prevChildrenLength - 1;\n  const nextEndIndex = nextChildrenLength - 1;\n  let prevChildrenSet;\n  let nextChildrenSet;\n  let siblingDOM = getFirstChild(dom);\n  let prevIndex = 0;\n  let nextIndex = 0;\n  while (prevIndex <= prevEndIndex && nextIndex <= nextEndIndex) {\n    const prevKey = prevChildren[prevIndex];\n    const nextKey = nextChildren[nextIndex];\n    if (prevKey === nextKey) {\n      siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n      prevIndex++;\n      nextIndex++;\n    } else {\n      if (prevChildrenSet === undefined) {\n        prevChildrenSet = new Set(prevChildren);\n      }\n      if (nextChildrenSet === undefined) {\n        nextChildrenSet = new Set(nextChildren);\n      }\n      const nextHasPrevKey = nextChildrenSet.has(prevKey);\n      const prevHasNextKey = prevChildrenSet.has(nextKey);\n      if (!nextHasPrevKey) {\n        // Remove prev\n        siblingDOM = getNextSibling(getPrevElementByKeyOrThrow(prevKey));\n        destroyNode(prevKey, dom);\n        prevIndex++;\n      } else if (!prevHasNextKey) {\n        // Create next\n        createNode(nextKey, dom, siblingDOM);\n        nextIndex++;\n      } else {\n        // Move next\n        const childDOM = getElementByKeyOrThrow(activeEditor$1, nextKey);\n        if (childDOM === siblingDOM) {\n          siblingDOM = getNextSibling(reconcileNode(nextKey, dom));\n        } else {\n          if (siblingDOM != null) {\n            dom.insertBefore(childDOM, siblingDOM);\n          } else {\n            dom.appendChild(childDOM);\n          }\n          reconcileNode(nextKey, dom);\n        }\n        prevIndex++;\n        nextIndex++;\n      }\n    }\n  }\n  const appendNewChildren = prevIndex > prevEndIndex;\n  const removeOldChildren = nextIndex > nextEndIndex;\n  if (appendNewChildren && !removeOldChildren) {\n    const previousNode = nextChildren[nextEndIndex + 1];\n    const insertDOM = previousNode === undefined ? null : activeEditor$1.getElementByKey(previousNode);\n    createChildren(nextChildren, nextElement, nextIndex, nextEndIndex, dom, insertDOM);\n  } else if (removeOldChildren && !appendNewChildren) {\n    destroyChildren(prevChildren, prevIndex, prevEndIndex, dom);\n  }\n}\nfunction reconcileRoot(prevEditorState, nextEditorState, editor, dirtyType, dirtyElements, dirtyLeaves) {\n  // We cache text content to make retrieval more efficient.\n  // The cache must be rebuilt during reconciliation to account for any changes.\n  subTreeTextContent = '';\n  editorTextContent = '';\n  subTreeDirectionedTextContent = '';\n  // Rather than pass around a load of arguments through the stack recursively\n  // we instead set them as bindings within the scope of the module.\n  treatAllNodesAsDirty = dirtyType === FULL_RECONCILE;\n  activeTextDirection = null;\n  activeEditor$1 = editor;\n  activeEditorConfig = editor._config;\n  activeEditorNodes = editor._nodes;\n  activeMutationListeners = activeEditor$1._listeners.mutation;\n  activeDirtyElements = dirtyElements;\n  activeDirtyLeaves = dirtyLeaves;\n  activePrevNodeMap = prevEditorState._nodeMap;\n  activeNextNodeMap = nextEditorState._nodeMap;\n  activeEditorStateReadOnly = nextEditorState._readOnly;\n  activePrevKeyToDOMMap = new Map(editor._keyToDOMMap);\n  // We keep track of mutated nodes so we can trigger mutation\n  // listeners later in the update cycle.\n  const currentMutatedNodes = new Map();\n  mutatedNodes = currentMutatedNodes;\n  reconcileNode('root', null);\n  // We don't want a bunch of void checks throughout the scope\n  // so instead we make it seem that these values are always set.\n  // We also want to make sure we clear them down, otherwise we\n  // can leak memory.\n  // @ts-ignore\n  activeEditor$1 = undefined;\n  // @ts-ignore\n  activeEditorNodes = undefined;\n  // @ts-ignore\n  activeDirtyElements = undefined;\n  // @ts-ignore\n  activeDirtyLeaves = undefined;\n  // @ts-ignore\n  activePrevNodeMap = undefined;\n  // @ts-ignore\n  activeNextNodeMap = undefined;\n  // @ts-ignore\n  activeEditorConfig = undefined;\n  // @ts-ignore\n  activePrevKeyToDOMMap = undefined;\n  // @ts-ignore\n  mutatedNodes = undefined;\n  return currentMutatedNodes;\n}\nfunction storeDOMWithKey(key, dom, editor) {\n  const keyToDOMMap = editor._keyToDOMMap;\n  // @ts-ignore We intentionally add this to the Node.\n  dom['__lexicalKey_' + editor._key] = key;\n  keyToDOMMap.set(key, dom);\n}\nfunction getPrevElementByKeyOrThrow(key) {\n  const element = activePrevKeyToDOMMap.get(key);\n  if (element === undefined) {\n    {\n      throw Error(`Reconciliation: could not find DOM element for node key ${key}`);\n    }\n  }\n  return element;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst PASS_THROUGH_COMMAND = Object.freeze({});\nconst ANDROID_COMPOSITION_LATENCY = 30;\nconst rootElementEvents = [['keydown', onKeyDown], ['pointerdown', onPointerDown], ['compositionstart', onCompositionStart], ['compositionend', onCompositionEnd], ['input', onInput], ['click', onClick], ['cut', PASS_THROUGH_COMMAND], ['copy', PASS_THROUGH_COMMAND], ['dragstart', PASS_THROUGH_COMMAND], ['dragover', PASS_THROUGH_COMMAND], ['dragend', PASS_THROUGH_COMMAND], ['paste', PASS_THROUGH_COMMAND], ['focus', PASS_THROUGH_COMMAND], ['blur', PASS_THROUGH_COMMAND], ['drop', PASS_THROUGH_COMMAND]];\nif (CAN_USE_BEFORE_INPUT) {\n  rootElementEvents.push(['beforeinput', (event, editor) => onBeforeInput(event, editor)]);\n}\nlet lastKeyDownTimeStamp = 0;\nlet lastKeyCode = 0;\nlet lastBeforeInputInsertTextTimeStamp = 0;\nlet unprocessedBeforeInputData = null;\nlet rootElementsRegistered = 0;\nlet isSelectionChangeFromDOMUpdate = false;\nlet isSelectionChangeFromMouseDown = false;\nlet isInsertLineBreak = false;\nlet isFirefoxEndingComposition = false;\nlet collapsedSelectionFormat = [0, '', 0, 'root', 0];\n\n// This function is used to determine if Lexical should attempt to override\n// the default browser behavior for insertion of text and use its own internal\n// heuristics. This is an extremely important function, and makes much of Lexical\n// work as intended between different browsers and across word, line and character\n// boundary/formats. It also is important for text replacement, node schemas and\n// composition mechanics.\n\nfunction $shouldPreventDefaultAndInsertText(selection, domTargetRange, text, timeStamp, isBeforeInput) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const editor = getActiveEditor();\n  const domSelection = getDOMSelection(editor._window);\n  const domAnchorNode = domSelection !== null ? domSelection.anchorNode : null;\n  const anchorKey = anchor.key;\n  const backingAnchorElement = editor.getElementByKey(anchorKey);\n  const textLength = text.length;\n  return anchorKey !== focus.key ||\n  // If we're working with a non-text node.\n  !$isTextNode(anchorNode) ||\n  // If we are replacing a range with a single character or grapheme, and not composing.\n  (!isBeforeInput && (!CAN_USE_BEFORE_INPUT ||\n  // We check to see if there has been\n  // a recent beforeinput event for \"textInput\". If there has been one in the last\n  // 50ms then we proceed as normal. However, if there is not, then this is likely\n  // a dangling `input` event caused by execCommand('insertText').\n  lastBeforeInputInsertTextTimeStamp < timeStamp + 50) || anchorNode.isDirty() && textLength < 2 || doesContainGrapheme(text)) && anchor.offset !== focus.offset && !anchorNode.isComposing() ||\n  // Any non standard text node.\n  $isTokenOrSegmented(anchorNode) ||\n  // If the text length is more than a single character and we're either\n  // dealing with this in \"beforeinput\" or where the node has already recently\n  // been changed (thus is dirty).\n  anchorNode.isDirty() && textLength > 1 ||\n  // If the DOM selection element is not the same as the backing node during beforeinput.\n  (isBeforeInput || !CAN_USE_BEFORE_INPUT) && backingAnchorElement !== null && !anchorNode.isComposing() && domAnchorNode !== getDOMTextNode(backingAnchorElement) ||\n  // If TargetRange is not the same as the DOM selection; browser trying to edit random parts\n  // of the editor.\n  domSelection !== null && domTargetRange !== null && (!domTargetRange.collapsed || domTargetRange.startContainer !== domSelection.anchorNode || domTargetRange.startOffset !== domSelection.anchorOffset) ||\n  // Check if we're changing from bold to italics, or some other format.\n  anchorNode.getFormat() !== selection.format || anchorNode.getStyle() !== selection.style ||\n  // One last set of heuristics to check against.\n  $shouldInsertTextAfterOrBeforeTextNode(selection, anchorNode);\n}\nfunction shouldSkipSelectionChange(domNode, offset) {\n  return domNode !== null && domNode.nodeValue !== null && domNode.nodeType === DOM_TEXT_TYPE && offset !== 0 && offset !== domNode.nodeValue.length;\n}\nfunction onSelectionChange(domSelection, editor, isActive) {\n  const {\n    anchorNode: anchorDOM,\n    anchorOffset,\n    focusNode: focusDOM,\n    focusOffset\n  } = domSelection;\n  if (isSelectionChangeFromDOMUpdate) {\n    isSelectionChangeFromDOMUpdate = false;\n\n    // If native DOM selection is on a DOM element, then\n    // we should continue as usual, as Lexical's selection\n    // may have normalized to a better child. If the DOM\n    // element is a text node, we can safely apply this\n    // optimization and skip the selection change entirely.\n    // We also need to check if the offset is at the boundary,\n    // because in this case, we might need to normalize to a\n    // sibling instead.\n    if (shouldSkipSelectionChange(anchorDOM, anchorOffset) && shouldSkipSelectionChange(focusDOM, focusOffset)) {\n      return;\n    }\n  }\n  updateEditor(editor, () => {\n    // Non-active editor don't need any extra logic for selection, it only needs update\n    // to reconcile selection (set it to null) to ensure that only one editor has non-null selection.\n    if (!isActive) {\n      $setSelection(null);\n      return;\n    }\n    if (!isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return;\n    }\n    const selection = $getSelection();\n\n    // Update the selection format\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      if (selection.isCollapsed()) {\n        // Badly interpreted range selection when collapsed - #1482\n        if (domSelection.type === 'Range' && domSelection.anchorNode === domSelection.focusNode) {\n          selection.dirty = true;\n        }\n\n        // If we have marked a collapsed selection format, and we're\n        // within the given time range – then attempt to use that format\n        // instead of getting the format from the anchor node.\n        const windowEvent = getWindow(editor).event;\n        const currentTimeStamp = windowEvent ? windowEvent.timeStamp : performance.now();\n        const [lastFormat, lastStyle, lastOffset, lastKey, timeStamp] = collapsedSelectionFormat;\n        const root = $getRoot();\n        const isRootTextContentEmpty = editor.isComposing() === false && root.getTextContent() === '';\n        if (currentTimeStamp < timeStamp + 200 && anchor.offset === lastOffset && anchor.key === lastKey) {\n          selection.format = lastFormat;\n          selection.style = lastStyle;\n        } else {\n          if (anchor.type === 'text') {\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Point.getNode() must return TextNode when type is text`);\n            }\n            selection.format = anchorNode.getFormat();\n            selection.style = anchorNode.getStyle();\n          } else if (anchor.type === 'element' && !isRootTextContentEmpty) {\n            selection.format = 0;\n            selection.style = '';\n          }\n        }\n      } else {\n        const anchorKey = anchor.key;\n        const focus = selection.focus;\n        const focusKey = focus.key;\n        const nodes = selection.getNodes();\n        const nodesLength = nodes.length;\n        const isBackward = selection.isBackward();\n        const startOffset = isBackward ? focusOffset : anchorOffset;\n        const endOffset = isBackward ? anchorOffset : focusOffset;\n        const startKey = isBackward ? focusKey : anchorKey;\n        const endKey = isBackward ? anchorKey : focusKey;\n        let combinedFormat = IS_ALL_FORMATTING;\n        let hasTextNodes = false;\n        for (let i = 0; i < nodesLength; i++) {\n          const node = nodes[i];\n          const textContentSize = node.getTextContentSize();\n          if ($isTextNode(node) && textContentSize !== 0 &&\n          // Exclude empty text nodes at boundaries resulting from user's selection\n          !(i === 0 && node.__key === startKey && startOffset === textContentSize || i === nodesLength - 1 && node.__key === endKey && endOffset === 0)) {\n            // TODO: what about style?\n            hasTextNodes = true;\n            combinedFormat &= node.getFormat();\n            if (combinedFormat === 0) {\n              break;\n            }\n          }\n        }\n        selection.format = hasTextNodes ? combinedFormat : 0;\n      }\n    }\n    dispatchCommand(editor, SELECTION_CHANGE_COMMAND, undefined);\n  });\n}\n\n// This is a work-around is mainly Chrome specific bug where if you select\n// the contents of an empty block, you cannot easily unselect anything.\n// This results in a tiny selection box that looks buggy/broken. This can\n// also help other browsers when selection might \"appear\" lost, when it\n// really isn't.\nfunction onClick(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const domSelection = getDOMSelection(editor._window);\n    const lastSelection = $getPreviousSelection();\n    if (domSelection) {\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const anchorNode = anchor.getNode();\n        if (anchor.type === 'element' && anchor.offset === 0 && selection.isCollapsed() && !$isRootNode(anchorNode) && $getRoot().getChildrenSize() === 1 && anchorNode.getTopLevelElementOrThrow().isEmpty() && lastSelection !== null && selection.is(lastSelection)) {\n          domSelection.removeAllRanges();\n          selection.dirty = true;\n        } else if (event.detail === 3 && !selection.isCollapsed()) {\n          // Tripple click causing selection to overflow into the nearest element. In that\n          // case visually it looks like a single element content is selected, focus node\n          // is actually at the beginning of the next element (if present) and any manipulations\n          // with selection (formatting) are affecting second element as well\n          const focus = selection.focus;\n          const focusNode = focus.getNode();\n          if (anchorNode !== focusNode) {\n            if ($isElementNode(anchorNode)) {\n              anchorNode.select(0);\n            } else {\n              anchorNode.getParentOrThrow().select(0);\n            }\n          }\n        }\n      } else if (event.pointerType === 'touch') {\n        // This is used to update the selection on touch devices when the user clicks on text after a\n        // node selection. See isSelectionChangeFromMouseDown for the inverse\n        const domAnchorNode = domSelection.anchorNode;\n        if (domAnchorNode !== null) {\n          const nodeType = domAnchorNode.nodeType;\n          // If the user is attempting to click selection back onto text, then\n          // we should attempt create a range selection.\n          // When we click on an empty paragraph node or the end of a paragraph that ends\n          // with an image/poll, the nodeType will be ELEMENT_NODE\n          if (nodeType === DOM_ELEMENT_TYPE || nodeType === DOM_TEXT_TYPE) {\n            const newSelection = internalCreateRangeSelection(lastSelection, domSelection, editor, event);\n            $setSelection(newSelection);\n          }\n        }\n      }\n    }\n    dispatchCommand(editor, CLICK_COMMAND, event);\n  });\n}\nfunction onPointerDown(event, editor) {\n  // TODO implement text drag & drop\n  const target = event.target;\n  const pointerType = event.pointerType;\n  if (target instanceof Node && pointerType !== 'touch') {\n    updateEditor(editor, () => {\n      // Drag & drop should not recompute selection until mouse up; otherwise the initially\n      // selected content is lost.\n      if (!$isSelectionCapturedInDecorator(target)) {\n        isSelectionChangeFromMouseDown = true;\n      }\n    });\n  }\n}\nfunction getTargetRange(event) {\n  if (!event.getTargetRanges) {\n    return null;\n  }\n  const targetRanges = event.getTargetRanges();\n  if (targetRanges.length === 0) {\n    return null;\n  }\n  return targetRanges[0];\n}\nfunction $canRemoveText(anchorNode, focusNode) {\n  return anchorNode !== focusNode || $isElementNode(anchorNode) || $isElementNode(focusNode) || !anchorNode.isToken() || !focusNode.isToken();\n}\nfunction isPossiblyAndroidKeyPress(timeStamp) {\n  return lastKeyCode === 229 && timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY;\n}\nfunction onBeforeInput(event, editor) {\n  const inputType = event.inputType;\n  const targetRange = getTargetRange(event);\n\n  // We let the browser do its own thing for composition.\n  if (inputType === 'deleteCompositionText' ||\n  // If we're pasting in FF, we shouldn't get this event\n  // as the `paste` event should have triggered, unless the\n  // user has dom.event.clipboardevents.enabled disabled in\n  // about:config. In that case, we need to process the\n  // pasted content in the DOM mutation phase.\n  IS_FIREFOX && isFirefoxClipboardEvents(editor)) {\n    return;\n  } else if (inputType === 'insertCompositionText') {\n    return;\n  }\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if (inputType === 'deleteContentBackward') {\n      if (selection === null) {\n        // Use previous selection\n        const prevSelection = $getPreviousSelection();\n        if (!$isRangeSelection(prevSelection)) {\n          return;\n        }\n        $setSelection(prevSelection.clone());\n      }\n      if ($isRangeSelection(selection)) {\n        // Used for handling backspace in Android.\n        if (IS_ANDROID) {\n          $setCompositionKey(selection.anchor.key);\n        }\n        if (isPossiblyAndroidKeyPress(event.timeStamp) && editor.isComposing() && selection.anchor.key === selection.focus.key) {\n          $setCompositionKey(null);\n          lastKeyDownTimeStamp = 0;\n          // Fixes an Android bug where selection flickers when backspacing\n          setTimeout(() => {\n            updateEditor(editor, () => {\n              $setCompositionKey(null);\n            });\n          }, ANDROID_COMPOSITION_LATENCY);\n          if ($isRangeSelection(selection)) {\n            const anchorNode = selection.anchor.getNode();\n            anchorNode.markDirty();\n            selection.format = anchorNode.getFormat();\n            if (!$isTextNode(anchorNode)) {\n              throw Error(`Anchor node must be a TextNode`);\n            }\n            selection.style = anchorNode.getStyle();\n          }\n          const selectedText = selection.anchor.getNode().getTextContent();\n          if (selectedText.length <= 1) {\n            event.preventDefault();\n            dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n          }\n        } else {\n          $setCompositionKey(null);\n          event.preventDefault();\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n        }\n        return;\n      }\n    }\n    if (!$isRangeSelection(selection)) {\n      return;\n    }\n    const data = event.data;\n\n    // This represents the case when two beforeinput events are triggered at the same time (without a\n    // full event loop ending at input). This happens with MacOS with the default keyboard settings,\n    // a combination of autocorrection + autocapitalization.\n    // Having Lexical run everything in controlled mode would fix the issue without additional code\n    // but this would kill the massive performance win from the most common typing event.\n    // Alternatively, when this happens we can prematurely update our EditorState based on the DOM\n    // content, a job that would usually be the input event's responsibility.\n    if (unprocessedBeforeInputData !== null) {\n      $updateSelectedTextFromDOM(false, editor, unprocessedBeforeInputData);\n    }\n    if ((!selection.dirty || unprocessedBeforeInputData !== null) && selection.isCollapsed() && !$isRootNode(selection.anchor.getNode()) && targetRange !== null) {\n      selection.applyDOMRange(targetRange);\n    }\n    unprocessedBeforeInputData = null;\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    const anchorNode = anchor.getNode();\n    const focusNode = focus.getNode();\n    if (inputType === 'insertText' || inputType === 'insertTranspose') {\n      if (data === '\\n') {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n      } else if (data === DOUBLE_LINE_BREAK) {\n        event.preventDefault();\n        dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n      } else if (data == null && event.dataTransfer) {\n        // Gets around a Safari text replacement bug.\n        const text = event.dataTransfer.getData('text/plain');\n        event.preventDefault();\n        selection.insertRawText(text);\n      } else if (data != null && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, true)) {\n        event.preventDefault();\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      } else {\n        unprocessedBeforeInputData = data;\n      }\n      lastBeforeInputInsertTextTimeStamp = event.timeStamp;\n      return;\n    }\n\n    // Prevent the browser from carrying out\n    // the input event, so we can control the\n    // output.\n    event.preventDefault();\n    switch (inputType) {\n      case 'insertFromYank':\n      case 'insertFromDrop':\n      case 'insertReplacementText':\n        {\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertFromComposition':\n        {\n          // This is the end of composition\n          $setCompositionKey(null);\n          dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, event);\n          break;\n        }\n      case 'insertLineBreak':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n          dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          break;\n        }\n      case 'insertParagraph':\n        {\n          // Used for Android\n          $setCompositionKey(null);\n\n          // Safari does not provide the type \"insertLineBreak\".\n          // So instead, we need to infer it from the keyboard event.\n          // We do not apply this logic to iOS to allow newline auto-capitalization\n          // work without creating linebreaks when pressing Enter\n          if (isInsertLineBreak && !IS_IOS) {\n            isInsertLineBreak = false;\n            dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, false);\n          } else {\n            dispatchCommand(editor, INSERT_PARAGRAPH_COMMAND, undefined);\n          }\n          break;\n        }\n      case 'insertFromPaste':\n      case 'insertFromPasteAsQuotation':\n        {\n          dispatchCommand(editor, PASTE_COMMAND, event);\n          break;\n        }\n      case 'deleteByComposition':\n        {\n          if ($canRemoveText(anchorNode, focusNode)) {\n            dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          }\n          break;\n        }\n      case 'deleteByDrag':\n      case 'deleteByCut':\n        {\n          dispatchCommand(editor, REMOVE_TEXT_COMMAND, event);\n          break;\n        }\n      case 'deleteContent':\n        {\n          dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n          break;\n        }\n      case 'deleteWordBackward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n          break;\n        }\n      case 'deleteWordForward':\n        {\n          dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n          break;\n        }\n      case 'deleteHardLineBackward':\n      case 'deleteSoftLineBackward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n          break;\n        }\n      case 'deleteContentForward':\n      case 'deleteHardLineForward':\n      case 'deleteSoftLineForward':\n        {\n          dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n          break;\n        }\n      case 'formatStrikeThrough':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'strikethrough');\n          break;\n        }\n      case 'formatBold':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n          break;\n        }\n      case 'formatItalic':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n          break;\n        }\n      case 'formatUnderline':\n        {\n          dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n          break;\n        }\n      case 'historyUndo':\n        {\n          dispatchCommand(editor, UNDO_COMMAND, undefined);\n          break;\n        }\n      case 'historyRedo':\n        {\n          dispatchCommand(editor, REDO_COMMAND, undefined);\n          break;\n        }\n      // NO-OP\n    }\n  });\n}\n\nfunction onInput(event, editor) {\n  // We don't want the onInput to bubble, in the case of nested editors.\n  event.stopPropagation();\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    const data = event.data;\n    const targetRange = getTargetRange(event);\n    if (data != null && $isRangeSelection(selection) && $shouldPreventDefaultAndInsertText(selection, targetRange, data, event.timeStamp, false)) {\n      // Given we're over-riding the default behavior, we will need\n      // to ensure to disable composition before dispatching the\n      // insertText command for when changing the sequence for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data);\n        isFirefoxEndingComposition = false;\n      }\n      const anchor = selection.anchor;\n      const anchorNode = anchor.getNode();\n      const domSelection = getDOMSelection(editor._window);\n      if (domSelection === null) {\n        return;\n      }\n      const offset = anchor.offset;\n      // If the content is the same as inserted, then don't dispatch an insertion.\n      // Given onInput doesn't take the current selection (it uses the previous)\n      // we can compare that against what the DOM currently says.\n      if (!CAN_USE_BEFORE_INPUT || selection.isCollapsed() || !$isTextNode(anchorNode) || domSelection.anchorNode === null || anchorNode.getTextContent().slice(0, offset) + data + anchorNode.getTextContent().slice(offset + selection.focus.offset) !== getAnchorTextFromDOM(domSelection.anchorNode)) {\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, data);\n      }\n      const textLength = data.length;\n\n      // Another hack for FF, as it's possible that the IME is still\n      // open, even though compositionend has already fired (sigh).\n      if (IS_FIREFOX && textLength > 1 && event.inputType === 'insertCompositionText' && !editor.isComposing()) {\n        selection.anchor.offset -= textLength;\n      }\n\n      // This ensures consistency on Android.\n      if (!IS_SAFARI && !IS_IOS && !IS_APPLE_WEBKIT && editor.isComposing()) {\n        lastKeyDownTimeStamp = 0;\n        $setCompositionKey(null);\n      }\n    } else {\n      const characterData = data !== null ? data : undefined;\n      $updateSelectedTextFromDOM(false, editor, characterData);\n\n      // onInput always fires after onCompositionEnd for FF.\n      if (isFirefoxEndingComposition) {\n        onCompositionEndImpl(editor, data || undefined);\n        isFirefoxEndingComposition = false;\n      }\n    }\n\n    // Also flush any other mutations that might have occurred\n    // since the change.\n    $flushMutations();\n  });\n  unprocessedBeforeInputData = null;\n}\nfunction onCompositionStart(event, editor) {\n  updateEditor(editor, () => {\n    const selection = $getSelection();\n    if ($isRangeSelection(selection) && !editor.isComposing()) {\n      const anchor = selection.anchor;\n      const node = selection.anchor.getNode();\n      $setCompositionKey(anchor.key);\n      if (\n      // If it has been 30ms since the last keydown, then we should\n      // apply the empty space heuristic. We can't do this for Safari,\n      // as the keydown fires after composition start.\n      event.timeStamp < lastKeyDownTimeStamp + ANDROID_COMPOSITION_LATENCY ||\n      // FF has issues around composing multibyte characters, so we also\n      // need to invoke the empty space heuristic below.\n      anchor.type === 'element' || !selection.isCollapsed() || node.getFormat() !== selection.format || $isTextNode(node) && node.getStyle() !== selection.style) {\n        // We insert a zero width character, ready for the composition\n        // to get inserted into the new node we create. If\n        // we don't do this, Safari will fail on us because\n        // there is no text node matching the selection.\n        dispatchCommand(editor, CONTROLLED_TEXT_INSERTION_COMMAND, COMPOSITION_START_CHAR);\n      }\n    }\n  });\n}\nfunction onCompositionEndImpl(editor, data) {\n  const compositionKey = editor._compositionKey;\n  $setCompositionKey(null);\n\n  // Handle termination of composition.\n  if (compositionKey !== null && data != null) {\n    // Composition can sometimes move to an adjacent DOM node when backspacing.\n    // So check for the empty case.\n    if (data === '') {\n      const node = $getNodeByKey(compositionKey);\n      const textNode = getDOMTextNode(editor.getElementByKey(compositionKey));\n      if (textNode !== null && textNode.nodeValue !== null && $isTextNode(node)) {\n        $updateTextNodeFromDOMContent(node, textNode.nodeValue, null, null, true);\n      }\n      return;\n    }\n\n    // Composition can sometimes be that of a new line. In which case, we need to\n    // handle that accordingly.\n    if (data[data.length - 1] === '\\n') {\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        // If the last character is a line break, we also need to insert\n        // a line break.\n        const focus = selection.focus;\n        selection.anchor.set(focus.key, focus.offset, focus.type);\n        dispatchCommand(editor, KEY_ENTER_COMMAND, null);\n        return;\n      }\n    }\n  }\n  $updateSelectedTextFromDOM(true, editor, data);\n}\nfunction onCompositionEnd(event, editor) {\n  // Firefox fires onCompositionEnd before onInput, but Chrome/Webkit,\n  // fire onInput before onCompositionEnd. To ensure the sequence works\n  // like Chrome/Webkit we use the isFirefoxEndingComposition flag to\n  // defer handling of onCompositionEnd in Firefox till we have processed\n  // the logic in onInput.\n  if (IS_FIREFOX) {\n    isFirefoxEndingComposition = true;\n  } else {\n    updateEditor(editor, () => {\n      onCompositionEndImpl(editor, event.data);\n    });\n  }\n}\nfunction onKeyDown(event, editor) {\n  lastKeyDownTimeStamp = event.timeStamp;\n  lastKeyCode = event.keyCode;\n  if (editor.isComposing()) {\n    return;\n  }\n  const {\n    keyCode,\n    shiftKey,\n    ctrlKey,\n    metaKey,\n    altKey\n  } = event;\n  if (dispatchCommand(editor, KEY_DOWN_COMMAND, event)) {\n    return;\n  }\n  if (isMoveForward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_RIGHT_COMMAND, event);\n  } else if (isMoveToEnd(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_END, event);\n  } else if (isMoveBackward(keyCode, ctrlKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_LEFT_COMMAND, event);\n  } else if (isMoveToStart(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, MOVE_TO_START, event);\n  } else if (isMoveUp(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_UP_COMMAND, event);\n  } else if (isMoveDown(keyCode, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_ARROW_DOWN_COMMAND, event);\n  } else if (isLineBreak(keyCode, shiftKey)) {\n    isInsertLineBreak = true;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isSpace(keyCode)) {\n    dispatchCommand(editor, KEY_SPACE_COMMAND, event);\n  } else if (isOpenLineBreak(keyCode, ctrlKey)) {\n    event.preventDefault();\n    isInsertLineBreak = true;\n    dispatchCommand(editor, INSERT_LINE_BREAK_COMMAND, true);\n  } else if (isParagraph(keyCode, shiftKey)) {\n    isInsertLineBreak = false;\n    dispatchCommand(editor, KEY_ENTER_COMMAND, event);\n  } else if (isDeleteBackward(keyCode, altKey, metaKey, ctrlKey)) {\n    if (isBackspace(keyCode)) {\n      dispatchCommand(editor, KEY_BACKSPACE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, true);\n    }\n  } else if (isEscape(keyCode)) {\n    dispatchCommand(editor, KEY_ESCAPE_COMMAND, event);\n  } else if (isDeleteForward(keyCode, ctrlKey, shiftKey, altKey, metaKey)) {\n    if (isDelete(keyCode)) {\n      dispatchCommand(editor, KEY_DELETE_COMMAND, event);\n    } else {\n      event.preventDefault();\n      dispatchCommand(editor, DELETE_CHARACTER_COMMAND, false);\n    }\n  } else if (isDeleteWordBackward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, true);\n  } else if (isDeleteWordForward(keyCode, altKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_WORD_COMMAND, false);\n  } else if (isDeleteLineBackward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, true);\n  } else if (isDeleteLineForward(keyCode, metaKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, DELETE_LINE_COMMAND, false);\n  } else if (isBold(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'bold');\n  } else if (isUnderline(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'underline');\n  } else if (isItalic(keyCode, altKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, FORMAT_TEXT_COMMAND, 'italic');\n  } else if (isTab(keyCode, altKey, ctrlKey, metaKey)) {\n    dispatchCommand(editor, KEY_TAB_COMMAND, event);\n  } else if (isUndo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, UNDO_COMMAND, undefined);\n  } else if (isRedo(keyCode, shiftKey, metaKey, ctrlKey)) {\n    event.preventDefault();\n    dispatchCommand(editor, REDO_COMMAND, undefined);\n  } else {\n    const prevSelection = editor._editorState._selection;\n    if ($isNodeSelection(prevSelection)) {\n      if (isCopy(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, COPY_COMMAND, event);\n      } else if (isCut(keyCode, shiftKey, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, CUT_COMMAND, event);\n      } else if (isSelectAll(keyCode, metaKey, ctrlKey)) {\n        event.preventDefault();\n        dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n      }\n      // FF does it well (no need to override behavior)\n    } else if (!IS_FIREFOX && isSelectAll(keyCode, metaKey, ctrlKey)) {\n      event.preventDefault();\n      dispatchCommand(editor, SELECT_ALL_COMMAND, event);\n    }\n  }\n  if (isModifier(ctrlKey, shiftKey, altKey, metaKey)) {\n    dispatchCommand(editor, KEY_MODIFIER_COMMAND, event);\n  }\n}\nfunction getRootElementRemoveHandles(rootElement) {\n  // @ts-expect-error: internal field\n  let eventHandles = rootElement.__lexicalEventHandles;\n  if (eventHandles === undefined) {\n    eventHandles = [];\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEventHandles = eventHandles;\n  }\n  return eventHandles;\n}\n\n// Mapping root editors to their active nested editors, contains nested editors\n// mapping only, so if root editor is selected map will have no reference to free up memory\nconst activeNestedEditorsMap = new Map();\nfunction onDocumentSelectionChange(event) {\n  const target = event.target;\n  const targetWindow = target == null ? null : target.nodeType === 9 ? target.defaultView : target.ownerDocument.defaultView;\n  const domSelection = getDOMSelection(targetWindow);\n  if (domSelection === null) {\n    return;\n  }\n  const nextActiveEditor = getNearestEditorFromDOMNode(domSelection.anchorNode);\n  if (nextActiveEditor === null) {\n    return;\n  }\n  if (isSelectionChangeFromMouseDown) {\n    isSelectionChangeFromMouseDown = false;\n    updateEditor(nextActiveEditor, () => {\n      const lastSelection = $getPreviousSelection();\n      const domAnchorNode = domSelection.anchorNode;\n      if (domAnchorNode === null) {\n        return;\n      }\n      const nodeType = domAnchorNode.nodeType;\n      // If the user is attempting to click selection back onto text, then\n      // we should attempt create a range selection.\n      // When we click on an empty paragraph node or the end of a paragraph that ends\n      // with an image/poll, the nodeType will be ELEMENT_NODE\n      if (nodeType !== DOM_ELEMENT_TYPE && nodeType !== DOM_TEXT_TYPE) {\n        return;\n      }\n      const newSelection = internalCreateRangeSelection(lastSelection, domSelection, nextActiveEditor, event);\n      $setSelection(newSelection);\n    });\n  }\n\n  // When editor receives selection change event, we're checking if\n  // it has any sibling editors (within same parent editor) that were active\n  // before, and trigger selection change on it to nullify selection.\n  const editors = getEditorsToPropagate(nextActiveEditor);\n  const rootEditor = editors[editors.length - 1];\n  const rootEditorKey = rootEditor._key;\n  const activeNestedEditor = activeNestedEditorsMap.get(rootEditorKey);\n  const prevActiveEditor = activeNestedEditor || rootEditor;\n  if (prevActiveEditor !== nextActiveEditor) {\n    onSelectionChange(domSelection, prevActiveEditor, false);\n  }\n  onSelectionChange(domSelection, nextActiveEditor, true);\n\n  // If newly selected editor is nested, then add it to the map, clean map otherwise\n  if (nextActiveEditor !== rootEditor) {\n    activeNestedEditorsMap.set(rootEditorKey, nextActiveEditor);\n  } else if (activeNestedEditor) {\n    activeNestedEditorsMap.delete(rootEditorKey);\n  }\n}\nfunction stopLexicalPropagation(event) {\n  // We attach a special property to ensure the same event doesn't re-fire\n  // for parent editors.\n  // @ts-ignore\n  event._lexicalHandled = true;\n}\nfunction hasStoppedLexicalPropagation(event) {\n  // @ts-ignore\n  const stopped = event._lexicalHandled === true;\n  return stopped;\n}\nfunction addRootElementEvents(rootElement, editor) {\n  // We only want to have a single global selectionchange event handler, shared\n  // between all editor instances.\n  if (rootElementsRegistered === 0) {\n    const doc = rootElement.ownerDocument;\n    doc.addEventListener('selectionchange', onDocumentSelectionChange);\n  }\n  rootElementsRegistered++;\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEditor = editor;\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < rootElementEvents.length; i++) {\n    const [eventName, onEvent] = rootElementEvents[i];\n    const eventHandler = typeof onEvent === 'function' ? event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        onEvent(event, editor);\n      }\n    } : event => {\n      if (hasStoppedLexicalPropagation(event)) {\n        return;\n      }\n      stopLexicalPropagation(event);\n      if (editor.isEditable()) {\n        switch (eventName) {\n          case 'cut':\n            return dispatchCommand(editor, CUT_COMMAND, event);\n          case 'copy':\n            return dispatchCommand(editor, COPY_COMMAND, event);\n          case 'paste':\n            return dispatchCommand(editor, PASTE_COMMAND, event);\n          case 'dragstart':\n            return dispatchCommand(editor, DRAGSTART_COMMAND, event);\n          case 'dragover':\n            return dispatchCommand(editor, DRAGOVER_COMMAND, event);\n          case 'dragend':\n            return dispatchCommand(editor, DRAGEND_COMMAND, event);\n          case 'focus':\n            return dispatchCommand(editor, FOCUS_COMMAND, event);\n          case 'blur':\n            {\n              return dispatchCommand(editor, BLUR_COMMAND, event);\n            }\n          case 'drop':\n            return dispatchCommand(editor, DROP_COMMAND, event);\n        }\n      }\n    };\n    rootElement.addEventListener(eventName, eventHandler);\n    removeHandles.push(() => {\n      rootElement.removeEventListener(eventName, eventHandler);\n    });\n  }\n}\nfunction removeRootElementEvents(rootElement) {\n  if (rootElementsRegistered !== 0) {\n    rootElementsRegistered--;\n\n    // We only want to have a single global selectionchange event handler, shared\n    // between all editor instances.\n    if (rootElementsRegistered === 0) {\n      const doc = rootElement.ownerDocument;\n      doc.removeEventListener('selectionchange', onDocumentSelectionChange);\n    }\n  }\n\n  // @ts-expect-error: internal field\n  const editor = rootElement.__lexicalEditor;\n  if (editor !== null && editor !== undefined) {\n    cleanActiveNestedEditorsMap(editor);\n    // @ts-expect-error: internal field\n    rootElement.__lexicalEditor = null;\n  }\n  const removeHandles = getRootElementRemoveHandles(rootElement);\n  for (let i = 0; i < removeHandles.length; i++) {\n    removeHandles[i]();\n  }\n\n  // @ts-expect-error: internal field\n  rootElement.__lexicalEventHandles = [];\n}\nfunction cleanActiveNestedEditorsMap(editor) {\n  if (editor._parentEditor !== null) {\n    // For nested editor cleanup map if this editor was marked as active\n    const editors = getEditorsToPropagate(editor);\n    const rootEditor = editors[editors.length - 1];\n    const rootEditorKey = rootEditor._key;\n    if (activeNestedEditorsMap.get(rootEditorKey) === editor) {\n      activeNestedEditorsMap.delete(rootEditorKey);\n    }\n  } else {\n    // For top-level editors cleanup map\n    activeNestedEditorsMap.delete(editor._key);\n  }\n}\nfunction markSelectionChangeFromDOMUpdate() {\n  isSelectionChangeFromDOMUpdate = true;\n}\nfunction markCollapsedSelectionFormat(format, style, offset, key, timeStamp) {\n  collapsedSelectionFormat = [format, style, offset, key, timeStamp];\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction removeNode(nodeToRemove, restoreSelection, preserveEmptyParent) {\n  errorOnReadOnly();\n  const key = nodeToRemove.__key;\n  const parent = nodeToRemove.getParent();\n  if (parent === null) {\n    return;\n  }\n  const selection = $maybeMoveChildrenSelectionToParent(nodeToRemove);\n  let selectionMoved = false;\n  if ($isRangeSelection(selection) && restoreSelection) {\n    const anchor = selection.anchor;\n    const focus = selection.focus;\n    if (anchor.key === key) {\n      moveSelectionPointToSibling(anchor, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n    if (focus.key === key) {\n      moveSelectionPointToSibling(focus, nodeToRemove, parent, nodeToRemove.getPreviousSibling(), nodeToRemove.getNextSibling());\n      selectionMoved = true;\n    }\n  } else if ($isNodeSelection(selection) && restoreSelection && nodeToRemove.isSelected()) {\n    nodeToRemove.selectPrevious();\n  }\n  if ($isRangeSelection(selection) && restoreSelection && !selectionMoved) {\n    // Doing this is O(n) so lets avoid it unless we need to do it\n    const index = nodeToRemove.getIndexWithinParent();\n    removeFromParent(nodeToRemove);\n    $updateElementSelectionOnCreateDeleteNode(selection, parent, index, -1);\n  } else {\n    removeFromParent(nodeToRemove);\n  }\n  if (!preserveEmptyParent && !$isRootOrShadowRoot(parent) && !parent.canBeEmpty() && parent.isEmpty()) {\n    removeNode(parent, restoreSelection);\n  }\n  if (restoreSelection && $isRootNode(parent) && parent.isEmpty()) {\n    parent.selectEnd();\n  }\n}\nclass LexicalNode {\n  // Allow us to look up the type including static props\n\n  /** @internal */\n\n  /** @internal */ //@ts-ignore We set the key in the constructor.\n  /** @internal */\n  /** @internal */\n  /** @internal */\n  // Flow doesn't support abstract classes unfortunately, so we can't _force_\n  // subclasses of Node to implement statics. All subclasses of Node should have\n  // a static getType and clone method though. We define getType and clone here so we can call it\n  // on any  Node, and we throw this error by default since the subclass should provide\n  // their own implementation.\n  /**\n   * Returns the string type of this node. Every node must\n   * implement this and it MUST BE UNIQUE amongst nodes registered\n   * on the editor.\n   *\n   */\n  static getType() {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .getType().`);\n    }\n  }\n\n  /**\n   * Clones this node, creating a new node with a different key\n   * and adding it to the EditorState (but not attaching it anywhere!). All nodes must\n   * implement this method.\n   *\n   */\n  static clone(_data) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .clone().`);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  constructor(key) {\n    this.__type = this.constructor.getType();\n    this.__parent = null;\n    this.__prev = null;\n    this.__next = null;\n    $setNodeKey(this, key);\n    {\n      if (this.__type !== 'root') {\n        errorOnReadOnly();\n        errorOnTypeKlassMismatch(this.__type, this.constructor);\n      }\n    }\n  }\n  // Getters and Traversers\n\n  /**\n   * Returns the string type of this node.\n   */\n  getType() {\n    return this.__type;\n  }\n  isInline() {\n    {\n      throw Error(`LexicalNode: Node ${this.constructor.name} does not implement .isInline().`);\n    }\n  }\n\n  /**\n   * Returns true if there is a path between this node and the RootNode, false otherwise.\n   * This is a way of determining if the node is \"attached\" EditorState. Unattached nodes\n   * won't be reconciled and will ultimatelt be cleaned up by the Lexical GC.\n   */\n  isAttached() {\n    let nodeKey = this.__key;\n    while (nodeKey !== null) {\n      if (nodeKey === 'root') {\n        return true;\n      }\n      const node = $getNodeByKey(nodeKey);\n      if (node === null) {\n        break;\n      }\n      nodeKey = node.__parent;\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if this node is contained within the provided Selection., false otherwise.\n   * Relies on the algorithms implemented in {@link BaseSelection.getNodes} to determine\n   * what's included.\n   *\n   * @param selection - The selection that we want to determine if the node is in.\n   */\n  isSelected(selection) {\n    const targetSelection = selection || $getSelection();\n    if (targetSelection == null) {\n      return false;\n    }\n    const isSelected = targetSelection.getNodes().some(n => n.__key === this.__key);\n    if ($isTextNode(this)) {\n      return isSelected;\n    }\n    // For inline images inside of element nodes.\n    // Without this change the image will be selected if the cursor is before or after it.\n    if ($isRangeSelection(targetSelection) && targetSelection.anchor.type === 'element' && targetSelection.focus.type === 'element' && targetSelection.anchor.key === targetSelection.focus.key && targetSelection.anchor.offset === targetSelection.focus.offset) {\n      return false;\n    }\n    return isSelected;\n  }\n\n  /**\n   * Returns this nodes key.\n   */\n  getKey() {\n    // Key is stable between copies\n    return this.__key;\n  }\n\n  /**\n   * Returns the zero-based index of this node within the parent.\n   */\n  getIndexWithinParent() {\n    const parent = this.getParent();\n    if (parent === null) {\n      return -1;\n    }\n    let node = parent.getFirstChild();\n    let index = 0;\n    while (node !== null) {\n      if (this.is(node)) {\n        return index;\n      }\n      index++;\n      node = node.getNextSibling();\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the parent of this node, or null if none is found.\n   */\n  getParent() {\n    const parent = this.getLatest().__parent;\n    if (parent === null) {\n      return null;\n    }\n    return $getNodeByKey(parent);\n  }\n\n  /**\n   * Returns the parent of this node, or throws if none is found.\n   */\n  getParentOrThrow() {\n    const parent = this.getParent();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a parent.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or null if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElement() {\n    let node = this;\n    while (node !== null) {\n      const parent = node.getParent();\n      if ($isRootOrShadowRoot(parent)) {\n        if (!$isElementNode(node)) {\n          throw Error(`Children of root nodes must be elements`);\n        }\n        return node;\n      }\n      node = parent;\n    }\n    return null;\n  }\n\n  /**\n   * Returns the highest (in the EditorState tree)\n   * non-root ancestor of this node, or throws if none is found. See {@link lexical!$isRootOrShadowRoot}\n   * for more information on which Elements comprise \"roots\".\n   */\n  getTopLevelElementOrThrow() {\n    const parent = this.getTopLevelElement();\n    if (parent === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a top parent element.`);\n      }\n    }\n    return parent;\n  }\n\n  /**\n   * Returns a list of the every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParents() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns a list of the keys of every ancestor of this node,\n   * all the way up to the RootNode.\n   *\n   */\n  getParentKeys() {\n    const parents = [];\n    let node = this.getParent();\n    while (node !== null) {\n      parents.push(node.__key);\n      node = node.getParent();\n    }\n    return parents;\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the node that comes\n   * before this one in the same parent.\n   *\n   */\n  getPreviousSibling() {\n    const self = this.getLatest();\n    const prevKey = self.__prev;\n    return prevKey === null ? null : $getNodeByKey(prevKey);\n  }\n\n  /**\n   * Returns the \"previous\" siblings - that is, the nodes that come between\n   * this one and the first child of it's parent, inclusive.\n   *\n   */\n  getPreviousSiblings() {\n    const siblings = [];\n    const parent = this.getParent();\n    if (parent === null) {\n      return siblings;\n    }\n    let node = parent.getFirstChild();\n    while (node !== null) {\n      if (node.is(this)) {\n        break;\n      }\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the \"next\" siblings - that is, the node that comes\n   * after this one in the same parent\n   *\n   */\n  getNextSibling() {\n    const self = this.getLatest();\n    const nextKey = self.__next;\n    return nextKey === null ? null : $getNodeByKey(nextKey);\n  }\n\n  /**\n   * Returns all \"next\" siblings - that is, the nodes that come between this\n   * one and the last child of it's parent, inclusive.\n   *\n   */\n  getNextSiblings() {\n    const siblings = [];\n    let node = this.getNextSibling();\n    while (node !== null) {\n      siblings.push(node);\n      node = node.getNextSibling();\n    }\n    return siblings;\n  }\n\n  /**\n   * Returns the closest common ancestor of this node and the provided one or null\n   * if one cannot be found.\n   *\n   * @param node - the other node to find the common ancestor of.\n   */\n  getCommonAncestor(node) {\n    const a = this.getParents();\n    const b = node.getParents();\n    if ($isElementNode(this)) {\n      a.unshift(this);\n    }\n    if ($isElementNode(node)) {\n      b.unshift(node);\n    }\n    const aLength = a.length;\n    const bLength = b.length;\n    if (aLength === 0 || bLength === 0 || a[aLength - 1] !== b[bLength - 1]) {\n      return null;\n    }\n    const bSet = new Set(b);\n    for (let i = 0; i < aLength; i++) {\n      const ancestor = a[i];\n      if (bSet.has(ancestor)) {\n        return ancestor;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns true if the provided node is the exact same one as this node, from Lexical's perspective.\n   * Always use this instead of referential equality.\n   *\n   * @param object - the node to perform the equality comparison on.\n   */\n  is(object) {\n    if (object == null) {\n      return false;\n    }\n    return this.__key === object.__key;\n  }\n\n  /**\n   * Returns true if this node logical precedes the target node in the editor state.\n   *\n   * @param targetNode - the node we're testing to see if it's after this one.\n   */\n  isBefore(targetNode) {\n    if (this === targetNode) {\n      return false;\n    }\n    if (targetNode.isParentOf(this)) {\n      return true;\n    }\n    if (this.isParentOf(targetNode)) {\n      return false;\n    }\n    const commonAncestor = this.getCommonAncestor(targetNode);\n    let indexA = 0;\n    let indexB = 0;\n    let node = this;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexA = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    node = targetNode;\n    while (true) {\n      const parent = node.getParentOrThrow();\n      if (parent === commonAncestor) {\n        indexB = node.getIndexWithinParent();\n        break;\n      }\n      node = parent;\n    }\n    return indexA < indexB;\n  }\n\n  /**\n   * Returns true if this node is the parent of the target node, false otherwise.\n   *\n   * @param targetNode - the would-be child node.\n   */\n  isParentOf(targetNode) {\n    const key = this.__key;\n    if (key === targetNode.__key) {\n      return false;\n    }\n    let node = targetNode;\n    while (node !== null) {\n      if (node.__key === key) {\n        return true;\n      }\n      node = node.getParent();\n    }\n    return false;\n  }\n\n  // TO-DO: this function can be simplified a lot\n  /**\n   * Returns a list of nodes that are between this node and\n   * the target node in the EditorState.\n   *\n   * @param targetNode - the node that marks the other end of the range of nodes to be returned.\n   */\n  getNodesBetween(targetNode) {\n    const isBefore = this.isBefore(targetNode);\n    const nodes = [];\n    const visited = new Set();\n    let node = this;\n    while (true) {\n      const key = node.__key;\n      if (!visited.has(key)) {\n        visited.add(key);\n        nodes.push(node);\n      }\n      if (node === targetNode) {\n        break;\n      }\n      const child = $isElementNode(node) ? isBefore ? node.getFirstChild() : node.getLastChild() : null;\n      if (child !== null) {\n        node = child;\n        continue;\n      }\n      const nextSibling = isBefore ? node.getNextSibling() : node.getPreviousSibling();\n      if (nextSibling !== null) {\n        node = nextSibling;\n        continue;\n      }\n      const parent = node.getParentOrThrow();\n      if (!visited.has(parent.__key)) {\n        nodes.push(parent);\n      }\n      if (parent === targetNode) {\n        break;\n      }\n      let parentSibling = null;\n      let ancestor = parent;\n      do {\n        if (ancestor === null) {\n          {\n            throw Error(`getNodesBetween: ancestor is null`);\n          }\n        }\n        parentSibling = isBefore ? ancestor.getNextSibling() : ancestor.getPreviousSibling();\n        ancestor = ancestor.getParent();\n        if (ancestor !== null) {\n          if (parentSibling === null && !visited.has(ancestor.__key)) {\n            nodes.push(ancestor);\n          }\n        }\n      } while (parentSibling === null);\n      node = parentSibling;\n    }\n    if (!isBefore) {\n      nodes.reverse();\n    }\n    return nodes;\n  }\n\n  /**\n   * Returns true if this node has been marked dirty during this update cycle.\n   *\n   */\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyLeaves = editor._dirtyLeaves;\n    return dirtyLeaves !== null && dirtyLeaves.has(this.__key);\n  }\n\n  /**\n   * Returns the latest version of the node from the active EditorState.\n   * This is used to avoid getting values from stale node references.\n   *\n   */\n  getLatest() {\n    const latest = $getNodeByKey(this.__key);\n    if (latest === null) {\n      {\n        throw Error(`Lexical node does not exist in active editor state. Avoid using the same node references between nested closures from editorState.read/editor.update.`);\n      }\n    }\n    return latest;\n  }\n\n  /**\n   * Returns a mutable version of the node. Will throw an error if\n   * called outside of a Lexical Editor {@link LexicalEditor.update} callback.\n   *\n   */\n  getWritable() {\n    errorOnReadOnly();\n    const editorState = getActiveEditorState();\n    const editor = getActiveEditor();\n    const nodeMap = editorState._nodeMap;\n    const key = this.__key;\n    // Ensure we get the latest node from pending state\n    const latestNode = this.getLatest();\n    const parent = latestNode.__parent;\n    const cloneNotNeeded = editor._cloneNotNeeded;\n    const selection = $getSelection();\n    if (selection !== null) {\n      selection.setCachedNodes(null);\n    }\n    if (cloneNotNeeded.has(key)) {\n      // Transforms clear the dirty node set on each iteration to keep track on newly dirty nodes\n      internalMarkNodeAsDirty(latestNode);\n      return latestNode;\n    }\n    const constructor = latestNode.constructor;\n    const mutableNode = constructor.clone(latestNode);\n    mutableNode.__parent = parent;\n    mutableNode.__next = latestNode.__next;\n    mutableNode.__prev = latestNode.__prev;\n    if ($isElementNode(latestNode) && $isElementNode(mutableNode)) {\n      mutableNode.__first = latestNode.__first;\n      mutableNode.__last = latestNode.__last;\n      mutableNode.__size = latestNode.__size;\n      mutableNode.__indent = latestNode.__indent;\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__dir = latestNode.__dir;\n    } else if ($isTextNode(latestNode) && $isTextNode(mutableNode)) {\n      mutableNode.__format = latestNode.__format;\n      mutableNode.__style = latestNode.__style;\n      mutableNode.__mode = latestNode.__mode;\n      mutableNode.__detail = latestNode.__detail;\n    }\n    cloneNotNeeded.add(key);\n    mutableNode.__key = key;\n    internalMarkNodeAsDirty(mutableNode);\n    // Update reference in node map\n    nodeMap.set(key, mutableNode);\n\n    // @ts-expect-error\n    return mutableNode;\n  }\n\n  /**\n   * Returns the text content of the node. Override this for\n   * custom nodes that should have a representation in plain text\n   * format (for copy + paste, for example)\n   *\n   */\n  getTextContent() {\n    return '';\n  }\n\n  /**\n   * Returns the length of the string produced by calling getTextContent on this node.\n   *\n   */\n  getTextContentSize() {\n    return this.getTextContent().length;\n  }\n\n  // View\n\n  /**\n   * Called during the reconciliation process to determine which nodes\n   * to insert into the DOM for this Lexical Node.\n   *\n   * This method must return exactly one HTMLElement. Nested elements are not supported.\n   *\n   * Do not attempt to update the Lexical EditorState during this phase of the update lifecyle.\n   *\n   * @param _config - allows access to things like the EditorTheme (to apply classes) during reconciliation.\n   * @param _editor - allows access to the editor for context during reconciliation.\n   *\n   * */\n  createDOM(_config, _editor) {\n    {\n      throw Error(`createDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Called when a node changes and should update the DOM\n   * in whatever way is necessary to make it align with any changes that might\n   * have happened during the update.\n   *\n   * Returning \"true\" here will cause lexical to unmount and recreate the DOM node\n   * (by calling createDOM). You would need to do this if the element tag changes,\n   * for instance.\n   *\n   * */\n  updateDOM(_prevNode, _dom, _config) {\n    {\n      throw Error(`updateDOM: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is serialized to HTML. This is important for\n   * copy and paste between Lexical and non-Lexical editors, or Lexical editors with different namespaces,\n   * in which case the primary transfer format is HTML. It's also important if you're serializing\n   * to HTML for any other reason via {@link @lexical/html!$generateHtmlFromNodes}. You could\n   * also use this method to build your own HTML renderer.\n   *\n   * */\n  exportDOM(editor) {\n    const element = this.createDOM(editor._config, editor);\n    return {\n      element\n    };\n  }\n\n  /**\n   * Controls how the this node is serialized to JSON. This is important for\n   * copy and paste between Lexical editors sharing the same namespace. It's also important\n   * if you're serializing to JSON for persistent storage somewhere.\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  exportJSON() {\n    {\n      throw Error(`exportJSON: base method not extended`);\n    }\n  }\n\n  /**\n   * Controls how the this node is deserialized from JSON. This is usually boilerplate,\n   * but provides an abstraction between the node implementation and serialized interface that can\n   * be important if you ever make breaking changes to a node schema (by adding or removing properties).\n   * See [Serialization & Deserialization](https://lexical.dev/docs/concepts/serialization#lexical---html).\n   *\n   * */\n  static importJSON(_serializedNode) {\n    {\n      throw Error(`LexicalNode: Node ${this.name} does not implement .importJSON().`);\n    }\n  }\n  /**\n   * @experimental\n   *\n   * Registers the returned function as a transform on the node during\n   * Editor initialization. Most such use cases should be addressed via\n   * the {@link LexicalEditor.registerNodeTransform} API.\n   *\n   * Experimental - use at your own risk.\n   */\n  static transform() {\n    return null;\n  }\n\n  // Setters and mutators\n\n  /**\n   * Removes this LexicalNode from the EditorState. If the node isn't re-inserted\n   * somewhere, the Lexical garbage collector will eventually clean it up.\n   *\n   * @param preserveEmptyParent - If falsy, the node's parent will be removed if\n   * it's empty after the removal operation. This is the default behavior, subject to\n   * other node heuristics such as {@link ElementNode#canBeEmpty}\n   * */\n  remove(preserveEmptyParent) {\n    removeNode(this, true, preserveEmptyParent);\n  }\n\n  /**\n   * Replaces this LexicalNode with the provided node, optionally transferring the children\n   * of the replaced node to the replacing node.\n   *\n   * @param replaceWith - The node to replace this one with.\n   * @param includeChildren - Whether or not to transfer the children of this node to the replacing node.\n   * */\n  replace(replaceWith, includeChildren) {\n    errorOnReadOnly();\n    let selection = $getSelection();\n    if (selection !== null) selection = selection.clone();\n    errorOnInsertTextNodeOnRoot(this, replaceWith);\n    const self = this.getLatest();\n    const toReplaceKey = this.__key;\n    const key = replaceWith.__key;\n    const writableReplaceWith = replaceWith.getWritable();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const size = writableParent.__size;\n    removeFromParent(writableReplaceWith);\n    const prevSibling = self.getPreviousSibling();\n    const nextSibling = self.getNextSibling();\n    const prevKey = self.__prev;\n    const nextKey = self.__next;\n    const parentKey = self.__parent;\n    removeNode(self, false, true);\n    if (prevSibling === null) {\n      writableParent.__first = key;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = key;\n    }\n    writableReplaceWith.__prev = prevKey;\n    if (nextSibling === null) {\n      writableParent.__last = key;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = key;\n    }\n    writableReplaceWith.__next = nextKey;\n    writableReplaceWith.__parent = parentKey;\n    writableParent.__size = size;\n    if (includeChildren) {\n      if (!($isElementNode(this) && $isElementNode(writableReplaceWith))) {\n        throw Error(`includeChildren should only be true for ElementNodes`);\n      }\n      this.getChildren().forEach(child => {\n        writableReplaceWith.append(child);\n      });\n    }\n    if ($isRangeSelection(selection)) {\n      $setSelection(selection);\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor.key === toReplaceKey) {\n        $moveSelectionPointToEnd(anchor, writableReplaceWith);\n      }\n      if (focus.key === toReplaceKey) {\n        $moveSelectionPointToEnd(focus, writableReplaceWith);\n      }\n    }\n    if ($getCompositionKey() === toReplaceKey) {\n      $setCompositionKey(key);\n    }\n    return writableReplaceWith;\n  }\n\n  /**\n   * Inserts a node after this LexicalNode (as the next sibling).\n   *\n   * @param nodeToInsert - The node to insert after this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertAfter(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const oldParent = writableNodeToInsert.getParent();\n    const selection = $getSelection();\n    let elementAnchorSelectionOnNode = false;\n    let elementFocusSelectionOnNode = false;\n    if (oldParent !== null) {\n      // TODO: this is O(n), can we improve?\n      const oldIndex = nodeToInsert.getIndexWithinParent();\n      removeFromParent(writableNodeToInsert);\n      if ($isRangeSelection(selection)) {\n        const oldParentKey = oldParent.__key;\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        elementAnchorSelectionOnNode = anchor.type === 'element' && anchor.key === oldParentKey && anchor.offset === oldIndex + 1;\n        elementFocusSelectionOnNode = focus.type === 'element' && focus.key === oldParentKey && focus.offset === oldIndex + 1;\n      }\n    }\n    const nextSibling = this.getNextSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    const nextKey = writableSelf.__next;\n    if (nextSibling === null) {\n      writableParent.__last = insertKey;\n    } else {\n      const writableNextSibling = nextSibling.getWritable();\n      writableNextSibling.__prev = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__next = insertKey;\n    writableNodeToInsert.__next = nextKey;\n    writableNodeToInsert.__prev = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const index = this.getIndexWithinParent();\n      $updateElementSelectionOnCreateDeleteNode(selection, writableParent, index + 1);\n      const writableParentKey = writableParent.__key;\n      if (elementAnchorSelectionOnNode) {\n        selection.anchor.set(writableParentKey, index + 2, 'element');\n      }\n      if (elementFocusSelectionOnNode) {\n        selection.focus.set(writableParentKey, index + 2, 'element');\n      }\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Inserts a node before this LexicalNode (as the previous sibling).\n   *\n   * @param nodeToInsert - The node to insert before this one.\n   * @param restoreSelection - Whether or not to attempt to resolve the\n   * selection to the appropriate place after the operation is complete.\n   * */\n  insertBefore(nodeToInsert, restoreSelection = true) {\n    errorOnReadOnly();\n    errorOnInsertTextNodeOnRoot(this, nodeToInsert);\n    const writableSelf = this.getWritable();\n    const writableNodeToInsert = nodeToInsert.getWritable();\n    const insertKey = writableNodeToInsert.__key;\n    removeFromParent(writableNodeToInsert);\n    const prevSibling = this.getPreviousSibling();\n    const writableParent = this.getParentOrThrow().getWritable();\n    const prevKey = writableSelf.__prev;\n    // TODO: this is O(n), can we improve?\n    const index = this.getIndexWithinParent();\n    if (prevSibling === null) {\n      writableParent.__first = insertKey;\n    } else {\n      const writablePrevSibling = prevSibling.getWritable();\n      writablePrevSibling.__next = insertKey;\n    }\n    writableParent.__size++;\n    writableSelf.__prev = insertKey;\n    writableNodeToInsert.__prev = prevKey;\n    writableNodeToInsert.__next = writableSelf.__key;\n    writableNodeToInsert.__parent = writableSelf.__parent;\n    const selection = $getSelection();\n    if (restoreSelection && $isRangeSelection(selection)) {\n      const parent = this.getParentOrThrow();\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, index);\n    }\n    return nodeToInsert;\n  }\n\n  /**\n   * Whether or not this node has a required parent. Used during copy + paste operations\n   * to normalize nodes that would otherwise be orphaned. For example, ListItemNodes without\n   * a ListNode parent or TextNodes with a ParagraphNode parent.\n   *\n   * */\n  isParentRequired() {\n    return false;\n  }\n\n  /**\n   * The creation logic for any required parent. Should be implemented if {@link isParentRequired} returns true.\n   *\n   * */\n  createParentElementNode() {\n    return $createParagraphNode();\n  }\n  selectStart() {\n    return this.selectPrevious();\n  }\n  selectEnd() {\n    return this.selectNext(0, 0);\n  }\n\n  /**\n   * Moves selection to the previous sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectPrevious(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const prevSibling = this.getPreviousSibling();\n    const parent = this.getParentOrThrow();\n    if (prevSibling === null) {\n      return parent.select(0, 0);\n    }\n    if ($isElementNode(prevSibling)) {\n      return prevSibling.select();\n    } else if (!$isTextNode(prevSibling)) {\n      const index = prevSibling.getIndexWithinParent() + 1;\n      return parent.select(index, index);\n    }\n    return prevSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Moves selection to the next sibling of this node, at the specified offsets.\n   *\n   * @param anchorOffset - The anchor offset for selection.\n   * @param focusOffset -  The focus offset for selection\n   * */\n  selectNext(anchorOffset, focusOffset) {\n    errorOnReadOnly();\n    const nextSibling = this.getNextSibling();\n    const parent = this.getParentOrThrow();\n    if (nextSibling === null) {\n      return parent.select();\n    }\n    if ($isElementNode(nextSibling)) {\n      return nextSibling.select(0, 0);\n    } else if (!$isTextNode(nextSibling)) {\n      const index = nextSibling.getIndexWithinParent();\n      return parent.select(index, index);\n    }\n    return nextSibling.select(anchorOffset, focusOffset);\n  }\n\n  /**\n   * Marks a node dirty, triggering transforms and\n   * forcing it to be reconciled during the update cycle.\n   *\n   * */\n  markDirty() {\n    this.getWritable();\n  }\n}\nfunction errorOnTypeKlassMismatch(type, klass) {\n  const registeredNode = getActiveEditor()._nodes.get(type);\n  // Common error - split in its own invariant\n  if (registeredNode === undefined) {\n    {\n      throw Error(`Create node: Attempted to create node ${klass.name} that was not configured to be used on the editor.`);\n    }\n  }\n  const editorKlass = registeredNode.klass;\n  if (editorKlass !== klass) {\n    {\n      throw Error(`Create node: Type ${type} in node ${klass.name} does not match registered node ${editorKlass.name} with the same type`);\n    }\n  }\n}\n\n/**\n * Insert a series of nodes after this LexicalNode (as next siblings)\n *\n * @param firstToInsert - The first node to insert after this one.\n * @param lastToInsert - The last node to insert after this one. Must be a\n * later sibling of FirstNode. If not provided, it will be its last sibling.\n */\nfunction insertRangeAfter(node, firstToInsert, lastToInsert) {\n  const lastToInsert2 = lastToInsert || firstToInsert.getParentOrThrow().getLastChild();\n  let current = firstToInsert;\n  const nodesToInsert = [firstToInsert];\n  while (current !== lastToInsert2) {\n    if (!current.getNextSibling()) {\n      {\n        throw Error(`insertRangeAfter: lastToInsert must be a later sibling of firstToInsert`);\n      }\n    }\n    current = current.getNextSibling();\n    nodesToInsert.push(current);\n  }\n  let currentNode = node;\n  for (const nodeToInsert of nodesToInsert) {\n    currentNode = currentNode.insertAfter(nodeToInsert);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass LineBreakNode extends LexicalNode {\n  static getType() {\n    return 'linebreak';\n  }\n  static clone(node) {\n    return new LineBreakNode(node.__key);\n  }\n  constructor(key) {\n    super(key);\n  }\n  getTextContent() {\n    return '\\n';\n  }\n  createDOM() {\n    return document.createElement('br');\n  }\n  updateDOM() {\n    return false;\n  }\n  static importDOM() {\n    return {\n      br: node => {\n        if (isOnlyChild(node)) {\n          return null;\n        }\n        return {\n          conversion: convertLineBreakElement,\n          priority: 0\n        };\n      }\n    };\n  }\n  static importJSON(serializedLineBreakNode) {\n    return $createLineBreakNode();\n  }\n  exportJSON() {\n    return {\n      type: 'linebreak',\n      version: 1\n    };\n  }\n}\nfunction convertLineBreakElement(node) {\n  return {\n    node: $createLineBreakNode()\n  };\n}\nfunction $createLineBreakNode() {\n  return $applyNodeReplacement(new LineBreakNode());\n}\nfunction $isLineBreakNode(node) {\n  return node instanceof LineBreakNode;\n}\nfunction isOnlyChild(node) {\n  const parentElement = node.parentElement;\n  if (parentElement !== null) {\n    const firstChild = parentElement.firstChild;\n    if (firstChild === node || firstChild.nextSibling === node && isWhitespaceDomTextNode(firstChild)) {\n      const lastChild = parentElement.lastChild;\n      if (lastChild === node || lastChild.previousSibling === node && isWhitespaceDomTextNode(lastChild)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction isWhitespaceDomTextNode(node) {\n  return node.nodeType === DOM_TEXT_TYPE && /^( |\\t|\\r?\\n)+$/.test(node.textContent || '');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction getElementOuterTag(node, format) {\n  if (format & IS_CODE) {\n    return 'code';\n  }\n  if (format & IS_HIGHLIGHT) {\n    return 'mark';\n  }\n  if (format & IS_SUBSCRIPT) {\n    return 'sub';\n  }\n  if (format & IS_SUPERSCRIPT) {\n    return 'sup';\n  }\n  return null;\n}\nfunction getElementInnerTag(node, format) {\n  if (format & IS_BOLD) {\n    return 'strong';\n  }\n  if (format & IS_ITALIC) {\n    return 'em';\n  }\n  return 'span';\n}\nfunction setTextThemeClassNames(tag, prevFormat, nextFormat, dom, textClassNames) {\n  const domClassList = dom.classList;\n  // Firstly we handle the base theme.\n  let classNames = getCachedClassNameArray(textClassNames, 'base');\n  if (classNames !== undefined) {\n    domClassList.add(...classNames);\n  }\n  // Secondly we handle the special case: underline + strikethrough.\n  // We have to do this as we need a way to compose the fact that\n  // the same CSS property will need to be used: text-decoration.\n  // In an ideal world we shouldn't have to do this, but there's no\n  // easy workaround for many atomic CSS systems today.\n  classNames = getCachedClassNameArray(textClassNames, 'underlineStrikethrough');\n  let hasUnderlineStrikethrough = false;\n  const prevUnderlineStrikethrough = prevFormat & IS_UNDERLINE && prevFormat & IS_STRIKETHROUGH;\n  const nextUnderlineStrikethrough = nextFormat & IS_UNDERLINE && nextFormat & IS_STRIKETHROUGH;\n  if (classNames !== undefined) {\n    if (nextUnderlineStrikethrough) {\n      hasUnderlineStrikethrough = true;\n      if (!prevUnderlineStrikethrough) {\n        domClassList.add(...classNames);\n      }\n    } else if (prevUnderlineStrikethrough) {\n      domClassList.remove(...classNames);\n    }\n  }\n  for (const key in TEXT_TYPE_TO_FORMAT) {\n    const format = key;\n    const flag = TEXT_TYPE_TO_FORMAT[format];\n    classNames = getCachedClassNameArray(textClassNames, key);\n    if (classNames !== undefined) {\n      if (nextFormat & flag) {\n        if (hasUnderlineStrikethrough && (key === 'underline' || key === 'strikethrough')) {\n          if (prevFormat & flag) {\n            domClassList.remove(...classNames);\n          }\n          continue;\n        }\n        if ((prevFormat & flag) === 0 || prevUnderlineStrikethrough && key === 'underline' || key === 'strikethrough') {\n          domClassList.add(...classNames);\n        }\n      } else if (prevFormat & flag) {\n        domClassList.remove(...classNames);\n      }\n    }\n  }\n}\nfunction diffComposedText(a, b) {\n  const aLength = a.length;\n  const bLength = b.length;\n  let left = 0;\n  let right = 0;\n  while (left < aLength && left < bLength && a[left] === b[left]) {\n    left++;\n  }\n  while (right + left < aLength && right + left < bLength && a[aLength - right - 1] === b[bLength - right - 1]) {\n    right++;\n  }\n  return [left, aLength - left - right, b.slice(left, bLength - right)];\n}\nfunction setTextContent(nextText, dom, node) {\n  const firstChild = dom.firstChild;\n  const isComposing = node.isComposing();\n  // Always add a suffix if we're composing a node\n  const suffix = isComposing ? COMPOSITION_SUFFIX : '';\n  const text = nextText + suffix;\n  if (firstChild == null) {\n    dom.textContent = text;\n  } else {\n    const nodeValue = firstChild.nodeValue;\n    if (nodeValue !== text) {\n      if (isComposing || IS_FIREFOX) {\n        // We also use the diff composed text for general text in FF to avoid\n        // the spellcheck red line from flickering.\n        const [index, remove, insert] = diffComposedText(nodeValue, text);\n        if (remove !== 0) {\n          // @ts-expect-error\n          firstChild.deleteData(index, remove);\n        }\n        // @ts-expect-error\n        firstChild.insertData(index, insert);\n      } else {\n        firstChild.nodeValue = text;\n      }\n    }\n  }\n}\nfunction createTextInnerDOM(innerDOM, node, innerTag, format, text, config) {\n  setTextContent(text, innerDOM, node);\n  const theme = config.theme;\n  // Apply theme class names\n  const textClassNames = theme.text;\n  if (textClassNames !== undefined) {\n    setTextThemeClassNames(innerTag, 0, format, innerDOM, textClassNames);\n  }\n}\nfunction wrapElementWith(element, tag) {\n  const el = document.createElement(tag);\n  el.appendChild(element);\n  return el;\n}\n\n/** @noInheritDoc */\nclass TextNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'text';\n  }\n  static clone(node) {\n    return new TextNode(node.__text, node.__key);\n  }\n  constructor(text, key) {\n    super(key);\n    this.__text = text;\n    this.__format = 0;\n    this.__style = '';\n    this.__mode = 0;\n    this.__detail = 0;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextFormatTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.hasFormat instead.\n   *\n   * @returns a number representing the format of the text node.\n   */\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n\n  /**\n   * Returns a 32-bit integer that represents the TextDetailTypes currently applied to the\n   * TextNode. You probably don't want to use this method directly - consider using TextNode.isDirectionless\n   * or TextNode.isUnmergeable instead.\n   *\n   * @returns a number representing the detail of the text node.\n   */\n  getDetail() {\n    const self = this.getLatest();\n    return self.__detail;\n  }\n\n  /**\n   * Returns the mode (TextModeType) of the TextNode, which may be \"normal\", \"token\", or \"segmented\"\n   *\n   * @returns TextModeType.\n   */\n  getMode() {\n    const self = this.getLatest();\n    return TEXT_TYPE_TO_MODE[self.__mode];\n  }\n\n  /**\n   * Returns the styles currently applied to the node. This is analogous to CSSText in the DOM.\n   *\n   * @returns CSSText-like string of styles applied to the underlying DOM node.\n   */\n  getStyle() {\n    const self = this.getLatest();\n    return self.__style;\n  }\n\n  /**\n   * Returns whether or not the node is in \"token\" mode. TextNodes in token mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted as a single entity (not invdividually by character).\n   *\n   * @returns true if the node is in token mode, false otherwise.\n   */\n  isToken() {\n    const self = this.getLatest();\n    return self.__mode === IS_TOKEN;\n  }\n\n  /**\n   *\n   * @returns true if Lexical detects that an IME or other 3rd-party script is attempting to\n   * mutate the TextNode, false otherwise.\n   */\n  isComposing() {\n    return this.__key === $getCompositionKey();\n  }\n\n  /**\n   * Returns whether or not the node is in \"segemented\" mode. TextNodes in segemented mode can be navigated through character-by-character\n   * with a RangeSelection, but are deleted in space-delimited \"segments\".\n   *\n   * @returns true if the node is in segmented mode, false otherwise.\n   */\n  isSegmented() {\n    const self = this.getLatest();\n    return self.__mode === IS_SEGMENTED;\n  }\n  /**\n   * Returns whether or not the node is \"directionless\". Directionless nodes don't respect changes between RTL and LTR modes.\n   *\n   * @returns true if the node is directionless, false otherwise.\n   */\n  isDirectionless() {\n    const self = this.getLatest();\n    return (self.__detail & IS_DIRECTIONLESS) !== 0;\n  }\n  /**\n   * Returns whether or not the node is unmergeable. In some scenarios, Lexical tries to merge\n   * adjacent TextNodes into a single TextNode. If a TextNode is unmergeable, this won't happen.\n   *\n   * @returns true if the node is unmergeable, false otherwise.\n   */\n  isUnmergeable() {\n    const self = this.getLatest();\n    return (self.__detail & IS_UNMERGEABLE) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node has the provided format applied. Use this with the human-readable TextFormatType\n   * string values to get the format of a TextNode.\n   *\n   * @param type - the TextFormatType to check for.\n   *\n   * @returns true if the node has the provided format, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.getFormat() & formatFlag) !== 0;\n  }\n\n  /**\n   * Returns whether or not the node is simple text. Simple text is defined as a TextNode that has the string type \"text\"\n   * (i.e., not a subclass) and has no mode applied to it (i.e., not segmented or token).\n   *\n   * @returns true if the node is simple text, false otherwise.\n   */\n  isSimpleText() {\n    return this.__type === 'text' && this.__mode === 0;\n  }\n\n  /**\n   * Returns the text content of the node as a string.\n   *\n   * @returns a string representing the text content of the node.\n   */\n  getTextContent() {\n    const self = this.getLatest();\n    return self.__text;\n  }\n\n  /**\n   * Returns the format flags applied to the node as a 32-bit integer.\n   *\n   * @returns a number representing the TextFormatTypes applied to the node.\n   */\n  getFormatFlags(type, alignWithFormat) {\n    const self = this.getLatest();\n    const format = self.__format;\n    return toggleTextFormatType(format, type, alignWithFormat);\n  }\n\n  /**\n   *\n   * @returns true if the text node supports font styling, false otherwise.\n   */\n  canHaveFormat() {\n    return true;\n  }\n\n  // View\n\n  createDOM(config, editor) {\n    const format = this.__format;\n    const outerTag = getElementOuterTag(this, format);\n    const innerTag = getElementInnerTag(this, format);\n    const tag = outerTag === null ? innerTag : outerTag;\n    const dom = document.createElement(tag);\n    let innerDOM = dom;\n    if (this.hasFormat('code')) {\n      dom.setAttribute('spellcheck', 'false');\n    }\n    if (outerTag !== null) {\n      innerDOM = document.createElement(innerTag);\n      dom.appendChild(innerDOM);\n    }\n    const text = this.__text;\n    createTextInnerDOM(innerDOM, this, innerTag, format, text, config);\n    const style = this.__style;\n    if (style !== '') {\n      dom.style.cssText = style;\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    const nextText = this.__text;\n    const prevFormat = prevNode.__format;\n    const nextFormat = this.__format;\n    const prevOuterTag = getElementOuterTag(this, prevFormat);\n    const nextOuterTag = getElementOuterTag(this, nextFormat);\n    const prevInnerTag = getElementInnerTag(this, prevFormat);\n    const nextInnerTag = getElementInnerTag(this, nextFormat);\n    const prevTag = prevOuterTag === null ? prevInnerTag : prevOuterTag;\n    const nextTag = nextOuterTag === null ? nextInnerTag : nextOuterTag;\n    if (prevTag !== nextTag) {\n      return true;\n    }\n    if (prevOuterTag === nextOuterTag && prevInnerTag !== nextInnerTag) {\n      // should always be an element\n      const prevInnerDOM = dom.firstChild;\n      if (prevInnerDOM == null) {\n        {\n          throw Error(`updateDOM: prevInnerDOM is null or undefined`);\n        }\n      }\n      const nextInnerDOM = document.createElement(nextInnerTag);\n      createTextInnerDOM(nextInnerDOM, this, nextInnerTag, nextFormat, nextText, config);\n      dom.replaceChild(nextInnerDOM, prevInnerDOM);\n      return false;\n    }\n    let innerDOM = dom;\n    if (nextOuterTag !== null) {\n      if (prevOuterTag !== null) {\n        innerDOM = dom.firstChild;\n        if (innerDOM == null) {\n          {\n            throw Error(`updateDOM: innerDOM is null or undefined`);\n          }\n        }\n      }\n    }\n    setTextContent(nextText, innerDOM, this);\n    const theme = config.theme;\n    // Apply theme class names\n    const textClassNames = theme.text;\n    if (textClassNames !== undefined && prevFormat !== nextFormat) {\n      setTextThemeClassNames(nextInnerTag, prevFormat, nextFormat, innerDOM, textClassNames);\n    }\n    const prevStyle = prevNode.__style;\n    const nextStyle = this.__style;\n    if (prevStyle !== nextStyle) {\n      dom.style.cssText = nextStyle;\n    }\n    return false;\n  }\n  static importDOM() {\n    return {\n      '#text': () => ({\n        conversion: convertTextDOMNode,\n        priority: 0\n      }),\n      b: () => ({\n        conversion: convertBringAttentionToElement,\n        priority: 0\n      }),\n      code: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      em: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      i: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      s: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      span: () => ({\n        conversion: convertSpanElement,\n        priority: 0\n      }),\n      strong: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sub: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      sup: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      }),\n      u: () => ({\n        conversion: convertTextFormatElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createTextNode(serializedNode.text);\n    node.setFormat(serializedNode.format);\n    node.setDetail(serializedNode.detail);\n    node.setMode(serializedNode.mode);\n    node.setStyle(serializedNode.style);\n    return node;\n  }\n\n  // This improves Lexical's basic text output in copy+paste plus\n  // for headless mode where people might use Lexical to generate\n  // HTML content and not have the ability to use CSS classes.\n  exportDOM(editor) {\n    let {\n      element\n    } = super.exportDOM(editor);\n    if (!(element !== null && isHTMLElement(element))) {\n      throw Error(`Expected TextNode createDOM to always return a HTMLElement`);\n    }\n    element.style.whiteSpace = 'pre-wrap';\n    // This is the only way to properly add support for most clients,\n    // even if it's semantically incorrect to have to resort to using\n    // <b>, <u>, <s>, <i> elements.\n    if (this.hasFormat('bold')) {\n      element = wrapElementWith(element, 'b');\n    }\n    if (this.hasFormat('italic')) {\n      element = wrapElementWith(element, 'i');\n    }\n    if (this.hasFormat('strikethrough')) {\n      element = wrapElementWith(element, 's');\n    }\n    if (this.hasFormat('underline')) {\n      element = wrapElementWith(element, 'u');\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      detail: this.getDetail(),\n      format: this.getFormat(),\n      mode: this.getMode(),\n      style: this.getStyle(),\n      text: this.getTextContent(),\n      type: 'text',\n      version: 1\n    };\n  }\n\n  // Mutators\n  selectionTransform(prevSelection, nextSelection) {\n    return;\n  }\n\n  /**\n   * Sets the node format to the provided TextFormatType or 32-bit integer. Note that the TextFormatType\n   * version of the argument can only specify one format and doing so will remove all other formats that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleFormat}\n   *\n   * @param format - TextFormatType or 32-bit integer representing the node format.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setFormat(format) {\n    const self = this.getWritable();\n    self.__format = typeof format === 'string' ? TEXT_TYPE_TO_FORMAT[format] : format;\n    return self;\n  }\n\n  /**\n   * Sets the node detail to the provided TextDetailType or 32-bit integer. Note that the TextDetailType\n   * version of the argument can only specify one detail value and doing so will remove all other detail values that\n   * may be applied to the node. For toggling behavior, consider using {@link TextNode.toggleDirectionless}\n   * or {@link TextNode.togglerUnmergeable}\n   *\n   * @param detail - TextDetailType or 32-bit integer representing the node detail.\n   *\n   * @returns this TextNode.\n   * // TODO 0.12 This should just be a `string`.\n   */\n  setDetail(detail) {\n    const self = this.getWritable();\n    self.__detail = typeof detail === 'string' ? DETAIL_TYPE_TO_DETAIL[detail] : detail;\n    return self;\n  }\n\n  /**\n   * Sets the node style to the provided CSSText-like string. Set this property as you\n   * would an HTMLElement style attribute to apply inline styles to the underlying DOM Element.\n   *\n   * @param style - CSSText to be applied to the underlying HTMLElement.\n   *\n   * @returns this TextNode.\n   */\n  setStyle(style) {\n    const self = this.getWritable();\n    self.__style = style;\n    return self;\n  }\n\n  /**\n   * Applies the provided format to this TextNode if it's not present. Removes it if it's present.\n   * The subscript and superscript formats are mutually exclusive.\n   * Prefer using this method to turn specific formats on and off.\n   *\n   * @param type - TextFormatType to toggle.\n   *\n   * @returns this TextNode.\n   */\n  toggleFormat(type) {\n    const format = this.getFormat();\n    const newFormat = toggleTextFormatType(format, type, null);\n    return this.setFormat(newFormat);\n  }\n\n  /**\n   * Toggles the directionless detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleDirectionless() {\n    const self = this.getWritable();\n    self.__detail ^= IS_DIRECTIONLESS;\n    return self;\n  }\n\n  /**\n   * Toggles the unmergeable detail value of the node. Prefer using this method over setDetail.\n   *\n   * @returns this TextNode.\n   */\n  toggleUnmergeable() {\n    const self = this.getWritable();\n    self.__detail ^= IS_UNMERGEABLE;\n    return self;\n  }\n\n  /**\n   * Sets the mode of the node.\n   *\n   * @returns this TextNode.\n   */\n  setMode(type) {\n    const mode = TEXT_MODE_TO_TYPE[type];\n    if (this.__mode === mode) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__mode = mode;\n    return self;\n  }\n\n  /**\n   * Sets the text content of the node.\n   *\n   * @param text - the string to set as the text value of the node.\n   *\n   * @returns this TextNode.\n   */\n  setTextContent(text) {\n    if (this.__text === text) {\n      return this;\n    }\n    const self = this.getWritable();\n    self.__text = text;\n    return self;\n  }\n\n  /**\n   * Sets the current Lexical selection to be a RangeSelection with anchor and focus on this TextNode at the provided offsets.\n   *\n   * @param _anchorOffset - the offset at which the Selection anchor will be placed.\n   * @param _focusOffset - the offset at which the Selection focus will be placed.\n   *\n   * @returns the new RangeSelection.\n   */\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const selection = $getSelection();\n    const text = this.getTextContent();\n    const key = this.__key;\n    if (typeof text === 'string') {\n      const lastOffset = text.length;\n      if (anchorOffset === undefined) {\n        anchorOffset = lastOffset;\n      }\n      if (focusOffset === undefined) {\n        focusOffset = lastOffset;\n      }\n    } else {\n      anchorOffset = 0;\n      focusOffset = 0;\n    }\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'text', 'text');\n    } else {\n      const compositionKey = $getCompositionKey();\n      if (compositionKey === selection.anchor.key || compositionKey === selection.focus.key) {\n        $setCompositionKey(key);\n      }\n      selection.setTextNodeRange(this, anchorOffset, this, focusOffset);\n    }\n    return selection;\n  }\n  selectStart() {\n    return this.select(0, 0);\n  }\n  selectEnd() {\n    const size = this.getTextContentSize();\n    return this.select(size, size);\n  }\n\n  /**\n   * Inserts the provided text into this TextNode at the provided offset, deleting the number of characters\n   * specified. Can optionally calculate a new selection after the operation is complete.\n   *\n   * @param offset - the offset at which the splice operation should begin.\n   * @param delCount - the number of characters to delete, starting from the offset.\n   * @param newText - the text to insert into the TextNode at the offset.\n   * @param moveSelection - optional, whether or not to move selection to the end of the inserted substring.\n   *\n   * @returns this TextNode.\n   */\n  spliceText(offset, delCount, newText, moveSelection) {\n    const writableSelf = this.getWritable();\n    const text = writableSelf.__text;\n    const handledTextLength = newText.length;\n    let index = offset;\n    if (index < 0) {\n      index = handledTextLength + index;\n      if (index < 0) {\n        index = 0;\n      }\n    }\n    const selection = $getSelection();\n    if (moveSelection && $isRangeSelection(selection)) {\n      const newOffset = offset + handledTextLength;\n      selection.setTextNodeRange(writableSelf, newOffset, writableSelf, newOffset);\n    }\n    const updatedText = text.slice(0, index) + newText + text.slice(index + delCount);\n    writableSelf.__text = updatedText;\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted before them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted before the node, false otherwise.\n   */\n  canInsertTextBefore() {\n    return true;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when a user event would cause text to be inserted after them in the editor. If true, Lexical will attempt\n   * to insert text into this node. If false, it will insert the text in a new sibling node.\n   *\n   * @returns true if text can be inserted after the node, false otherwise.\n   */\n  canInsertTextAfter() {\n    return true;\n  }\n\n  /**\n   * Splits this TextNode at the provided character offsets, forming new TextNodes from the substrings\n   * formed by the split, and inserting those new TextNodes into the editor, replacing the one that was split.\n   *\n   * @param splitOffsets - rest param of the text content character offsets at which this node should be split.\n   *\n   * @returns an Array containing the newly-created TextNodes.\n   */\n  splitText(...splitOffsets) {\n    errorOnReadOnly();\n    const self = this.getLatest();\n    const textContent = self.getTextContent();\n    const key = self.__key;\n    const compositionKey = $getCompositionKey();\n    const offsetsSet = new Set(splitOffsets);\n    const parts = [];\n    const textLength = textContent.length;\n    let string = '';\n    for (let i = 0; i < textLength; i++) {\n      if (string !== '' && offsetsSet.has(i)) {\n        parts.push(string);\n        string = '';\n      }\n      string += textContent[i];\n    }\n    if (string !== '') {\n      parts.push(string);\n    }\n    const partsLength = parts.length;\n    if (partsLength === 0) {\n      return [];\n    } else if (parts[0] === textContent) {\n      return [self];\n    }\n    const firstPart = parts[0];\n    const parent = self.getParentOrThrow();\n    let writableNode;\n    const format = self.getFormat();\n    const style = self.getStyle();\n    const detail = self.__detail;\n    let hasReplacedSelf = false;\n    if (self.isSegmented()) {\n      // Create a new TextNode\n      writableNode = $createTextNode(firstPart);\n      writableNode.__format = format;\n      writableNode.__style = style;\n      writableNode.__detail = detail;\n      hasReplacedSelf = true;\n    } else {\n      // For the first part, update the existing node\n      writableNode = self.getWritable();\n      writableNode.__text = firstPart;\n    }\n\n    // Handle selection\n    const selection = $getSelection();\n\n    // Then handle all other parts\n    const splitNodes = [writableNode];\n    let textSize = firstPart.length;\n    for (let i = 1; i < partsLength; i++) {\n      const part = parts[i];\n      const partSize = part.length;\n      const sibling = $createTextNode(part).getWritable();\n      sibling.__format = format;\n      sibling.__style = style;\n      sibling.__detail = detail;\n      const siblingKey = sibling.__key;\n      const nextTextSize = textSize + partSize;\n      if ($isRangeSelection(selection)) {\n        const anchor = selection.anchor;\n        const focus = selection.focus;\n        if (anchor.key === key && anchor.type === 'text' && anchor.offset > textSize && anchor.offset <= nextTextSize) {\n          anchor.key = siblingKey;\n          anchor.offset -= textSize;\n          selection.dirty = true;\n        }\n        if (focus.key === key && focus.type === 'text' && focus.offset > textSize && focus.offset <= nextTextSize) {\n          focus.key = siblingKey;\n          focus.offset -= textSize;\n          selection.dirty = true;\n        }\n      }\n      if (compositionKey === key) {\n        $setCompositionKey(siblingKey);\n      }\n      textSize = nextTextSize;\n      splitNodes.push(sibling);\n    }\n\n    // Insert the nodes into the parent's children\n    internalMarkSiblingsAsDirty(this);\n    const writableParent = parent.getWritable();\n    const insertionIndex = this.getIndexWithinParent();\n    if (hasReplacedSelf) {\n      writableParent.splice(insertionIndex, 0, splitNodes);\n      this.remove();\n    } else {\n      writableParent.splice(insertionIndex, 1, splitNodes);\n    }\n    if ($isRangeSelection(selection)) {\n      $updateElementSelectionOnCreateDeleteNode(selection, parent, insertionIndex, partsLength - 1);\n    }\n    return splitNodes;\n  }\n\n  /**\n   * Merges the target TextNode into this TextNode, removing the target node.\n   *\n   * @param target - the TextNode to merge into this one.\n   *\n   * @returns this TextNode.\n   */\n  mergeWithSibling(target) {\n    const isBefore = target === this.getPreviousSibling();\n    if (!isBefore && target !== this.getNextSibling()) {\n      {\n        throw Error(`mergeWithSibling: sibling must be a previous or next sibling`);\n      }\n    }\n    const key = this.__key;\n    const targetKey = target.__key;\n    const text = this.__text;\n    const textLength = text.length;\n    const compositionKey = $getCompositionKey();\n    if (compositionKey === targetKey) {\n      $setCompositionKey(key);\n    }\n    const selection = $getSelection();\n    if ($isRangeSelection(selection)) {\n      const anchor = selection.anchor;\n      const focus = selection.focus;\n      if (anchor !== null && anchor.key === targetKey) {\n        adjustPointOffsetForMergedSibling(anchor, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n      if (focus !== null && focus.key === targetKey) {\n        adjustPointOffsetForMergedSibling(focus, isBefore, key, target, textLength);\n        selection.dirty = true;\n      }\n    }\n    const targetText = target.__text;\n    const newText = isBefore ? targetText + text : text + targetText;\n    this.setTextContent(newText);\n    const writableSelf = this.getWritable();\n    target.remove();\n    return writableSelf;\n  }\n\n  /**\n   * This method is meant to be overriden by TextNode subclasses to control the behavior of those nodes\n   * when used with the registerLexicalTextEntity function. If you're using registerLexicalTextEntity, the\n   * node class that you create and replace matched text with should return true from this method.\n   *\n   * @returns true if the node is to be treated as a \"text entity\", false otherwise.\n   */\n  isTextEntity() {\n    return false;\n  }\n}\nfunction convertSpanElement(domNode) {\n  // domNode is a <span> since we matched it by nodeName\n  const span = domNode;\n  // Google Docs uses span tags + font-weight for bold text\n  const hasBoldFontWeight = span.style.fontWeight === '700';\n  // Google Docs uses span tags + text-decoration: line-through for strikethrough text\n  const hasLinethroughTextDecoration = span.style.textDecoration === 'line-through';\n  // Google Docs uses span tags + font-style for italic text\n  const hasItalicFontStyle = span.style.fontStyle === 'italic';\n  // Google Docs uses span tags + text-decoration: underline for underline text\n  const hasUnderlineTextDecoration = span.style.textDecoration === 'underline';\n  // Google Docs uses span tags + vertical-align to specify subscript and superscript\n  const verticalAlign = span.style.verticalAlign;\n  return {\n    forChild: lexicalNode => {\n      if (!$isTextNode(lexicalNode)) {\n        return lexicalNode;\n      }\n      if (hasBoldFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      if (hasLinethroughTextDecoration) {\n        lexicalNode.toggleFormat('strikethrough');\n      }\n      if (hasItalicFontStyle) {\n        lexicalNode.toggleFormat('italic');\n      }\n      if (hasUnderlineTextDecoration) {\n        lexicalNode.toggleFormat('underline');\n      }\n      if (verticalAlign === 'sub') {\n        lexicalNode.toggleFormat('subscript');\n      }\n      if (verticalAlign === 'super') {\n        lexicalNode.toggleFormat('superscript');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction convertBringAttentionToElement(domNode) {\n  // domNode is a <b> since we matched it by nodeName\n  const b = domNode;\n  // Google Docs wraps all copied HTML in a <b> with font-weight normal\n  const hasNormalFontWeight = b.style.fontWeight === 'normal';\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !hasNormalFontWeight) {\n        lexicalNode.toggleFormat('bold');\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nconst preParentCache = new WeakMap();\nfunction isNodePre(node) {\n  return node.nodeName === 'PRE' || node.nodeType === DOM_ELEMENT_TYPE && node.style !== undefined && node.style.whiteSpace !== undefined && node.style.whiteSpace.startsWith('pre');\n}\nfunction findParentPreDOMNode(node) {\n  let cached;\n  let parent = node.parentNode;\n  const visited = [node];\n  while (parent !== null && (cached = preParentCache.get(parent)) === undefined && !isNodePre(parent)) {\n    visited.push(parent);\n    parent = parent.parentNode;\n  }\n  const resultNode = cached === undefined ? parent : cached;\n  for (let i = 0; i < visited.length; i++) {\n    preParentCache.set(visited[i], resultNode);\n  }\n  return resultNode;\n}\nfunction convertTextDOMNode(domNode) {\n  const domNode_ = domNode;\n  const parentDom = domNode.parentElement;\n  if (!(parentDom !== null)) {\n    throw Error(`Expected parentElement of Text not to be null`);\n  }\n  let textContent = domNode_.textContent || '';\n  // No collapse and preserve segment break for pre, pre-wrap and pre-line\n  if (findParentPreDOMNode(domNode_) !== null) {\n    const parts = textContent.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else if (part !== '') {\n        nodes.push($createTextNode(part));\n      }\n    }\n    return {\n      node: nodes\n    };\n  }\n  textContent = textContent.replace(/\\r/g, '').replace(/[ \\t\\n]+/g, ' ');\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  if (textContent[0] === ' ') {\n    // Traverse backward while in the same line. If content contains new line or tab -> pontential\n    // delete, other elements can borrow from this one. Deletion depends on whether it's also the\n    // last space (see next condition: textContent[textContent.length - 1] === ' '))\n    let previousText = domNode_;\n    let isStartOfLine = true;\n    while (previousText !== null && (previousText = findTextInLine(previousText, false)) !== null) {\n      const previousTextContent = previousText.textContent || '';\n      if (previousTextContent.length > 0) {\n        if (/[ \\t\\n]$/.test(previousTextContent)) {\n          textContent = textContent.slice(1);\n        }\n        isStartOfLine = false;\n        break;\n      }\n    }\n    if (isStartOfLine) {\n      textContent = textContent.slice(1);\n    }\n  }\n  if (textContent[textContent.length - 1] === ' ') {\n    // Traverse forward while in the same line, preserve if next inline will require a space\n    let nextText = domNode_;\n    let isEndOfLine = true;\n    while (nextText !== null && (nextText = findTextInLine(nextText, true)) !== null) {\n      const nextTextContent = (nextText.textContent || '').replace(/^( |\\t|\\r?\\n)+/, '');\n      if (nextTextContent.length > 0) {\n        isEndOfLine = false;\n        break;\n      }\n    }\n    if (isEndOfLine) {\n      textContent = textContent.slice(0, textContent.length - 1);\n    }\n  }\n  if (textContent === '') {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: $createTextNode(textContent)\n  };\n}\nconst inlineParents = new RegExp(/^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/, 'i');\nfunction findTextInLine(text, forward) {\n  let node = text;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let sibling;\n    while ((sibling = forward ? node.nextSibling : node.previousSibling) === null) {\n      const parentElement = node.parentElement;\n      if (parentElement === null) {\n        return null;\n      }\n      node = parentElement;\n    }\n    node = sibling;\n    if (node.nodeType === DOM_ELEMENT_TYPE) {\n      const display = node.style.display;\n      if (display === '' && node.nodeName.match(inlineParents) === null || display !== '' && !display.startsWith('inline')) {\n        return null;\n      }\n    }\n    let descendant = node;\n    while ((descendant = forward ? node.firstChild : node.lastChild) !== null) {\n      node = descendant;\n    }\n    if (node.nodeType === DOM_TEXT_TYPE) {\n      return node;\n    } else if (node.nodeName === 'BR') {\n      return null;\n    }\n  }\n}\nconst nodeNameToTextFormat = {\n  code: 'code',\n  em: 'italic',\n  i: 'italic',\n  s: 'strikethrough',\n  strong: 'bold',\n  sub: 'subscript',\n  sup: 'superscript',\n  u: 'underline'\n};\nfunction convertTextFormatElement(domNode) {\n  const format = nodeNameToTextFormat[domNode.nodeName.toLowerCase()];\n  if (format === undefined) {\n    return {\n      node: null\n    };\n  }\n  return {\n    forChild: lexicalNode => {\n      if ($isTextNode(lexicalNode) && !lexicalNode.hasFormat(format)) {\n        lexicalNode.toggleFormat(format);\n      }\n      return lexicalNode;\n    },\n    node: null\n  };\n}\nfunction $createTextNode(text = '') {\n  return $applyNodeReplacement(new TextNode(text));\n}\nfunction $isTextNode(node) {\n  return node instanceof TextNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TabNode extends TextNode {\n  static getType() {\n    return 'tab';\n  }\n  static clone(node) {\n    const newNode = new TabNode(node.__key);\n    // TabNode __text can be either '\\t' or ''. insertText will remove the empty Node\n    newNode.__text = node.__text;\n    newNode.__format = node.__format;\n    newNode.__style = node.__style;\n    return newNode;\n  }\n  constructor(key) {\n    super('\\t', key);\n    this.__detail = IS_UNMERGEABLE;\n  }\n  static importDOM() {\n    return null;\n  }\n  static importJSON(serializedTabNode) {\n    const node = $createTabNode();\n    node.setFormat(serializedTabNode.format);\n    node.setStyle(serializedTabNode.style);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tab',\n      version: 1\n    };\n  }\n  setTextContent(_text) {\n    {\n      throw Error(`TabNode does not support setTextContent`);\n    }\n  }\n  setDetail(_detail) {\n    {\n      throw Error(`TabNode does not support setDetail`);\n    }\n  }\n  setMode(_type) {\n    {\n      throw Error(`TabNode does not support setMode`);\n    }\n  }\n  canInsertTextBefore() {\n    return false;\n  }\n  canInsertTextAfter() {\n    return false;\n  }\n}\nfunction $createTabNode() {\n  return $applyNodeReplacement(new TabNode());\n}\nfunction $isTabNode(node) {\n  return node instanceof TabNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass Point {\n  constructor(key, offset, type) {\n    this._selection = null;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n  }\n  is(point) {\n    return this.key === point.key && this.offset === point.offset && this.type === point.type;\n  }\n  isBefore(b) {\n    let aNode = this.getNode();\n    let bNode = b.getNode();\n    const aOffset = this.offset;\n    const bOffset = b.offset;\n    if ($isElementNode(aNode)) {\n      const aNodeDescendant = aNode.getDescendantByIndex(aOffset);\n      aNode = aNodeDescendant != null ? aNodeDescendant : aNode;\n    }\n    if ($isElementNode(bNode)) {\n      const bNodeDescendant = bNode.getDescendantByIndex(bOffset);\n      bNode = bNodeDescendant != null ? bNodeDescendant : bNode;\n    }\n    if (aNode === bNode) {\n      return aOffset < bOffset;\n    }\n    return aNode.isBefore(bNode);\n  }\n  getNode() {\n    const key = this.key;\n    const node = $getNodeByKey(key);\n    if (node === null) {\n      {\n        throw Error(`Point.getNode: node not found`);\n      }\n    }\n    return node;\n  }\n  set(key, offset, type) {\n    const selection = this._selection;\n    const oldKey = this.key;\n    this.key = key;\n    this.offset = offset;\n    this.type = type;\n    if (!isCurrentlyReadOnlyMode()) {\n      if ($getCompositionKey() === oldKey) {\n        $setCompositionKey(key);\n      }\n      if (selection !== null) {\n        selection.setCachedNodes(null);\n        selection.dirty = true;\n      }\n    }\n  }\n}\nfunction $createPoint(key, offset, type) {\n  // @ts-expect-error: intentionally cast as we use a class for perf reasons\n  return new Point(key, offset, type);\n}\nfunction selectPointOnNode(point, node) {\n  let key = node.__key;\n  let offset = point.offset;\n  let type = 'element';\n  if ($isTextNode(node)) {\n    type = 'text';\n    const textContentLength = node.getTextContentSize();\n    if (offset > textContentLength) {\n      offset = textContentLength;\n    }\n  } else if (!$isElementNode(node)) {\n    const nextSibling = node.getNextSibling();\n    if ($isTextNode(nextSibling)) {\n      key = nextSibling.__key;\n      offset = 0;\n      type = 'text';\n    } else {\n      const parentNode = node.getParent();\n      if (parentNode) {\n        key = parentNode.__key;\n        offset = node.getIndexWithinParent() + 1;\n      }\n    }\n  }\n  point.set(key, offset, type);\n}\nfunction $moveSelectionPointToEnd(point, node) {\n  if ($isElementNode(node)) {\n    const lastNode = node.getLastDescendant();\n    if ($isElementNode(lastNode) || $isTextNode(lastNode)) {\n      selectPointOnNode(point, lastNode);\n    } else {\n      selectPointOnNode(point, node);\n    }\n  } else {\n    selectPointOnNode(point, node);\n  }\n}\nfunction $transferStartingElementPointToTextPoint(start, end, format, style) {\n  const element = start.getNode();\n  const placementNode = element.getChildAtIndex(start.offset);\n  const textNode = $createTextNode();\n  const target = $isRootNode(element) ? $createParagraphNode().append(textNode) : textNode;\n  textNode.setFormat(format);\n  textNode.setStyle(style);\n  if (placementNode === null) {\n    element.append(target);\n  } else {\n    placementNode.insertBefore(target);\n  }\n  // Transfer the element point to a text point.\n  if (start.is(end)) {\n    end.set(textNode.__key, 0, 'text');\n  }\n  start.set(textNode.__key, 0, 'text');\n}\nfunction $setPointValues(point, key, offset, type) {\n  point.key = key;\n  point.offset = offset;\n  point.type = type;\n}\nclass NodeSelection {\n  constructor(objects) {\n    this._cachedNodes = null;\n    this._nodes = objects;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isNodeSelection(selection)) {\n      return false;\n    }\n    const a = this._nodes;\n    const b = selection._nodes;\n    return a.size === b.size && Array.from(a).every(key => b.has(key));\n  }\n  isCollapsed() {\n    return false;\n  }\n  isBackward() {\n    return false;\n  }\n  getStartEndPoints() {\n    return null;\n  }\n  add(key) {\n    this.dirty = true;\n    this._nodes.add(key);\n    this._cachedNodes = null;\n  }\n  delete(key) {\n    this.dirty = true;\n    this._nodes.delete(key);\n    this._cachedNodes = null;\n  }\n  clear() {\n    this.dirty = true;\n    this._nodes.clear();\n    this._cachedNodes = null;\n  }\n  has(key) {\n    return this._nodes.has(key);\n  }\n  clone() {\n    return new NodeSelection(new Set(this._nodes));\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastSelectedNode = selectedNodes[selectedNodesLength - 1];\n    let selectionAtEnd;\n    // Insert nodes\n    if ($isTextNode(lastSelectedNode)) {\n      selectionAtEnd = lastSelectedNode.select();\n    } else {\n      const index = lastSelectedNode.getIndexWithinParent() + 1;\n      selectionAtEnd = lastSelectedNode.getParentOrThrow().select(index, index);\n    }\n    selectionAtEnd.insertNodes(nodes);\n    // Remove selected nodes\n    for (let i = 0; i < selectedNodesLength; i++) {\n      selectedNodes[i].remove();\n    }\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const objects = this._nodes;\n    const nodes = [];\n    for (const object of objects) {\n      const node = $getNodeByKey(object);\n      if (node !== null) {\n        nodes.push(node);\n      }\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isRangeSelection(x) {\n  return x instanceof RangeSelection;\n}\nclass RangeSelection {\n  constructor(anchor, focus, format, style) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.format = format;\n    this.style = style;\n    this.dirty = false;\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n\n  /**\n   * Used to check if the provided selections is equal to this one by value,\n   * inluding anchor, focus, format, and style properties.\n   * @param selection - the Selection to compare this one to.\n   * @returns true if the Selections are equal, false otherwise.\n   */\n  is(selection) {\n    if (!$isRangeSelection(selection)) {\n      return false;\n    }\n    return this.anchor.is(selection.anchor) && this.focus.is(selection.focus) && this.format === selection.format && this.style === selection.style;\n  }\n\n  /**\n   * Returns whether the Selection is \"collapsed\", meaning the anchor and focus are\n   * the same node and have the same offset.\n   *\n   * @returns true if the Selection is collapsed, false otherwise.\n   */\n  isCollapsed() {\n    return this.anchor.is(this.focus);\n  }\n\n  /**\n   * Gets all the nodes in the Selection. Uses caching to make it generally suitable\n   * for use in hot paths.\n   *\n   * @returns an Array containing all the nodes in the Selection\n   */\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const firstPoint = isBefore ? anchor : focus;\n    const lastPoint = isBefore ? focus : anchor;\n    let firstNode = firstPoint.getNode();\n    let lastNode = lastPoint.getNode();\n    const startOffset = firstPoint.offset;\n    const endOffset = lastPoint.offset;\n    if ($isElementNode(firstNode)) {\n      const firstNodeDescendant = firstNode.getDescendantByIndex(startOffset);\n      firstNode = firstNodeDescendant != null ? firstNodeDescendant : firstNode;\n    }\n    if ($isElementNode(lastNode)) {\n      let lastNodeDescendant = lastNode.getDescendantByIndex(endOffset);\n      // We don't want to over-select, as node selection infers the child before\n      // the last descendant, not including that descendant.\n      if (lastNodeDescendant !== null && lastNodeDescendant !== firstNode && lastNode.getChildAtIndex(endOffset) === lastNodeDescendant) {\n        lastNodeDescendant = lastNodeDescendant.getPreviousSibling();\n      }\n      lastNode = lastNodeDescendant != null ? lastNodeDescendant : lastNode;\n    }\n    let nodes;\n    if (firstNode.is(lastNode)) {\n      if ($isElementNode(firstNode) && firstNode.getChildrenSize() > 0) {\n        nodes = [];\n      } else {\n        nodes = [firstNode];\n      }\n    } else {\n      nodes = firstNode.getNodesBetween(lastNode);\n    }\n    if (!isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n\n  /**\n   * Sets this Selection to be of type \"text\" at the provided anchor and focus values.\n   *\n   * @param anchorNode - the anchor node to set on the Selection\n   * @param anchorOffset - the offset to set on the Selection\n   * @param focusNode - the focus node to set on the Selection\n   * @param focusOffset - the focus offset to set on the Selection\n   */\n  setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset) {\n    $setPointValues(this.anchor, anchorNode.__key, anchorOffset, 'text');\n    $setPointValues(this.focus, focusNode.__key, focusOffset, 'text');\n    this._cachedNodes = null;\n    this.dirty = true;\n  }\n\n  /**\n   * Gets the (plain) text content of all the nodes in the selection.\n   *\n   * @returns a string representing the text content of all the nodes in the Selection\n   */\n  getTextContent() {\n    const nodes = this.getNodes();\n    if (nodes.length === 0) {\n      return '';\n    }\n    const firstNode = nodes[0];\n    const lastNode = nodes[nodes.length - 1];\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = anchor.isBefore(focus);\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    let textContent = '';\n    let prevWasElement = true;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if ($isElementNode(node) && !node.isInline()) {\n        if (!prevWasElement) {\n          textContent += '\\n';\n        }\n        if (node.isEmpty()) {\n          prevWasElement = false;\n        } else {\n          prevWasElement = true;\n        }\n      } else {\n        prevWasElement = false;\n        if ($isTextNode(node)) {\n          let text = node.getTextContent();\n          if (node === firstNode) {\n            if (node === lastNode) {\n              if (anchor.type !== 'element' || focus.type !== 'element' || focus.offset === anchor.offset) {\n                text = anchorOffset < focusOffset ? text.slice(anchorOffset, focusOffset) : text.slice(focusOffset, anchorOffset);\n              }\n            } else {\n              text = isBefore ? text.slice(anchorOffset) : text.slice(focusOffset);\n            }\n          } else if (node === lastNode) {\n            text = isBefore ? text.slice(0, focusOffset) : text.slice(0, anchorOffset);\n          }\n          textContent += text;\n        } else if (($isDecoratorNode(node) || $isLineBreakNode(node)) && (node !== lastNode || !this.isCollapsed())) {\n          textContent += node.getTextContent();\n        }\n      }\n    }\n    return textContent;\n  }\n\n  /**\n   * Attempts to map a DOM selection range onto this Lexical Selection,\n   * setting the anchor, focus, and type accordingly\n   *\n   * @param range a DOM Selection range conforming to the StaticRange interface.\n   */\n  applyDOMRange(range) {\n    const editor = getActiveEditor();\n    const currentEditorState = editor.getEditorState();\n    const lastSelection = currentEditorState._selection;\n    const resolvedSelectionPoints = internalResolveSelectionPoints(range.startContainer, range.startOffset, range.endContainer, range.endOffset, editor, lastSelection);\n    if (resolvedSelectionPoints === null) {\n      return;\n    }\n    const [anchorPoint, focusPoint] = resolvedSelectionPoints;\n    $setPointValues(this.anchor, anchorPoint.key, anchorPoint.offset, anchorPoint.type);\n    $setPointValues(this.focus, focusPoint.key, focusPoint.offset, focusPoint.type);\n    this._cachedNodes = null;\n  }\n\n  /**\n   * Creates a new RangeSelection, copying over all the property values from this one.\n   *\n   * @returns a new RangeSelection with the same property values as this one.\n   */\n  clone() {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const selection = new RangeSelection($createPoint(anchor.key, anchor.offset, anchor.type), $createPoint(focus.key, focus.offset, focus.type), this.format, this.style);\n    return selection;\n  }\n\n  /**\n   * Toggles the provided format on all the TextNodes in the Selection.\n   *\n   * @param format a string TextFormatType to toggle on the TextNodes in the selection\n   */\n  toggleFormat(format) {\n    this.format = toggleTextFormatType(this.format, format, null);\n    this.dirty = true;\n  }\n\n  /**\n   * Sets the value of the style property on the Selection\n   *\n   * @param style - the style to set at the value of the style property.\n   */\n  setStyle(style) {\n    this.style = style;\n    this.dirty = true;\n  }\n\n  /**\n   * Returns whether the provided TextFormatType is present on the Selection. This will be true if any node in the Selection\n   * has the specified format.\n   *\n   * @param type the TextFormatType to check for.\n   * @returns true if the provided format is currently toggled on on the Selection, false otherwise.\n   */\n  hasFormat(type) {\n    const formatFlag = TEXT_TYPE_TO_FORMAT[type];\n    return (this.format & formatFlag) !== 0;\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection.\n   * converts tabs, newlines, and carriage returns into LexicalNodes.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertRawText(text) {\n    const parts = text.split(/(\\r?\\n|\\t)/);\n    const nodes = [];\n    const length = parts.length;\n    for (let i = 0; i < length; i++) {\n      const part = parts[i];\n      if (part === '\\n' || part === '\\r\\n') {\n        nodes.push($createLineBreakNode());\n      } else if (part === '\\t') {\n        nodes.push($createTabNode());\n      } else {\n        nodes.push($createTextNode(part));\n      }\n    }\n    this.insertNodes(nodes);\n  }\n\n  /**\n   * Attempts to insert the provided text into the EditorState at the current Selection as a new\n   * Lexical TextNode, according to a series of insertion heuristics based on the selection type and position.\n   *\n   * @param text the text to insert into the Selection\n   */\n  insertText(text) {\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBefore = this.isCollapsed() || anchor.isBefore(focus);\n    const format = this.format;\n    const style = this.style;\n    if (isBefore && anchor.type === 'element') {\n      $transferStartingElementPointToTextPoint(anchor, focus, format, style);\n    } else if (!isBefore && focus.type === 'element') {\n      $transferStartingElementPointToTextPoint(focus, anchor, format, style);\n    }\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const firstPoint = isBefore ? anchor : focus;\n    const endPoint = isBefore ? focus : anchor;\n    const startOffset = firstPoint.offset;\n    const endOffset = endPoint.offset;\n    let firstNode = selectedNodes[0];\n    if (!$isTextNode(firstNode)) {\n      {\n        throw Error(`insertText: first node is not a text node`);\n      }\n    }\n    const firstNodeText = firstNode.getTextContent();\n    const firstNodeTextLength = firstNodeText.length;\n    const firstNodeParent = firstNode.getParentOrThrow();\n    const lastIndex = selectedNodesLength - 1;\n    let lastNode = selectedNodes[lastIndex];\n    if (this.isCollapsed() && startOffset === firstNodeTextLength && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextAfter() || !firstNodeParent.canInsertTextAfter() && firstNode.getNextSibling() === null)) {\n      let nextSibling = firstNode.getNextSibling();\n      if (!$isTextNode(nextSibling) || !nextSibling.canInsertTextBefore() || $isTokenOrSegmented(nextSibling)) {\n        nextSibling = $createTextNode();\n        nextSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextAfter()) {\n          firstNodeParent.insertAfter(nextSibling);\n        } else {\n          firstNode.insertAfter(nextSibling);\n        }\n      }\n      nextSibling.select(0, 0);\n      firstNode = nextSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (this.isCollapsed() && startOffset === 0 && (firstNode.isSegmented() || firstNode.isToken() || !firstNode.canInsertTextBefore() || !firstNodeParent.canInsertTextBefore() && firstNode.getPreviousSibling() === null)) {\n      let prevSibling = firstNode.getPreviousSibling();\n      if (!$isTextNode(prevSibling) || $isTokenOrSegmented(prevSibling)) {\n        prevSibling = $createTextNode();\n        prevSibling.setFormat(format);\n        if (!firstNodeParent.canInsertTextBefore()) {\n          firstNodeParent.insertBefore(prevSibling);\n        } else {\n          firstNode.insertBefore(prevSibling);\n        }\n      }\n      prevSibling.select();\n      firstNode = prevSibling;\n      if (text !== '') {\n        this.insertText(text);\n        return;\n      }\n    } else if (firstNode.isSegmented() && startOffset !== firstNodeTextLength) {\n      const textNode = $createTextNode(firstNode.getTextContent());\n      textNode.setFormat(format);\n      firstNode.replace(textNode);\n      firstNode = textNode;\n    } else if (!this.isCollapsed() && text !== '') {\n      // When the firstNode or lastNode parents are elements that\n      // do not allow text to be inserted before or after, we first\n      // clear the content. Then we normalize selection, then insert\n      // the new content.\n      const lastNodeParent = lastNode.getParent();\n      if (!firstNodeParent.canInsertTextBefore() || !firstNodeParent.canInsertTextAfter() || $isElementNode(lastNodeParent) && (!lastNodeParent.canInsertTextBefore() || !lastNodeParent.canInsertTextAfter())) {\n        this.insertText('');\n        normalizeSelectionPointsForBoundaries(this.anchor, this.focus, null);\n        this.insertText(text);\n        return;\n      }\n    }\n    if (selectedNodesLength === 1) {\n      if (firstNode.isToken()) {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const firstNodeFormat = firstNode.getFormat();\n      const firstNodeStyle = firstNode.getStyle();\n      if (startOffset === endOffset && (firstNodeFormat !== format || firstNodeStyle !== style)) {\n        if (firstNode.getTextContent() === '') {\n          firstNode.setFormat(format);\n          firstNode.setStyle(style);\n        } else {\n          const textNode = $createTextNode(text);\n          textNode.setFormat(format);\n          textNode.setStyle(style);\n          textNode.select();\n          if (startOffset === 0) {\n            firstNode.insertBefore(textNode, false);\n          } else {\n            const [targetNode] = firstNode.splitText(startOffset);\n            targetNode.insertAfter(textNode, false);\n          }\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          if (textNode.isComposing() && this.anchor.type === 'text') {\n            this.anchor.offset -= text.length;\n          }\n          return;\n        }\n      } else if ($isTabNode(firstNode)) {\n        // We don't need to check for delCount because there is only the entire selected node case\n        // that can hit here for content size 1 and with canInsertTextBeforeAfter false\n        const textNode = $createTextNode(text);\n        textNode.setFormat(format);\n        textNode.setStyle(style);\n        textNode.select();\n        firstNode.replace(textNode);\n        return;\n      }\n      const delCount = endOffset - startOffset;\n      firstNode = firstNode.spliceText(startOffset, delCount, text, true);\n      if (firstNode.getTextContent() === '') {\n        firstNode.remove();\n      } else if (this.anchor.type === 'text') {\n        if (firstNode.isComposing()) {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        } else {\n          this.format = firstNodeFormat;\n          this.style = firstNodeStyle;\n        }\n      }\n    } else {\n      const markedNodeKeysForKeep = new Set([...firstNode.getParentKeys(), ...lastNode.getParentKeys()]);\n\n      // We have to get the parent elements before the next section,\n      // as in that section we might mutate the lastNode.\n      const firstElement = $isElementNode(firstNode) ? firstNode : firstNode.getParentOrThrow();\n      let lastElement = $isElementNode(lastNode) ? lastNode : lastNode.getParentOrThrow();\n      let lastElementChild = lastNode;\n\n      // If the last element is inline, we should instead look at getting\n      // the nodes of its parent, rather than itself. This behavior will\n      // then better match how text node insertions work. We will need to\n      // also update the last element's child accordingly as we do this.\n      if (!firstElement.is(lastElement) && lastElement.isInline()) {\n        // Keep traversing till we have a non-inline element parent.\n        do {\n          lastElementChild = lastElement;\n          lastElement = lastElement.getParentOrThrow();\n        } while (lastElement.isInline());\n      }\n\n      // Handle mutations to the last node.\n      if (endPoint.type === 'text' && (endOffset !== 0 || lastNode.getTextContent() === '') || endPoint.type === 'element' && lastNode.getIndexWithinParent() < endOffset) {\n        if ($isTextNode(lastNode) && !lastNode.isToken() && endOffset !== lastNode.getTextContentSize()) {\n          if (lastNode.isSegmented()) {\n            const textNode = $createTextNode(lastNode.getTextContent());\n            lastNode.replace(textNode);\n            lastNode = textNode;\n          }\n          // root node selections only select whole nodes, so no text splice is necessary\n          if (!$isRootNode(endPoint.getNode()) && endPoint.type === 'text') {\n            lastNode = lastNode.spliceText(0, endOffset, '');\n          }\n          markedNodeKeysForKeep.add(lastNode.__key);\n        } else {\n          const lastNodeParent = lastNode.getParentOrThrow();\n          if (!lastNodeParent.canBeEmpty() && lastNodeParent.getChildrenSize() === 1) {\n            lastNodeParent.remove();\n          } else {\n            lastNode.remove();\n          }\n        }\n      } else {\n        markedNodeKeysForKeep.add(lastNode.__key);\n      }\n\n      // Either move the remaining nodes of the last parent to after\n      // the first child, or remove them entirely. If the last parent\n      // is the same as the first parent, this logic also works.\n      const lastNodeChildren = lastElement.getChildren();\n      const selectedNodesSet = new Set(selectedNodes);\n      const firstAndLastElementsAreEqual = firstElement.is(lastElement);\n\n      // We choose a target to insert all nodes after. In the case of having\n      // and inline starting parent element with a starting node that has no\n      // siblings, we should insert after the starting parent element, otherwise\n      // we will incorrectly merge into the starting parent element.\n      // TODO: should we keep on traversing parents if we're inside another\n      // nested inline element?\n      const insertionTarget = firstElement.isInline() && firstNode.getNextSibling() === null ? firstElement : firstNode;\n      for (let i = lastNodeChildren.length - 1; i >= 0; i--) {\n        const lastNodeChild = lastNodeChildren[i];\n        if (lastNodeChild.is(firstNode) || $isElementNode(lastNodeChild) && lastNodeChild.isParentOf(firstNode)) {\n          break;\n        }\n        if (lastNodeChild.isAttached()) {\n          if (!selectedNodesSet.has(lastNodeChild) || lastNodeChild.is(lastElementChild)) {\n            if (!firstAndLastElementsAreEqual) {\n              insertionTarget.insertAfter(lastNodeChild, false);\n            }\n          } else {\n            lastNodeChild.remove();\n          }\n        }\n      }\n      if (!firstAndLastElementsAreEqual) {\n        // Check if we have already moved out all the nodes of the\n        // last parent, and if so, traverse the parent tree and mark\n        // them all as being able to deleted too.\n        let parent = lastElement;\n        let lastRemovedParent = null;\n        while (parent !== null) {\n          const children = parent.getChildren();\n          const childrenLength = children.length;\n          if (childrenLength === 0 || children[childrenLength - 1].is(lastRemovedParent)) {\n            markedNodeKeysForKeep.delete(parent.__key);\n            lastRemovedParent = parent;\n          }\n          parent = parent.getParent();\n        }\n      }\n\n      // Ensure we do splicing after moving of nodes, as splicing\n      // can have side-effects (in the case of hashtags).\n      if (!firstNode.isToken()) {\n        firstNode = firstNode.spliceText(startOffset, firstNodeTextLength - startOffset, text, true);\n        if (firstNode.getTextContent() === '') {\n          firstNode.remove();\n        } else if (firstNode.isComposing() && this.anchor.type === 'text') {\n          // When composing, we need to adjust the anchor offset so that\n          // we correctly replace that right range.\n          this.anchor.offset -= text.length;\n        }\n      } else if (startOffset === firstNodeTextLength) {\n        firstNode.select();\n      } else {\n        const textNode = $createTextNode(text);\n        textNode.select();\n        firstNode.replace(textNode);\n      }\n\n      // Remove all selected nodes that haven't already been removed.\n      for (let i = 1; i < selectedNodesLength; i++) {\n        const selectedNode = selectedNodes[i];\n        const key = selectedNode.__key;\n        if (!markedNodeKeysForKeep.has(key)) {\n          selectedNode.remove();\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes the text in the Selection, adjusting the EditorState accordingly.\n   */\n  removeText() {\n    this.insertText('');\n  }\n\n  /**\n   * Applies the provided format to the TextNodes in the Selection, splitting or\n   * merging nodes as necessary.\n   *\n   * @param formatType the format type to apply to the nodes in the Selection.\n   */\n  formatText(formatType) {\n    if (this.isCollapsed()) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const selectedNodes = this.getNodes();\n    const selectedTextNodes = [];\n    for (const selectedNode of selectedNodes) {\n      if ($isTextNode(selectedNode)) {\n        selectedTextNodes.push(selectedNode);\n      }\n    }\n    const selectedTextNodesLength = selectedTextNodes.length;\n    if (selectedTextNodesLength === 0) {\n      this.toggleFormat(formatType);\n      // When changing format, we should stop composition\n      $setCompositionKey(null);\n      return;\n    }\n    const anchor = this.anchor;\n    const focus = this.focus;\n    const isBackward = this.isBackward();\n    const startPoint = isBackward ? focus : anchor;\n    const endPoint = isBackward ? anchor : focus;\n    let firstIndex = 0;\n    let firstNode = selectedTextNodes[0];\n    let startOffset = startPoint.type === 'element' ? 0 : startPoint.offset;\n\n    // In case selection started at the end of text node use next text node\n    if (startPoint.type === 'text' && startOffset === firstNode.getTextContentSize()) {\n      firstIndex = 1;\n      firstNode = selectedTextNodes[1];\n      startOffset = 0;\n    }\n    if (firstNode == null) {\n      return;\n    }\n    const firstNextFormat = firstNode.getFormatFlags(formatType, null);\n    const lastIndex = selectedTextNodesLength - 1;\n    let lastNode = selectedTextNodes[lastIndex];\n    const endOffset = endPoint.type === 'text' ? endPoint.offset : lastNode.getTextContentSize();\n\n    // Single node selected\n    if (firstNode.is(lastNode)) {\n      // No actual text is selected, so do nothing.\n      if (startOffset === endOffset) {\n        return;\n      }\n      // The entire node is selected, so just format it\n      if (startOffset === 0 && endOffset === firstNode.getTextContentSize()) {\n        firstNode.setFormat(firstNextFormat);\n      } else {\n        // Node is partially selected, so split it into two nodes\n        // add style the selected one.\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const replacement = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        replacement.setFormat(firstNextFormat);\n\n        // Update selection only if starts/ends on text node\n        if (startPoint.type === 'text') {\n          startPoint.set(replacement.__key, 0, 'text');\n        }\n        if (endPoint.type === 'text') {\n          endPoint.set(replacement.__key, endOffset - startOffset, 'text');\n        }\n      }\n      this.format = firstNextFormat;\n      return;\n    }\n    // Multiple nodes selected\n    // The entire first node isn't selected, so split it\n    if (startOffset !== 0) {\n      [, firstNode] = firstNode.splitText(startOffset);\n      startOffset = 0;\n    }\n    firstNode.setFormat(firstNextFormat);\n    const lastNextFormat = lastNode.getFormatFlags(formatType, firstNextFormat);\n    // If the offset is 0, it means no actual characters are selected,\n    // so we skip formatting the last node altogether.\n    if (endOffset > 0) {\n      if (endOffset !== lastNode.getTextContentSize()) {\n        [lastNode] = lastNode.splitText(endOffset);\n      }\n      lastNode.setFormat(lastNextFormat);\n    }\n\n    // Process all text nodes in between\n    for (let i = firstIndex + 1; i < lastIndex; i++) {\n      const textNode = selectedTextNodes[i];\n      if (!textNode.isToken()) {\n        const nextFormat = textNode.getFormatFlags(formatType, lastNextFormat);\n        textNode.setFormat(nextFormat);\n      }\n    }\n\n    // Update selection only if starts/ends on text node\n    if (startPoint.type === 'text') {\n      startPoint.set(firstNode.__key, startOffset, 'text');\n    }\n    if (endPoint.type === 'text') {\n      endPoint.set(lastNode.__key, endOffset, 'text');\n    }\n    this.format = firstNextFormat | lastNextFormat;\n  }\n\n  /**\n   * Attempts to \"intelligently\" insert an arbitrary list of Lexical nodes into the EditorState at the\n   * current Selection according to a set of heuristics that determine how surrounding nodes\n   * should be changed, replaced, or moved to accomodate the incoming ones.\n   *\n   * @param nodes - the nodes to insert\n   */\n  insertNodes(nodes) {\n    if (nodes.length === 0) {\n      return;\n    }\n    if (this.anchor.key === 'root') {\n      this.insertParagraph();\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection)) {\n        throw Error(`Expected RangeSelection after insertParagraph`);\n      }\n      return selection.insertNodes(nodes);\n    }\n    const firstPoint = this.isBackward() ? this.focus : this.anchor;\n    const firstBlock = $getAncestor(firstPoint.getNode(), INTERNAL_$isBlock);\n    const last = nodes[nodes.length - 1];\n\n    // CASE 1: insert inside a code block\n    if ('__language' in firstBlock && $isElementNode(firstBlock)) {\n      if ('__language' in nodes[0]) {\n        this.insertText(nodes[0].getTextContent());\n      } else {\n        const index = removeTextAndSplitBlock(this);\n        firstBlock.splice(index, 0, nodes);\n        last.selectEnd();\n      }\n      return;\n    }\n\n    // CASE 2: All elements of the array are inline\n    const notInline = node => ($isElementNode(node) || $isDecoratorNode(node)) && !node.isInline();\n    if (!nodes.some(notInline)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      const index = removeTextAndSplitBlock(this);\n      firstBlock.splice(index, 0, nodes);\n      last.selectEnd();\n      return;\n    }\n\n    // CASE 3: At least 1 element of the array is not inline\n    const blocksParent = $wrapInlineNodes(nodes);\n    const nodeToSelect = blocksParent.getLastDescendant();\n    const blocks = blocksParent.getChildren();\n    const isLI = node => '__value' in node && '__checked' in node;\n    const isMergeable = node => $isElementNode(node) && INTERNAL_$isBlock(node) && !node.isEmpty() && $isElementNode(firstBlock) && (!firstBlock.isEmpty() || isLI(firstBlock));\n    const shouldInsert = !$isElementNode(firstBlock) || !firstBlock.isEmpty();\n    const insertedParagraph = shouldInsert ? this.insertParagraph() : null;\n    const lastToInsert = blocks[blocks.length - 1];\n    let firstToInsert = blocks[0];\n    if (isMergeable(firstToInsert)) {\n      if (!$isElementNode(firstBlock)) {\n        throw Error(`Expected 'firstBlock' to be an ElementNode`);\n      }\n      firstBlock.append(...firstToInsert.getChildren());\n      firstToInsert = blocks[1];\n    }\n    if (firstToInsert) {\n      insertRangeAfter(firstBlock, firstToInsert);\n    }\n    const lastInsertedBlock = $getAncestor(nodeToSelect, INTERNAL_$isBlock);\n    if (insertedParagraph && $isElementNode(lastInsertedBlock) && (isLI(insertedParagraph) || INTERNAL_$isBlock(lastToInsert))) {\n      lastInsertedBlock.append(...insertedParagraph.getChildren());\n      insertedParagraph.remove();\n    }\n    if ($isElementNode(firstBlock) && firstBlock.isEmpty()) {\n      firstBlock.remove();\n    }\n    nodeToSelect.selectEnd();\n\n    // To understand this take a look at the test \"can wrap post-linebreak nodes into new element\"\n    const lastChild = $isElementNode(firstBlock) ? firstBlock.getLastChild() : null;\n    if ($isLineBreakNode(lastChild) && lastInsertedBlock !== firstBlock) {\n      lastChild.remove();\n    }\n  }\n\n  /**\n   * Inserts a new ParagraphNode into the EditorState at the current Selection\n   *\n   * @returns the newly inserted node.\n   */\n  insertParagraph() {\n    if (this.anchor.key === 'root') {\n      const paragraph = $createParagraphNode();\n      $getRoot().splice(this.anchor.offset, 0, [paragraph]);\n      paragraph.select();\n      return paragraph;\n    }\n    const index = removeTextAndSplitBlock(this);\n    const block = $getAncestor(this.anchor.getNode(), INTERNAL_$isBlock);\n    if (!$isElementNode(block)) {\n      throw Error(`Expected ancestor to be an ElementNode`);\n    }\n    const firstToAppend = block.getChildAtIndex(index);\n    const nodesToInsert = firstToAppend ? [firstToAppend, ...firstToAppend.getNextSiblings()] : [];\n    const newBlock = block.insertNewAfter(this, false);\n    if (newBlock) {\n      newBlock.append(...nodesToInsert);\n      newBlock.selectStart();\n      return newBlock;\n    }\n    // if newBlock is null, it means that block is of type CodeNode.\n    return null;\n  }\n\n  /**\n   * Inserts a logical linebreak, which may be a new LineBreakNode or a new ParagraphNode, into the EditorState at the\n   * current Selection.\n   */\n  insertLineBreak(selectStart) {\n    const lineBreak = $createLineBreakNode();\n    this.insertNodes([lineBreak]);\n    // this is used in MacOS with the command 'ctrl-O' (openLineBreak)\n    if (selectStart) {\n      const parent = lineBreak.getParentOrThrow();\n      const index = lineBreak.getIndexWithinParent();\n      parent.select(index, index);\n    }\n  }\n\n  /**\n   * Extracts the nodes in the Selection, splitting nodes where necessary\n   * to get offset-level precision.\n   *\n   * @returns The nodes in the Selection\n   */\n  extract() {\n    const selectedNodes = this.getNodes();\n    const selectedNodesLength = selectedNodes.length;\n    const lastIndex = selectedNodesLength - 1;\n    const anchor = this.anchor;\n    const focus = this.focus;\n    let firstNode = selectedNodes[0];\n    let lastNode = selectedNodes[lastIndex];\n    const [anchorOffset, focusOffset] = $getCharacterOffsets(this);\n    if (selectedNodesLength === 0) {\n      return [];\n    } else if (selectedNodesLength === 1) {\n      if ($isTextNode(firstNode) && !this.isCollapsed()) {\n        const startOffset = anchorOffset > focusOffset ? focusOffset : anchorOffset;\n        const endOffset = anchorOffset > focusOffset ? anchorOffset : focusOffset;\n        const splitNodes = firstNode.splitText(startOffset, endOffset);\n        const node = startOffset === 0 ? splitNodes[0] : splitNodes[1];\n        return node != null ? [node] : [];\n      }\n      return [firstNode];\n    }\n    const isBefore = anchor.isBefore(focus);\n    if ($isTextNode(firstNode)) {\n      const startOffset = isBefore ? anchorOffset : focusOffset;\n      if (startOffset === firstNode.getTextContentSize()) {\n        selectedNodes.shift();\n      } else if (startOffset !== 0) {\n        [, firstNode] = firstNode.splitText(startOffset);\n        selectedNodes[0] = firstNode;\n      }\n    }\n    if ($isTextNode(lastNode)) {\n      const lastNodeText = lastNode.getTextContent();\n      const lastNodeTextLength = lastNodeText.length;\n      const endOffset = isBefore ? focusOffset : anchorOffset;\n      if (endOffset === 0) {\n        selectedNodes.pop();\n      } else if (endOffset !== lastNodeTextLength) {\n        [lastNode] = lastNode.splitText(endOffset);\n        selectedNodes[lastIndex] = lastNode;\n      }\n    }\n    return selectedNodes;\n  }\n\n  /**\n   * Modifies the Selection according to the parameters and a set of heuristics that account for\n   * various node types. Can be used to safely move or extend selection by one logical \"unit\" without\n   * dealing explicitly with all the possible node types.\n   *\n   * @param alter the type of modification to perform\n   * @param isBackward whether or not selection is backwards\n   * @param granularity the granularity at which to apply the modification\n   */\n  modify(alter, isBackward, granularity) {\n    const focus = this.focus;\n    const anchor = this.anchor;\n    const collapse = alter === 'move';\n\n    // Handle the selection movement around decorators.\n    const possibleNode = $getAdjacentNode(focus, isBackward);\n    if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n      // Make it possible to move selection from range selection to\n      // node selection on the node.\n      if (collapse && possibleNode.isKeyboardSelectable()) {\n        const nodeSelection = $createNodeSelection();\n        nodeSelection.add(possibleNode.__key);\n        $setSelection(nodeSelection);\n        return;\n      }\n      const sibling = isBackward ? possibleNode.getPreviousSibling() : possibleNode.getNextSibling();\n      if (!$isTextNode(sibling)) {\n        const parent = possibleNode.getParentOrThrow();\n        let offset;\n        let elementKey;\n        if ($isElementNode(sibling)) {\n          elementKey = sibling.__key;\n          offset = isBackward ? sibling.getChildrenSize() : 0;\n        } else {\n          offset = possibleNode.getIndexWithinParent();\n          elementKey = parent.__key;\n          if (!isBackward) {\n            offset++;\n          }\n        }\n        focus.set(elementKey, offset, 'element');\n        if (collapse) {\n          anchor.set(elementKey, offset, 'element');\n        }\n        return;\n      } else {\n        const siblingKey = sibling.__key;\n        const offset = isBackward ? sibling.getTextContent().length : 0;\n        focus.set(siblingKey, offset, 'text');\n        if (collapse) {\n          anchor.set(siblingKey, offset, 'text');\n        }\n        return;\n      }\n    }\n    const editor = getActiveEditor();\n    const domSelection = getDOMSelection(editor._window);\n    if (!domSelection) {\n      return;\n    }\n    const blockCursorElement = editor._blockCursorElement;\n    const rootElement = editor._rootElement;\n    // Remove the block cursor element if it exists. This will ensure selection\n    // works as intended. If we leave it in the DOM all sorts of strange bugs\n    // occur. :/\n    if (rootElement !== null && blockCursorElement !== null && $isElementNode(possibleNode) && !possibleNode.isInline() && !possibleNode.canBeEmpty()) {\n      removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n    }\n    // We use the DOM selection.modify API here to \"tell\" us what the selection\n    // will be. We then use it to update the Lexical selection accordingly. This\n    // is much more reliable than waiting for a beforeinput and using the ranges\n    // from getTargetRanges(), and is also better than trying to do it ourselves\n    // using Intl.Segmenter or other workarounds that struggle with word segments\n    // and line segments (especially with word wrapping and non-Roman languages).\n    moveNativeSelection(domSelection, alter, isBackward ? 'backward' : 'forward', granularity);\n    // Guard against no ranges\n    if (domSelection.rangeCount > 0) {\n      const range = domSelection.getRangeAt(0);\n      // Apply the DOM selection to our Lexical selection.\n      const anchorNode = this.anchor.getNode();\n      const root = $isRootNode(anchorNode) ? anchorNode : $getNearestRootOrShadowRoot(anchorNode);\n      this.applyDOMRange(range);\n      this.dirty = true;\n      if (!collapse) {\n        // Validate selection; make sure that the new extended selection respects shadow roots\n        const nodes = this.getNodes();\n        const validNodes = [];\n        let shrinkSelection = false;\n        for (let i = 0; i < nodes.length; i++) {\n          const nextNode = nodes[i];\n          if ($hasAncestor(nextNode, root)) {\n            validNodes.push(nextNode);\n          } else {\n            shrinkSelection = true;\n          }\n        }\n        if (shrinkSelection && validNodes.length > 0) {\n          // validNodes length check is a safeguard against an invalid selection; as getNodes()\n          // will return an empty array in this case\n          if (isBackward) {\n            const firstValidNode = validNodes[0];\n            if ($isElementNode(firstValidNode)) {\n              firstValidNode.selectStart();\n            } else {\n              firstValidNode.getParentOrThrow().selectStart();\n            }\n          } else {\n            const lastValidNode = validNodes[validNodes.length - 1];\n            if ($isElementNode(lastValidNode)) {\n              lastValidNode.selectEnd();\n            } else {\n              lastValidNode.getParentOrThrow().selectEnd();\n            }\n          }\n        }\n\n        // Because a range works on start and end, we might need to flip\n        // the anchor and focus points to match what the DOM has, not what\n        // the range has specifically.\n        if (domSelection.anchorNode !== range.startContainer || domSelection.anchorOffset !== range.startOffset) {\n          $swapPoints(this);\n        }\n      }\n    }\n  }\n\n  /**\n   * Performs one logical character deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteCharacter(isBackward) {\n    const wasCollapsed = this.isCollapsed();\n    if (this.isCollapsed()) {\n      const anchor = this.anchor;\n      const focus = this.focus;\n      let anchorNode = anchor.getNode();\n      if (!isBackward && (\n      // Delete forward handle case\n      anchor.type === 'element' && $isElementNode(anchorNode) && anchor.offset === anchorNode.getChildrenSize() || anchor.type === 'text' && anchor.offset === anchorNode.getTextContentSize())) {\n        const parent = anchorNode.getParent();\n        const nextSibling = anchorNode.getNextSibling() || (parent === null ? null : parent.getNextSibling());\n        if ($isElementNode(nextSibling) && nextSibling.isShadowRoot()) {\n          return;\n        }\n      }\n      // Handle the deletion around decorators.\n      const possibleNode = $getAdjacentNode(focus, isBackward);\n      if ($isDecoratorNode(possibleNode) && !possibleNode.isIsolated()) {\n        // Make it possible to move selection from range selection to\n        // node selection on the node.\n        if (possibleNode.isKeyboardSelectable() && $isElementNode(anchorNode) && anchorNode.getChildrenSize() === 0) {\n          anchorNode.remove();\n          const nodeSelection = $createNodeSelection();\n          nodeSelection.add(possibleNode.__key);\n          $setSelection(nodeSelection);\n        } else {\n          possibleNode.remove();\n          const editor = getActiveEditor();\n          editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n        }\n        return;\n      } else if (!isBackward && $isElementNode(possibleNode) && $isElementNode(anchorNode) && anchorNode.isEmpty()) {\n        anchorNode.remove();\n        possibleNode.selectStart();\n        return;\n      }\n      this.modify('extend', isBackward, 'character');\n      if (!this.isCollapsed()) {\n        const focusNode = focus.type === 'text' ? focus.getNode() : null;\n        anchorNode = anchor.type === 'text' ? anchor.getNode() : null;\n        if (focusNode !== null && focusNode.isSegmented()) {\n          const offset = focus.offset;\n          const textContentSize = focusNode.getTextContentSize();\n          if (focusNode.is(anchorNode) || isBackward && offset !== textContentSize || !isBackward && offset !== 0) {\n            $removeSegment(focusNode, isBackward, offset);\n            return;\n          }\n        } else if (anchorNode !== null && anchorNode.isSegmented()) {\n          const offset = anchor.offset;\n          const textContentSize = anchorNode.getTextContentSize();\n          if (anchorNode.is(focusNode) || isBackward && offset !== 0 || !isBackward && offset !== textContentSize) {\n            $removeSegment(anchorNode, isBackward, offset);\n            return;\n          }\n        }\n        $updateCaretSelectionForUnicodeCharacter(this, isBackward);\n      } else if (isBackward && anchor.offset === 0) {\n        // Special handling around rich text nodes\n        const element = anchor.type === 'element' ? anchor.getNode() : anchor.getNode().getParentOrThrow();\n        if (element.collapseAtStart(this)) {\n          return;\n        }\n      }\n    }\n    this.removeText();\n    if (isBackward && !wasCollapsed && this.isCollapsed() && this.anchor.type === 'element' && this.anchor.offset === 0) {\n      const anchorNode = this.anchor.getNode();\n      if (anchorNode.isEmpty() && $isRootNode(anchorNode.getParent()) && anchorNode.getIndexWithinParent() === 0) {\n        anchorNode.collapseAtStart(this);\n      }\n    }\n  }\n\n  /**\n   * Performs one logical line deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteLine(isBackward) {\n    if (this.isCollapsed()) {\n      if (this.anchor.type === 'text') {\n        this.modify('extend', isBackward, 'lineboundary');\n      }\n\n      // If selection is extended to cover text edge then extend it one character more\n      // to delete its parent element. Otherwise text content will be deleted but empty\n      // parent node will remain\n      const endPoint = isBackward ? this.focus : this.anchor;\n      if (endPoint.offset === 0) {\n        this.modify('extend', isBackward, 'character');\n      }\n    }\n    this.removeText();\n  }\n\n  /**\n   * Performs one logical word deletion operation on the EditorState based on the current Selection.\n   * Handles different node types.\n   *\n   * @param isBackward whether or not the selection is backwards.\n   */\n  deleteWord(isBackward) {\n    if (this.isCollapsed()) {\n      this.modify('extend', isBackward, 'word');\n    }\n    this.removeText();\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n}\nfunction $isNodeSelection(x) {\n  return x instanceof NodeSelection;\n}\nfunction getCharacterOffset(point) {\n  const offset = point.offset;\n  if (point.type === 'text') {\n    return offset;\n  }\n  const parent = point.getNode();\n  return offset === parent.getChildrenSize() ? parent.getTextContent().length : 0;\n}\nfunction $getCharacterOffsets(selection) {\n  const anchorAndFocus = selection.getStartEndPoints();\n  if (anchorAndFocus === null) {\n    return [0, 0];\n  }\n  const [anchor, focus] = anchorAndFocus;\n  if (anchor.type === 'element' && focus.type === 'element' && anchor.key === focus.key && anchor.offset === focus.offset) {\n    return [0, 0];\n  }\n  return [getCharacterOffset(anchor), getCharacterOffset(focus)];\n}\nfunction $swapPoints(selection) {\n  const focus = selection.focus;\n  const anchor = selection.anchor;\n  const anchorKey = anchor.key;\n  const anchorOffset = anchor.offset;\n  const anchorType = anchor.type;\n  $setPointValues(anchor, focus.key, focus.offset, focus.type);\n  $setPointValues(focus, anchorKey, anchorOffset, anchorType);\n  selection._cachedNodes = null;\n}\nfunction moveNativeSelection(domSelection, alter, direction, granularity) {\n  // Selection.modify() method applies a change to the current selection or cursor position,\n  // but is still non-standard in some browsers.\n  domSelection.modify(alter, direction, granularity);\n}\nfunction $updateCaretSelectionForUnicodeCharacter(selection, isBackward) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (anchorNode === focusNode && anchor.type === 'text' && focus.type === 'text') {\n    // Handling of multibyte characters\n    const anchorOffset = anchor.offset;\n    const focusOffset = focus.offset;\n    const isBefore = anchorOffset < focusOffset;\n    const startOffset = isBefore ? anchorOffset : focusOffset;\n    const endOffset = isBefore ? focusOffset : anchorOffset;\n    const characterOffset = endOffset - 1;\n    if (startOffset !== characterOffset) {\n      const text = anchorNode.getTextContent().slice(startOffset, endOffset);\n      if (!doesContainGrapheme(text)) {\n        if (isBackward) {\n          focus.offset = characterOffset;\n        } else {\n          anchor.offset = characterOffset;\n        }\n      }\n    }\n  }\n}\nfunction $removeSegment(node, isBackward, offset) {\n  const textNode = node;\n  const textContent = textNode.getTextContent();\n  const split = textContent.split(/(?=\\s)/g);\n  const splitLength = split.length;\n  let segmentOffset = 0;\n  let restoreOffset = 0;\n  for (let i = 0; i < splitLength; i++) {\n    const text = split[i];\n    const isLast = i === splitLength - 1;\n    restoreOffset = segmentOffset;\n    segmentOffset += text.length;\n    if (isBackward && segmentOffset === offset || segmentOffset > offset || isLast) {\n      split.splice(i, 1);\n      if (isLast) {\n        restoreOffset = undefined;\n      }\n      break;\n    }\n  }\n  const nextTextContent = split.join('').trim();\n  if (nextTextContent === '') {\n    textNode.remove();\n  } else {\n    textNode.setTextContent(nextTextContent);\n    textNode.select(restoreOffset, restoreOffset);\n  }\n}\nfunction shouldResolveAncestor(resolvedElement, resolvedOffset, lastPoint) {\n  const parent = resolvedElement.getParent();\n  return lastPoint === null || parent === null || !parent.canBeEmpty() || parent !== lastPoint.getNode();\n}\nfunction internalResolveSelectionPoint(dom, offset, lastPoint, editor) {\n  let resolvedOffset = offset;\n  let resolvedNode;\n  // If we have selection on an element, we will\n  // need to figure out (using the offset) what text\n  // node should be selected.\n\n  if (dom.nodeType === DOM_ELEMENT_TYPE) {\n    // Resolve element to a ElementNode, or TextNode, or null\n    let moveSelectionToEnd = false;\n    // Given we're moving selection to another node, selection is\n    // definitely dirty.\n    // We use the anchor to find which child node to select\n    const childNodes = dom.childNodes;\n    const childNodesLength = childNodes.length;\n    // If the anchor is the same as length, then this means we\n    // need to select the very last text node.\n    if (resolvedOffset === childNodesLength) {\n      moveSelectionToEnd = true;\n      resolvedOffset = childNodesLength - 1;\n    }\n    let childDOM = childNodes[resolvedOffset];\n    let hasBlockCursor = false;\n    if (childDOM === editor._blockCursorElement) {\n      childDOM = childNodes[resolvedOffset + 1];\n      hasBlockCursor = true;\n    } else if (editor._blockCursorElement !== null) {\n      resolvedOffset--;\n    }\n    resolvedNode = getNodeFromDOM(childDOM);\n    if ($isTextNode(resolvedNode)) {\n      resolvedOffset = getTextNodeOffset(resolvedNode, moveSelectionToEnd);\n    } else {\n      let resolvedElement = getNodeFromDOM(dom);\n      // Ensure resolvedElement is actually a element.\n      if (resolvedElement === null) {\n        return null;\n      }\n      if ($isElementNode(resolvedElement)) {\n        let child = resolvedElement.getChildAtIndex(resolvedOffset);\n        if ($isElementNode(child) && shouldResolveAncestor(child, resolvedOffset, lastPoint)) {\n          const descendant = moveSelectionToEnd ? child.getLastDescendant() : child.getFirstDescendant();\n          if (descendant === null) {\n            resolvedElement = child;\n            resolvedOffset = 0;\n          } else {\n            child = descendant;\n            resolvedElement = $isElementNode(child) ? child : child.getParentOrThrow();\n          }\n        }\n        if ($isTextNode(child)) {\n          resolvedNode = child;\n          resolvedElement = null;\n          resolvedOffset = getTextNodeOffset(child, moveSelectionToEnd);\n        } else if (child !== resolvedElement && moveSelectionToEnd && !hasBlockCursor) {\n          resolvedOffset++;\n        }\n      } else {\n        const index = resolvedElement.getIndexWithinParent();\n        // When selecting decorators, there can be some selection issues when using resolvedOffset,\n        // and instead we should be checking if we're using the offset\n        if (offset === 0 && $isDecoratorNode(resolvedElement) && getNodeFromDOM(dom) === resolvedElement) {\n          resolvedOffset = index;\n        } else {\n          resolvedOffset = index + 1;\n        }\n        resolvedElement = resolvedElement.getParentOrThrow();\n      }\n      if ($isElementNode(resolvedElement)) {\n        return $createPoint(resolvedElement.__key, resolvedOffset, 'element');\n      }\n    }\n  } else {\n    // TextNode or null\n    resolvedNode = getNodeFromDOM(dom);\n  }\n  if (!$isTextNode(resolvedNode)) {\n    return null;\n  }\n  return $createPoint(resolvedNode.__key, resolvedOffset, 'text');\n}\nfunction resolveSelectionPointOnBoundary(point, isBackward, isCollapsed) {\n  const offset = point.offset;\n  const node = point.getNode();\n  if (offset === 0) {\n    const prevSibling = node.getPreviousSibling();\n    const parent = node.getParent();\n    if (!isBackward) {\n      if ($isElementNode(prevSibling) && !isCollapsed && prevSibling.isInline()) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getChildrenSize();\n        // @ts-expect-error: intentional\n        point.type = 'element';\n      } else if ($isTextNode(prevSibling)) {\n        point.key = prevSibling.__key;\n        point.offset = prevSibling.getTextContent().length;\n      }\n    } else if ((isCollapsed || !isBackward) && prevSibling === null && $isElementNode(parent) && parent.isInline()) {\n      const parentSibling = parent.getPreviousSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = parentSibling.getTextContent().length;\n      }\n    }\n  } else if (offset === node.getTextContent().length) {\n    const nextSibling = node.getNextSibling();\n    const parent = node.getParent();\n    if (isBackward && $isElementNode(nextSibling) && nextSibling.isInline()) {\n      point.key = nextSibling.__key;\n      point.offset = 0;\n      // @ts-expect-error: intentional\n      point.type = 'element';\n    } else if ((isCollapsed || isBackward) && nextSibling === null && $isElementNode(parent) && parent.isInline() && !parent.canInsertTextAfter()) {\n      const parentSibling = parent.getNextSibling();\n      if ($isTextNode(parentSibling)) {\n        point.key = parentSibling.__key;\n        point.offset = 0;\n      }\n    }\n  }\n}\nfunction normalizeSelectionPointsForBoundaries(anchor, focus, lastSelection) {\n  if (anchor.type === 'text' && focus.type === 'text') {\n    const isBackward = anchor.isBefore(focus);\n    const isCollapsed = anchor.is(focus);\n\n    // Attempt to normalize the offset to the previous sibling if we're at the\n    // start of a text node and the sibling is a text node or inline element.\n    resolveSelectionPointOnBoundary(anchor, isBackward, isCollapsed);\n    resolveSelectionPointOnBoundary(focus, !isBackward, isCollapsed);\n    if (isCollapsed) {\n      focus.key = anchor.key;\n      focus.offset = anchor.offset;\n      focus.type = anchor.type;\n    }\n    const editor = getActiveEditor();\n    if (editor.isComposing() && editor._compositionKey !== anchor.key && $isRangeSelection(lastSelection)) {\n      const lastAnchor = lastSelection.anchor;\n      const lastFocus = lastSelection.focus;\n      $setPointValues(anchor, lastAnchor.key, lastAnchor.offset, lastAnchor.type);\n      $setPointValues(focus, lastFocus.key, lastFocus.offset, lastFocus.type);\n    }\n  }\n}\nfunction internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection) {\n  if (anchorDOM === null || focusDOM === null || !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n    return null;\n  }\n  const resolvedAnchorPoint = internalResolveSelectionPoint(anchorDOM, anchorOffset, $isRangeSelection(lastSelection) ? lastSelection.anchor : null, editor);\n  if (resolvedAnchorPoint === null) {\n    return null;\n  }\n  const resolvedFocusPoint = internalResolveSelectionPoint(focusDOM, focusOffset, $isRangeSelection(lastSelection) ? lastSelection.focus : null, editor);\n  if (resolvedFocusPoint === null) {\n    return null;\n  }\n  if (resolvedAnchorPoint.type === 'element' && resolvedFocusPoint.type === 'element') {\n    const anchorNode = getNodeFromDOM(anchorDOM);\n    const focusNode = getNodeFromDOM(focusDOM);\n    // Ensure if we're selecting the content of a decorator that we\n    // return null for this point, as it's not in the controlled scope\n    // of Lexical.\n    if ($isDecoratorNode(anchorNode) && $isDecoratorNode(focusNode)) {\n      return null;\n    }\n  }\n\n  // Handle normalization of selection when it is at the boundaries.\n  normalizeSelectionPointsForBoundaries(resolvedAnchorPoint, resolvedFocusPoint, lastSelection);\n  return [resolvedAnchorPoint, resolvedFocusPoint];\n}\nfunction $isBlockElementNode(node) {\n  return $isElementNode(node) && !node.isInline();\n}\n\n// This is used to make a selection when the existing\n// selection is null, i.e. forcing selection on the editor\n// when it current exists outside the editor.\n\nfunction internalMakeRangeSelection(anchorKey, anchorOffset, focusKey, focusOffset, anchorType, focusType) {\n  const editorState = getActiveEditorState();\n  const selection = new RangeSelection($createPoint(anchorKey, anchorOffset, anchorType), $createPoint(focusKey, focusOffset, focusType), 0, '');\n  selection.dirty = true;\n  editorState._selection = selection;\n  return selection;\n}\nfunction $createRangeSelection() {\n  const anchor = $createPoint('root', 0, 'element');\n  const focus = $createPoint('root', 0, 'element');\n  return new RangeSelection(anchor, focus, 0, '');\n}\nfunction $createNodeSelection() {\n  return new NodeSelection(new Set());\n}\nfunction internalCreateSelection(editor) {\n  const currentEditorState = editor.getEditorState();\n  const lastSelection = currentEditorState._selection;\n  const domSelection = getDOMSelection(editor._window);\n  if ($isRangeSelection(lastSelection) || lastSelection == null) {\n    return internalCreateRangeSelection(lastSelection, domSelection, editor, null);\n  }\n  return lastSelection.clone();\n}\nfunction internalCreateRangeSelection(lastSelection, domSelection, editor, event) {\n  const windowObj = editor._window;\n  if (windowObj === null) {\n    return null;\n  }\n  // When we create a selection, we try to use the previous\n  // selection where possible, unless an actual user selection\n  // change has occurred. When we do need to create a new selection\n  // we validate we can have text nodes for both anchor and focus\n  // nodes. If that holds true, we then return that selection\n  // as a mutable object that we use for the editor state for this\n  // update cycle. If a selection gets changed, and requires a\n  // update to native DOM selection, it gets marked as \"dirty\".\n  // If the selection changes, but matches with the existing\n  // DOM selection, then we only need to sync it. Otherwise,\n  // we generally bail out of doing an update to selection during\n  // reconciliation unless there are dirty nodes that need\n  // reconciling.\n\n  const windowEvent = event || windowObj.event;\n  const eventType = windowEvent ? windowEvent.type : undefined;\n  const isSelectionChange = eventType === 'selectionchange';\n  const useDOMSelection = !getIsProcessingMutations() && (isSelectionChange || eventType === 'beforeinput' || eventType === 'compositionstart' || eventType === 'compositionend' || eventType === 'click' && windowEvent && windowEvent.detail === 3 || eventType === 'drop' || eventType === undefined);\n  let anchorDOM, focusDOM, anchorOffset, focusOffset;\n  if (!$isRangeSelection(lastSelection) || useDOMSelection) {\n    if (domSelection === null) {\n      return null;\n    }\n    anchorDOM = domSelection.anchorNode;\n    focusDOM = domSelection.focusNode;\n    anchorOffset = domSelection.anchorOffset;\n    focusOffset = domSelection.focusOffset;\n    if (isSelectionChange && $isRangeSelection(lastSelection) && !isSelectionWithinEditor(editor, anchorDOM, focusDOM)) {\n      return lastSelection.clone();\n    }\n  } else {\n    return lastSelection.clone();\n  }\n  // Let's resolve the text nodes from the offsets and DOM nodes we have from\n  // native selection.\n  const resolvedSelectionPoints = internalResolveSelectionPoints(anchorDOM, anchorOffset, focusDOM, focusOffset, editor, lastSelection);\n  if (resolvedSelectionPoints === null) {\n    return null;\n  }\n  const [resolvedAnchorPoint, resolvedFocusPoint] = resolvedSelectionPoints;\n  return new RangeSelection(resolvedAnchorPoint, resolvedFocusPoint, !$isRangeSelection(lastSelection) ? 0 : lastSelection.format, !$isRangeSelection(lastSelection) ? '' : lastSelection.style);\n}\nfunction $getSelection() {\n  const editorState = getActiveEditorState();\n  return editorState._selection;\n}\nfunction $getPreviousSelection() {\n  const editor = getActiveEditor();\n  return editor._editorState._selection;\n}\nfunction $updateElementSelectionOnCreateDeleteNode(selection, parentNode, nodeOffset, times = 1) {\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (!parentNode.is(anchorNode) && !parentNode.is(focusNode)) {\n    return;\n  }\n  const parentKey = parentNode.__key;\n  // Single node. We shift selection but never redimension it\n  if (selection.isCollapsed()) {\n    const selectionOffset = anchor.offset;\n    if (nodeOffset <= selectionOffset && times > 0 || nodeOffset < selectionOffset && times < 0) {\n      const newSelectionOffset = Math.max(0, selectionOffset + times);\n      anchor.set(parentKey, newSelectionOffset, 'element');\n      focus.set(parentKey, newSelectionOffset, 'element');\n      // The new selection might point to text nodes, try to resolve them\n      $updateSelectionResolveTextNodes(selection);\n    }\n  } else {\n    // Multiple nodes selected. We shift or redimension selection\n    const isBackward = selection.isBackward();\n    const firstPoint = isBackward ? focus : anchor;\n    const firstPointNode = firstPoint.getNode();\n    const lastPoint = isBackward ? anchor : focus;\n    const lastPointNode = lastPoint.getNode();\n    if (parentNode.is(firstPointNode)) {\n      const firstPointOffset = firstPoint.offset;\n      if (nodeOffset <= firstPointOffset && times > 0 || nodeOffset < firstPointOffset && times < 0) {\n        firstPoint.set(parentKey, Math.max(0, firstPointOffset + times), 'element');\n      }\n    }\n    if (parentNode.is(lastPointNode)) {\n      const lastPointOffset = lastPoint.offset;\n      if (nodeOffset <= lastPointOffset && times > 0 || nodeOffset < lastPointOffset && times < 0) {\n        lastPoint.set(parentKey, Math.max(0, lastPointOffset + times), 'element');\n      }\n    }\n  }\n  // The new selection might point to text nodes, try to resolve them\n  $updateSelectionResolveTextNodes(selection);\n}\nfunction $updateSelectionResolveTextNodes(selection) {\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const focus = selection.focus;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  if (selection.isCollapsed()) {\n    if (!$isElementNode(anchorNode)) {\n      return;\n    }\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n      focus.set(child.__key, newOffset, 'text');\n    }\n    return;\n  }\n  if ($isElementNode(anchorNode)) {\n    const childSize = anchorNode.getChildrenSize();\n    const anchorOffsetAtEnd = anchorOffset >= childSize;\n    const child = anchorOffsetAtEnd ? anchorNode.getChildAtIndex(childSize - 1) : anchorNode.getChildAtIndex(anchorOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (anchorOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      anchor.set(child.__key, newOffset, 'text');\n    }\n  }\n  if ($isElementNode(focusNode)) {\n    const childSize = focusNode.getChildrenSize();\n    const focusOffsetAtEnd = focusOffset >= childSize;\n    const child = focusOffsetAtEnd ? focusNode.getChildAtIndex(childSize - 1) : focusNode.getChildAtIndex(focusOffset);\n    if ($isTextNode(child)) {\n      let newOffset = 0;\n      if (focusOffsetAtEnd) {\n        newOffset = child.getTextContentSize();\n      }\n      focus.set(child.__key, newOffset, 'text');\n    }\n  }\n}\nfunction applySelectionTransforms(nextEditorState, editor) {\n  const prevEditorState = editor.getEditorState();\n  const prevSelection = prevEditorState._selection;\n  const nextSelection = nextEditorState._selection;\n  if ($isRangeSelection(nextSelection)) {\n    const anchor = nextSelection.anchor;\n    const focus = nextSelection.focus;\n    let anchorNode;\n    if (anchor.type === 'text') {\n      anchorNode = anchor.getNode();\n      anchorNode.selectionTransform(prevSelection, nextSelection);\n    }\n    if (focus.type === 'text') {\n      const focusNode = focus.getNode();\n      if (anchorNode !== focusNode) {\n        focusNode.selectionTransform(prevSelection, nextSelection);\n      }\n    }\n  }\n}\nfunction moveSelectionPointToSibling(point, node, parent, prevSibling, nextSibling) {\n  let siblingKey = null;\n  let offset = 0;\n  let type = null;\n  if (prevSibling !== null) {\n    siblingKey = prevSibling.__key;\n    if ($isTextNode(prevSibling)) {\n      offset = prevSibling.getTextContentSize();\n      type = 'text';\n    } else if ($isElementNode(prevSibling)) {\n      offset = prevSibling.getChildrenSize();\n      type = 'element';\n    }\n  } else {\n    if (nextSibling !== null) {\n      siblingKey = nextSibling.__key;\n      if ($isTextNode(nextSibling)) {\n        type = 'text';\n      } else if ($isElementNode(nextSibling)) {\n        type = 'element';\n      }\n    }\n  }\n  if (siblingKey !== null && type !== null) {\n    point.set(siblingKey, offset, type);\n  } else {\n    offset = node.getIndexWithinParent();\n    if (offset === -1) {\n      // Move selection to end of parent\n      offset = parent.getChildrenSize();\n    }\n    point.set(parent.__key, offset, 'element');\n  }\n}\nfunction adjustPointOffsetForMergedSibling(point, isBefore, key, target, textLength) {\n  if (point.type === 'text') {\n    point.key = key;\n    if (!isBefore) {\n      point.offset += textLength;\n    }\n  } else if (point.offset > target.getIndexWithinParent()) {\n    point.offset -= 1;\n  }\n}\nfunction updateDOMSelection(prevSelection, nextSelection, editor, domSelection, tags, rootElement, nodeCount) {\n  const anchorDOMNode = domSelection.anchorNode;\n  const focusDOMNode = domSelection.focusNode;\n  const anchorOffset = domSelection.anchorOffset;\n  const focusOffset = domSelection.focusOffset;\n  const activeElement = document.activeElement;\n\n  // TODO: make this not hard-coded, and add another config option\n  // that makes this configurable.\n  if (tags.has('collaboration') && activeElement !== rootElement || activeElement !== null && isSelectionCapturedInDecoratorInput(activeElement)) {\n    return;\n  }\n  if (!$isRangeSelection(nextSelection)) {\n    // We don't remove selection if the prevSelection is null because\n    // of editor.setRootElement(). If this occurs on init when the\n    // editor is already focused, then this can cause the editor to\n    // lose focus.\n    if (prevSelection !== null && isSelectionWithinEditor(editor, anchorDOMNode, focusDOMNode)) {\n      domSelection.removeAllRanges();\n    }\n    return;\n  }\n  const anchor = nextSelection.anchor;\n  const focus = nextSelection.focus;\n  const anchorKey = anchor.key;\n  const focusKey = focus.key;\n  const anchorDOM = getElementByKeyOrThrow(editor, anchorKey);\n  const focusDOM = getElementByKeyOrThrow(editor, focusKey);\n  const nextAnchorOffset = anchor.offset;\n  const nextFocusOffset = focus.offset;\n  const nextFormat = nextSelection.format;\n  const nextStyle = nextSelection.style;\n  const isCollapsed = nextSelection.isCollapsed();\n  let nextAnchorNode = anchorDOM;\n  let nextFocusNode = focusDOM;\n  let anchorFormatOrStyleChanged = false;\n  if (anchor.type === 'text') {\n    nextAnchorNode = getDOMTextNode(anchorDOM);\n    const anchorNode = anchor.getNode();\n    anchorFormatOrStyleChanged = anchorNode.getFormat() !== nextFormat || anchorNode.getStyle() !== nextStyle;\n  } else if ($isRangeSelection(prevSelection) && prevSelection.anchor.type === 'text') {\n    anchorFormatOrStyleChanged = true;\n  }\n  if (focus.type === 'text') {\n    nextFocusNode = getDOMTextNode(focusDOM);\n  }\n\n  // If we can't get an underlying text node for selection, then\n  // we should avoid setting selection to something incorrect.\n  if (nextAnchorNode === null || nextFocusNode === null) {\n    return;\n  }\n  if (isCollapsed && (prevSelection === null || anchorFormatOrStyleChanged || $isRangeSelection(prevSelection) && (prevSelection.format !== nextFormat || prevSelection.style !== nextStyle))) {\n    markCollapsedSelectionFormat(nextFormat, nextStyle, nextAnchorOffset, anchorKey, performance.now());\n  }\n\n  // Diff against the native DOM selection to ensure we don't do\n  // an unnecessary selection update. We also skip this check if\n  // we're moving selection to within an element, as this can\n  // sometimes be problematic around scrolling.\n  if (anchorOffset === nextAnchorOffset && focusOffset === nextFocusOffset && anchorDOMNode === nextAnchorNode && focusDOMNode === nextFocusNode &&\n  // Badly interpreted range selection when collapsed - #1482\n  !(domSelection.type === 'Range' && isCollapsed)) {\n    // If the root element does not have focus, ensure it has focus\n    if (activeElement === null || !rootElement.contains(activeElement)) {\n      rootElement.focus({\n        preventScroll: true\n      });\n    }\n    if (anchor.type !== 'element') {\n      return;\n    }\n  }\n\n  // Apply the updated selection to the DOM. Note: this will trigger\n  // a \"selectionchange\" event, although it will be asynchronous.\n  try {\n    domSelection.setBaseAndExtent(nextAnchorNode, nextAnchorOffset, nextFocusNode, nextFocusOffset);\n  } catch (error) {\n    // If we encounter an error, continue. This can sometimes\n    // occur with FF and there's no good reason as to why it\n    // should happen.\n  }\n  if (!tags.has('skip-scroll-into-view') && nextSelection.isCollapsed() && rootElement !== null && rootElement === document.activeElement) {\n    const selectionTarget = nextSelection instanceof RangeSelection && nextSelection.anchor.type === 'element' ? nextAnchorNode.childNodes[nextAnchorOffset] || null : domSelection.rangeCount > 0 ? domSelection.getRangeAt(0) : null;\n    if (selectionTarget !== null) {\n      let selectionRect;\n      if (selectionTarget instanceof Text) {\n        const range = document.createRange();\n        range.selectNode(selectionTarget);\n        selectionRect = range.getBoundingClientRect();\n      } else {\n        selectionRect = selectionTarget.getBoundingClientRect();\n      }\n      scrollIntoViewIfNeeded(editor, selectionRect, rootElement);\n    }\n  }\n  markSelectionChangeFromDOMUpdate();\n}\nfunction $insertNodes(nodes) {\n  let selection = $getSelection() || $getPreviousSelection();\n  if (selection === null) {\n    selection = $getRoot().selectEnd();\n  }\n  selection.insertNodes(nodes);\n}\nfunction $getTextContent() {\n  const selection = $getSelection();\n  if (selection === null) {\n    return '';\n  }\n  return selection.getTextContent();\n}\nfunction removeTextAndSplitBlock(selection) {\n  if (!selection.isCollapsed()) {\n    selection.removeText();\n  }\n  const anchor = selection.anchor;\n  let node = anchor.getNode();\n  let offset = anchor.offset;\n  while (!INTERNAL_$isBlock(node)) {\n    [node, offset] = splitNodeAtPoint(node, offset);\n  }\n  return offset;\n}\nfunction splitNodeAtPoint(node, offset) {\n  const parent = node.getParent();\n  if (!parent) {\n    const paragraph = $createParagraphNode();\n    $getRoot().append(paragraph);\n    paragraph.select();\n    return [$getRoot(), 0];\n  }\n  if ($isTextNode(node)) {\n    const split = node.splitText(offset);\n    if (split.length === 0) {\n      return [parent, node.getIndexWithinParent()];\n    }\n    const x = offset === 0 ? 0 : 1;\n    const index = split[0].getIndexWithinParent() + x;\n    return [parent, index];\n  }\n  if (!$isElementNode(node) || offset === 0) {\n    return [parent, node.getIndexWithinParent()];\n  }\n  const firstToAppend = node.getChildAtIndex(offset);\n  if (firstToAppend) {\n    const insertPoint = new RangeSelection($createPoint(node.__key, offset, 'element'), $createPoint(node.__key, offset, 'element'), 0, '');\n    const newElement = node.insertNewAfter(insertPoint);\n    if (newElement) {\n      newElement.append(firstToAppend, ...firstToAppend.getNextSiblings());\n    }\n  }\n  return [parent, node.getIndexWithinParent() + 1];\n}\nfunction $wrapInlineNodes(nodes) {\n  // We temporarily insert the topLevelNodes into an arbitrary ElementNode,\n  // since insertAfter does not work on nodes that have no parent (TO-DO: fix that).\n  const virtualRoot = $createParagraphNode();\n  let currentBlock = null;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const isLineBreakNode = $isLineBreakNode(node);\n    if (isLineBreakNode || $isDecoratorNode(node) && node.isInline() || $isElementNode(node) && node.isInline() || $isTextNode(node) || node.isParentRequired()) {\n      if (currentBlock === null) {\n        currentBlock = node.createParentElementNode();\n        virtualRoot.append(currentBlock);\n        // In the case of LineBreakNode, we just need to\n        // add an empty ParagraphNode to the topLevelBlocks.\n        if (isLineBreakNode) {\n          continue;\n        }\n      }\n      if (currentBlock !== null) {\n        currentBlock.append(node);\n      }\n    } else {\n      virtualRoot.append(node);\n      currentBlock = null;\n    }\n  }\n  return virtualRoot;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nlet activeEditorState = null;\nlet activeEditor = null;\nlet isReadOnlyMode = false;\nlet isAttemptingToRecoverFromReconcilerError = false;\nlet infiniteTransformCount = 0;\nconst observerOptions = {\n  characterData: true,\n  childList: true,\n  subtree: true\n};\nfunction isCurrentlyReadOnlyMode() {\n  return isReadOnlyMode || activeEditorState !== null && activeEditorState._readOnly;\n}\nfunction errorOnReadOnly() {\n  if (isReadOnlyMode) {\n    {\n      throw Error(`Cannot use method in read-only mode.`);\n    }\n  }\n}\nfunction errorOnInfiniteTransforms() {\n  if (infiniteTransformCount > 99) {\n    {\n      throw Error(`One or more transforms are endlessly triggering additional transforms. May have encountered infinite recursion caused by transforms that have their preconditions too lose and/or conflict with each other.`);\n    }\n  }\n}\nfunction getActiveEditorState() {\n  if (activeEditorState === null) {\n    {\n      throw Error(`Unable to find an active editor state. State helpers or node methods can only be used synchronously during the callback of editor.update() or editorState.read().`);\n    }\n  }\n  return activeEditorState;\n}\nfunction getActiveEditor() {\n  if (activeEditor === null) {\n    {\n      throw Error(`Unable to find an active editor. This method can only be used synchronously during the callback of editor.update().`);\n    }\n  }\n  return activeEditor;\n}\nfunction internalGetActiveEditor() {\n  return activeEditor;\n}\nfunction $applyTransforms(editor, node, transformsCache) {\n  const type = node.__type;\n  const registeredNode = getRegisteredNodeOrThrow(editor, type);\n  let transformsArr = transformsCache.get(type);\n  if (transformsArr === undefined) {\n    transformsArr = Array.from(registeredNode.transforms);\n    transformsCache.set(type, transformsArr);\n  }\n  const transformsArrLength = transformsArr.length;\n  for (let i = 0; i < transformsArrLength; i++) {\n    transformsArr[i](node);\n    if (!node.isAttached()) {\n      break;\n    }\n  }\n}\nfunction $isNodeValidForTransform(node, compositionKey) {\n  return node !== undefined &&\n  // We don't want to transform nodes being composed\n  node.__key !== compositionKey && node.isAttached();\n}\nfunction $normalizeAllDirtyTextNodes(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const nodeMap = editorState._nodeMap;\n  for (const nodeKey of dirtyLeaves) {\n    const node = nodeMap.get(nodeKey);\n    if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n      $normalizeTextNode(node);\n    }\n  }\n}\n\n/**\n * Transform heuristic:\n * 1. We transform leaves first. If transforms generate additional dirty nodes we repeat step 1.\n * The reasoning behind this is that marking a leaf as dirty marks all its parent elements as dirty too.\n * 2. We transform elements. If element transforms generate additional dirty nodes we repeat step 1.\n * If element transforms only generate additional dirty elements we only repeat step 2.\n *\n * Note that to keep track of newly dirty nodes and subtrees we leverage the editor._dirtyNodes and\n * editor._subtrees which we reset in every loop.\n */\nfunction $applyAllTransforms(editorState, editor) {\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const nodeMap = editorState._nodeMap;\n  const compositionKey = $getCompositionKey();\n  const transformsCache = new Map();\n  let untransformedDirtyLeaves = dirtyLeaves;\n  let untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n  let untransformedDirtyElements = dirtyElements;\n  let untransformedDirtyElementsLength = untransformedDirtyElements.size;\n  while (untransformedDirtyLeavesLength > 0 || untransformedDirtyElementsLength > 0) {\n    if (untransformedDirtyLeavesLength > 0) {\n      // We leverage editor._dirtyLeaves to track the new dirty leaves after the transforms\n      editor._dirtyLeaves = new Set();\n      for (const nodeKey of untransformedDirtyLeaves) {\n        const node = nodeMap.get(nodeKey);\n        if ($isTextNode(node) && node.isAttached() && node.isSimpleText() && !node.isUnmergeable()) {\n          $normalizeTextNode(node);\n        }\n        if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n          $applyTransforms(editor, node, transformsCache);\n        }\n        dirtyLeaves.add(nodeKey);\n      }\n      untransformedDirtyLeaves = editor._dirtyLeaves;\n      untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n\n      // We want to prioritize node transforms over element transforms\n      if (untransformedDirtyLeavesLength > 0) {\n        infiniteTransformCount++;\n        continue;\n      }\n    }\n\n    // All dirty leaves have been processed. Let's do elements!\n    // We have previously processed dirty leaves, so let's restart the editor leaves Set to track\n    // new ones caused by element transforms\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    for (const currentUntransformedDirtyElement of untransformedDirtyElements) {\n      const nodeKey = currentUntransformedDirtyElement[0];\n      const intentionallyMarkedAsDirty = currentUntransformedDirtyElement[1];\n      if (nodeKey !== 'root' && !intentionallyMarkedAsDirty) {\n        continue;\n      }\n      const node = nodeMap.get(nodeKey);\n      if (node !== undefined && $isNodeValidForTransform(node, compositionKey)) {\n        $applyTransforms(editor, node, transformsCache);\n      }\n      dirtyElements.set(nodeKey, intentionallyMarkedAsDirty);\n    }\n    untransformedDirtyLeaves = editor._dirtyLeaves;\n    untransformedDirtyLeavesLength = untransformedDirtyLeaves.size;\n    untransformedDirtyElements = editor._dirtyElements;\n    untransformedDirtyElementsLength = untransformedDirtyElements.size;\n    infiniteTransformCount++;\n  }\n  editor._dirtyLeaves = dirtyLeaves;\n  editor._dirtyElements = dirtyElements;\n}\nfunction $parseSerializedNode(serializedNode) {\n  const internalSerializedNode = serializedNode;\n  return $parseSerializedNodeImpl(internalSerializedNode, getActiveEditor()._nodes);\n}\nfunction $parseSerializedNodeImpl(serializedNode, registeredNodes) {\n  const type = serializedNode.type;\n  const registeredNode = registeredNodes.get(type);\n  if (registeredNode === undefined) {\n    {\n      throw Error(`parseEditorState: type \"${type}\" + not found`);\n    }\n  }\n  const nodeClass = registeredNode.klass;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not implement .importJSON().`);\n    }\n  }\n  const node = nodeClass.importJSON(serializedNode);\n  const children = serializedNode.children;\n  if ($isElementNode(node) && Array.isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      const serializedJSONChildNode = children[i];\n      const childNode = $parseSerializedNodeImpl(serializedJSONChildNode, registeredNodes);\n      node.append(childNode);\n    }\n  }\n  return node;\n}\nfunction parseEditorState(serializedEditorState, editor, updateFn) {\n  const editorState = createEmptyEditorState();\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previousDirtyElements = editor._dirtyElements;\n  const previousDirtyLeaves = editor._dirtyLeaves;\n  const previousCloneNotNeeded = editor._cloneNotNeeded;\n  const previousDirtyType = editor._dirtyType;\n  editor._dirtyElements = new Map();\n  editor._dirtyLeaves = new Set();\n  editor._cloneNotNeeded = new Set();\n  editor._dirtyType = 0;\n  activeEditorState = editorState;\n  isReadOnlyMode = false;\n  activeEditor = editor;\n  try {\n    const registeredNodes = editor._nodes;\n    const serializedNode = serializedEditorState.root;\n    $parseSerializedNodeImpl(serializedNode, registeredNodes);\n    if (updateFn) {\n      updateFn();\n    }\n\n    // Make the editorState immutable\n    editorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(editorState);\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n  } finally {\n    editor._dirtyElements = previousDirtyElements;\n    editor._dirtyLeaves = previousDirtyLeaves;\n    editor._cloneNotNeeded = previousCloneNotNeeded;\n    editor._dirtyType = previousDirtyType;\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n  return editorState;\n}\n\n// This technically isn't an update but given we need\n// exposure to the module's active bindings, we have this\n// function here\n\nfunction readEditorState(editorState, callbackFn) {\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  activeEditorState = editorState;\n  isReadOnlyMode = true;\n  activeEditor = null;\n  try {\n    return callbackFn();\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n  }\n}\nfunction handleDEVOnlyPendingUpdateGuarantees(pendingEditorState) {\n  // Given we can't Object.freeze the nodeMap as it's a Map,\n  // we instead replace its set, clear and delete methods.\n  const nodeMap = pendingEditorState._nodeMap;\n  nodeMap.set = () => {\n    throw new Error('Cannot call set() on a frozen Lexical node map');\n  };\n  nodeMap.clear = () => {\n    throw new Error('Cannot call clear() on a frozen Lexical node map');\n  };\n  nodeMap.delete = () => {\n    throw new Error('Cannot call delete() on a frozen Lexical node map');\n  };\n}\nfunction commitPendingUpdates(editor, recoveryEditorState) {\n  const pendingEditorState = editor._pendingEditorState;\n  const rootElement = editor._rootElement;\n  const shouldSkipDOM = editor._headless || rootElement === null;\n  if (pendingEditorState === null) {\n    return;\n  }\n\n  // ======\n  // Reconciliation has started.\n  // ======\n\n  const currentEditorState = editor._editorState;\n  const currentSelection = currentEditorState._selection;\n  const pendingSelection = pendingEditorState._selection;\n  const needsUpdate = editor._dirtyType !== NO_DIRTY_NODES;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  const observer = editor._observer;\n  let mutatedNodes = null;\n  editor._pendingEditorState = null;\n  editor._editorState = pendingEditorState;\n  if (!shouldSkipDOM && needsUpdate && observer !== null) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    isReadOnlyMode = false;\n    // We don't want updates to sync block the reconciliation.\n    editor._updating = true;\n    try {\n      const dirtyType = editor._dirtyType;\n      const dirtyElements = editor._dirtyElements;\n      const dirtyLeaves = editor._dirtyLeaves;\n      observer.disconnect();\n      mutatedNodes = reconcileRoot(currentEditorState, pendingEditorState, editor, dirtyType, dirtyElements, dirtyLeaves);\n    } catch (error) {\n      // Report errors\n      if (error instanceof Error) {\n        editor._onError(error);\n      }\n\n      // Reset editor and restore incoming editor state to the DOM\n      if (!isAttemptingToRecoverFromReconcilerError) {\n        resetEditor(editor, null, rootElement, pendingEditorState);\n        initMutationObserver(editor);\n        editor._dirtyType = FULL_RECONCILE;\n        isAttemptingToRecoverFromReconcilerError = true;\n        commitPendingUpdates(editor, currentEditorState);\n        isAttemptingToRecoverFromReconcilerError = false;\n      } else {\n        // To avoid a possible situation of infinite loops, lets throw\n        throw error;\n      }\n      return;\n    } finally {\n      observer.observe(rootElement, observerOptions);\n      editor._updating = previouslyUpdating;\n      activeEditorState = previousActiveEditorState;\n      isReadOnlyMode = previousReadOnlyMode;\n      activeEditor = previousActiveEditor;\n    }\n  }\n  if (!pendingEditorState._readOnly) {\n    pendingEditorState._readOnly = true;\n    {\n      handleDEVOnlyPendingUpdateGuarantees(pendingEditorState);\n      if ($isRangeSelection(pendingSelection)) {\n        Object.freeze(pendingSelection.anchor);\n        Object.freeze(pendingSelection.focus);\n      }\n      Object.freeze(pendingSelection);\n    }\n  }\n  const dirtyLeaves = editor._dirtyLeaves;\n  const dirtyElements = editor._dirtyElements;\n  const normalizedNodes = editor._normalizedNodes;\n  const tags = editor._updateTags;\n  const deferred = editor._deferred;\n  if (needsUpdate) {\n    editor._dirtyType = NO_DIRTY_NODES;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements = new Map();\n    editor._normalizedNodes = new Set();\n    editor._updateTags = new Set();\n  }\n  $garbageCollectDetachedDecorators(editor, pendingEditorState);\n\n  // ======\n  // Reconciliation has finished. Now update selection and trigger listeners.\n  // ======\n\n  const domSelection = shouldSkipDOM ? null : getDOMSelection(editor._window);\n\n  // Attempt to update the DOM selection, including focusing of the root element,\n  // and scroll into view if needed.\n  if (editor._editable &&\n  // domSelection will be null in headless\n  domSelection !== null && (needsUpdate || pendingSelection === null || pendingSelection.dirty)) {\n    activeEditor = editor;\n    activeEditorState = pendingEditorState;\n    try {\n      if (observer !== null) {\n        observer.disconnect();\n      }\n      if (needsUpdate || pendingSelection === null || pendingSelection.dirty) {\n        const blockCursorElement = editor._blockCursorElement;\n        if (blockCursorElement !== null) {\n          removeDOMBlockCursorElement(blockCursorElement, editor, rootElement);\n        }\n        updateDOMSelection(currentSelection, pendingSelection, editor, domSelection, tags, rootElement);\n      }\n      updateDOMBlockCursorElement(editor, rootElement, pendingSelection);\n      if (observer !== null) {\n        observer.observe(rootElement, observerOptions);\n      }\n    } finally {\n      activeEditor = previousActiveEditor;\n      activeEditorState = previousActiveEditorState;\n    }\n  }\n  if (mutatedNodes !== null) {\n    triggerMutationListeners(editor, mutatedNodes, tags, dirtyLeaves, currentEditorState);\n  }\n  if (!$isRangeSelection(pendingSelection) && pendingSelection !== null && (currentSelection === null || !currentSelection.is(pendingSelection))) {\n    editor.dispatchCommand(SELECTION_CHANGE_COMMAND, undefined);\n  }\n  /**\n   * Capture pendingDecorators after garbage collecting detached decorators\n   */\n  const pendingDecorators = editor._pendingDecorators;\n  if (pendingDecorators !== null) {\n    editor._decorators = pendingDecorators;\n    editor._pendingDecorators = null;\n    triggerListeners('decorator', editor, true, pendingDecorators);\n  }\n\n  // If reconciler fails, we reset whole editor (so current editor state becomes empty)\n  // and attempt to re-render pendingEditorState. If that goes through we trigger\n  // listeners, but instead use recoverEditorState which is current editor state before reset\n  // This specifically important for collab that relies on prevEditorState from update\n  // listener to calculate delta of changed nodes/properties\n  triggerTextContentListeners(editor, recoveryEditorState || currentEditorState, pendingEditorState);\n  triggerListeners('update', editor, true, {\n    dirtyElements,\n    dirtyLeaves,\n    editorState: pendingEditorState,\n    normalizedNodes,\n    prevEditorState: recoveryEditorState || currentEditorState,\n    tags\n  });\n  triggerDeferredUpdateCallbacks(editor, deferred);\n  triggerEnqueuedUpdates(editor);\n}\nfunction triggerTextContentListeners(editor, currentEditorState, pendingEditorState) {\n  const currentTextContent = getEditorStateTextContent(currentEditorState);\n  const latestTextContent = getEditorStateTextContent(pendingEditorState);\n  if (currentTextContent !== latestTextContent) {\n    triggerListeners('textcontent', editor, true, latestTextContent);\n  }\n}\nfunction triggerMutationListeners(editor, mutatedNodes, updateTags, dirtyLeaves, prevEditorState) {\n  const listeners = Array.from(editor._listeners.mutation);\n  const listenersLength = listeners.length;\n  for (let i = 0; i < listenersLength; i++) {\n    const [listener, klass] = listeners[i];\n    const mutatedNodesByType = mutatedNodes.get(klass);\n    if (mutatedNodesByType !== undefined) {\n      listener(mutatedNodesByType, {\n        dirtyLeaves,\n        prevEditorState,\n        updateTags\n      });\n    }\n  }\n}\nfunction triggerListeners(type, editor, isCurrentlyEnqueuingUpdates, ...payload) {\n  const previouslyUpdating = editor._updating;\n  editor._updating = isCurrentlyEnqueuingUpdates;\n  try {\n    const listeners = Array.from(editor._listeners[type]);\n    for (let i = 0; i < listeners.length; i++) {\n      // @ts-ignore\n      listeners[i].apply(null, payload);\n    }\n  } finally {\n    editor._updating = previouslyUpdating;\n  }\n}\nfunction triggerCommandListeners(editor, type, payload) {\n  if (editor._updating === false || activeEditor !== editor) {\n    let returnVal = false;\n    editor.update(() => {\n      returnVal = triggerCommandListeners(editor, type, payload);\n    });\n    return returnVal;\n  }\n  const editors = getEditorsToPropagate(editor);\n  for (let i = 4; i >= 0; i--) {\n    for (let e = 0; e < editors.length; e++) {\n      const currentEditor = editors[e];\n      const commandListeners = currentEditor._commands;\n      const listenerInPriorityOrder = commandListeners.get(type);\n      if (listenerInPriorityOrder !== undefined) {\n        const listenersSet = listenerInPriorityOrder[i];\n        if (listenersSet !== undefined) {\n          const listeners = Array.from(listenersSet);\n          const listenersLength = listeners.length;\n          for (let j = 0; j < listenersLength; j++) {\n            if (listeners[j](payload, editor) === true) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n  return false;\n}\nfunction triggerEnqueuedUpdates(editor) {\n  const queuedUpdates = editor._updates;\n  if (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [updateFn, options] = queuedUpdate;\n      beginUpdate(editor, updateFn, options);\n    }\n  }\n}\nfunction triggerDeferredUpdateCallbacks(editor, deferred) {\n  editor._deferred = [];\n  if (deferred.length !== 0) {\n    const previouslyUpdating = editor._updating;\n    editor._updating = true;\n    try {\n      for (let i = 0; i < deferred.length; i++) {\n        deferred[i]();\n      }\n    } finally {\n      editor._updating = previouslyUpdating;\n    }\n  }\n}\nfunction processNestedUpdates(editor, initialSkipTransforms) {\n  const queuedUpdates = editor._updates;\n  let skipTransforms = initialSkipTransforms || false;\n\n  // Updates might grow as we process them, we so we'll need\n  // to handle each update as we go until the updates array is\n  // empty.\n  while (queuedUpdates.length !== 0) {\n    const queuedUpdate = queuedUpdates.shift();\n    if (queuedUpdate) {\n      const [nextUpdateFn, options] = queuedUpdate;\n      let onUpdate;\n      let tag;\n      if (options !== undefined) {\n        onUpdate = options.onUpdate;\n        tag = options.tag;\n        if (options.skipTransforms) {\n          skipTransforms = true;\n        }\n        if (onUpdate) {\n          editor._deferred.push(onUpdate);\n        }\n        if (tag) {\n          editor._updateTags.add(tag);\n        }\n      }\n      nextUpdateFn();\n    }\n  }\n  return skipTransforms;\n}\nfunction beginUpdate(editor, updateFn, options) {\n  const updateTags = editor._updateTags;\n  let onUpdate;\n  let tag;\n  let skipTransforms = false;\n  let discrete = false;\n  if (options !== undefined) {\n    onUpdate = options.onUpdate;\n    tag = options.tag;\n    if (tag != null) {\n      updateTags.add(tag);\n    }\n    skipTransforms = options.skipTransforms || false;\n    discrete = options.discrete || false;\n  }\n  if (onUpdate) {\n    editor._deferred.push(onUpdate);\n  }\n  const currentEditorState = editor._editorState;\n  let pendingEditorState = editor._pendingEditorState;\n  let editorStateWasCloned = false;\n  if (pendingEditorState === null || pendingEditorState._readOnly) {\n    pendingEditorState = editor._pendingEditorState = cloneEditorState(pendingEditorState || currentEditorState);\n    editorStateWasCloned = true;\n  }\n  pendingEditorState._flushSync = discrete;\n  const previousActiveEditorState = activeEditorState;\n  const previousReadOnlyMode = isReadOnlyMode;\n  const previousActiveEditor = activeEditor;\n  const previouslyUpdating = editor._updating;\n  activeEditorState = pendingEditorState;\n  isReadOnlyMode = false;\n  editor._updating = true;\n  activeEditor = editor;\n  try {\n    if (editorStateWasCloned) {\n      if (editor._headless) {\n        if (currentEditorState._selection !== null) {\n          pendingEditorState._selection = currentEditorState._selection.clone();\n        }\n      } else {\n        pendingEditorState._selection = internalCreateSelection(editor);\n      }\n    }\n    const startingCompositionKey = editor._compositionKey;\n    updateFn();\n    skipTransforms = processNestedUpdates(editor, skipTransforms);\n    applySelectionTransforms(pendingEditorState, editor);\n    if (editor._dirtyType !== NO_DIRTY_NODES) {\n      if (skipTransforms) {\n        $normalizeAllDirtyTextNodes(pendingEditorState, editor);\n      } else {\n        $applyAllTransforms(pendingEditorState, editor);\n      }\n      processNestedUpdates(editor);\n      $garbageCollectDetachedNodes(currentEditorState, pendingEditorState, editor._dirtyLeaves, editor._dirtyElements);\n    }\n    const endingCompositionKey = editor._compositionKey;\n    if (startingCompositionKey !== endingCompositionKey) {\n      pendingEditorState._flushSync = true;\n    }\n    const pendingSelection = pendingEditorState._selection;\n    if ($isRangeSelection(pendingSelection)) {\n      const pendingNodeMap = pendingEditorState._nodeMap;\n      const anchorKey = pendingSelection.anchor.key;\n      const focusKey = pendingSelection.focus.key;\n      if (pendingNodeMap.get(anchorKey) === undefined || pendingNodeMap.get(focusKey) === undefined) {\n        {\n          throw Error(`updateEditor: selection has been lost because the previously selected nodes have been removed and selection wasn't moved to another node. Ensure selection changes after removing/replacing a selected node.`);\n        }\n      }\n    } else if ($isNodeSelection(pendingSelection)) {\n      // TODO: we should also validate node selection?\n      if (pendingSelection._nodes.size === 0) {\n        pendingEditorState._selection = null;\n      }\n    }\n  } catch (error) {\n    // Report errors\n    if (error instanceof Error) {\n      editor._onError(error);\n    }\n\n    // Restore existing editor state to the DOM\n    editor._pendingEditorState = currentEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n    editor._cloneNotNeeded.clear();\n    editor._dirtyLeaves = new Set();\n    editor._dirtyElements.clear();\n    commitPendingUpdates(editor);\n    return;\n  } finally {\n    activeEditorState = previousActiveEditorState;\n    isReadOnlyMode = previousReadOnlyMode;\n    activeEditor = previousActiveEditor;\n    editor._updating = previouslyUpdating;\n    infiniteTransformCount = 0;\n  }\n  const shouldUpdate = editor._dirtyType !== NO_DIRTY_NODES || editorStateHasDirtySelection(pendingEditorState, editor);\n  if (shouldUpdate) {\n    if (pendingEditorState._flushSync) {\n      pendingEditorState._flushSync = false;\n      commitPendingUpdates(editor);\n    } else if (editorStateWasCloned) {\n      scheduleMicroTask(() => {\n        commitPendingUpdates(editor);\n      });\n    }\n  } else {\n    pendingEditorState._flushSync = false;\n    if (editorStateWasCloned) {\n      updateTags.clear();\n      editor._deferred = [];\n      editor._pendingEditorState = null;\n    }\n  }\n}\nfunction updateEditor(editor, updateFn, options) {\n  if (editor._updating) {\n    editor._updates.push([updateFn, options]);\n  } else {\n    beginUpdate(editor, updateFn, options);\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/** @noInheritDoc */\nclass DecoratorNode extends LexicalNode {\n  constructor(key) {\n    super(key);\n  }\n\n  /**\n   * The returned value is added to the LexicalEditor._decorators\n   */\n  decorate(editor, config) {\n    {\n      throw Error(`decorate: base method not extended`);\n    }\n  }\n  isIsolated() {\n    return false;\n  }\n  isInline() {\n    return true;\n  }\n  isKeyboardSelectable() {\n    return true;\n  }\n}\nfunction $isDecoratorNode(node) {\n  return node instanceof DecoratorNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass ElementNode extends LexicalNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  constructor(key) {\n    super(key);\n    this.__first = null;\n    this.__last = null;\n    this.__size = 0;\n    this.__format = 0;\n    this.__indent = 0;\n    this.__dir = null;\n  }\n  getFormat() {\n    const self = this.getLatest();\n    return self.__format;\n  }\n  getFormatType() {\n    const format = this.getFormat();\n    return ELEMENT_FORMAT_TO_TYPE[format] || '';\n  }\n  getIndent() {\n    const self = this.getLatest();\n    return self.__indent;\n  }\n  getChildren() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenKeys() {\n    const children = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      children.push(child.__key);\n      child = child.getNextSibling();\n    }\n    return children;\n  }\n  getChildrenSize() {\n    const self = this.getLatest();\n    return self.__size;\n  }\n  isEmpty() {\n    return this.getChildrenSize() === 0;\n  }\n  isDirty() {\n    const editor = getActiveEditor();\n    const dirtyElements = editor._dirtyElements;\n    return dirtyElements !== null && dirtyElements.has(this.__key);\n  }\n  isLastChild() {\n    const self = this.getLatest();\n    const parentLastChild = this.getParentOrThrow().getLastChild();\n    return parentLastChild !== null && parentLastChild.is(self);\n  }\n  getAllTextNodes() {\n    const textNodes = [];\n    let child = this.getFirstChild();\n    while (child !== null) {\n      if ($isTextNode(child)) {\n        textNodes.push(child);\n      }\n      if ($isElementNode(child)) {\n        const subChildrenNodes = child.getAllTextNodes();\n        textNodes.push(...subChildrenNodes);\n      }\n      child = child.getNextSibling();\n    }\n    return textNodes;\n  }\n  getFirstDescendant() {\n    let node = this.getFirstChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getFirstChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getLastDescendant() {\n    let node = this.getLastChild();\n    while (node !== null) {\n      if ($isElementNode(node)) {\n        const child = node.getLastChild();\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      break;\n    }\n    return node;\n  }\n  getDescendantByIndex(index) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    // For non-empty element nodes, we resolve its descendant\n    // (either a leaf node or the bottom-most element)\n    if (index >= childrenLength) {\n      const resolvedNode = children[childrenLength - 1];\n      return $isElementNode(resolvedNode) && resolvedNode.getLastDescendant() || resolvedNode || null;\n    }\n    const resolvedNode = children[index];\n    return $isElementNode(resolvedNode) && resolvedNode.getFirstDescendant() || resolvedNode || null;\n  }\n  getFirstChild() {\n    const self = this.getLatest();\n    const firstKey = self.__first;\n    return firstKey === null ? null : $getNodeByKey(firstKey);\n  }\n  getFirstChildOrThrow() {\n    const firstChild = this.getFirstChild();\n    if (firstChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a first child.`);\n      }\n    }\n    return firstChild;\n  }\n  getLastChild() {\n    const self = this.getLatest();\n    const lastKey = self.__last;\n    return lastKey === null ? null : $getNodeByKey(lastKey);\n  }\n  getLastChildOrThrow() {\n    const lastChild = this.getLastChild();\n    if (lastChild === null) {\n      {\n        throw Error(`Expected node ${this.__key} to have a last child.`);\n      }\n    }\n    return lastChild;\n  }\n  getChildAtIndex(index) {\n    const size = this.getChildrenSize();\n    let node;\n    let i;\n    if (index < size / 2) {\n      node = this.getFirstChild();\n      i = 0;\n      while (node !== null && i <= index) {\n        if (i === index) {\n          return node;\n        }\n        node = node.getNextSibling();\n        i++;\n      }\n      return null;\n    }\n    node = this.getLastChild();\n    i = size - 1;\n    while (node !== null && i >= index) {\n      if (i === index) {\n        return node;\n      }\n      node = node.getPreviousSibling();\n      i--;\n    }\n    return null;\n  }\n  getTextContent() {\n    let textContent = '';\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContent += child.getTextContent();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContent += DOUBLE_LINE_BREAK;\n      }\n    }\n    return textContent;\n  }\n  getTextContentSize() {\n    let textContentSize = 0;\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    for (let i = 0; i < childrenLength; i++) {\n      const child = children[i];\n      textContentSize += child.getTextContentSize();\n      if ($isElementNode(child) && i !== childrenLength - 1 && !child.isInline()) {\n        textContentSize += DOUBLE_LINE_BREAK.length;\n      }\n    }\n    return textContentSize;\n  }\n  getDirection() {\n    const self = this.getLatest();\n    return self.__dir;\n  }\n  hasFormat(type) {\n    if (type !== '') {\n      const formatFlag = ELEMENT_TYPE_TO_FORMAT[type];\n      return (this.getFormat() & formatFlag) !== 0;\n    }\n    return false;\n  }\n\n  // Mutators\n\n  select(_anchorOffset, _focusOffset) {\n    errorOnReadOnly();\n    const selection = $getSelection();\n    let anchorOffset = _anchorOffset;\n    let focusOffset = _focusOffset;\n    const childrenCount = this.getChildrenSize();\n    if (!this.canBeEmpty()) {\n      if (_anchorOffset === 0 && _focusOffset === 0) {\n        const firstChild = this.getFirstChild();\n        if ($isTextNode(firstChild) || $isElementNode(firstChild)) {\n          return firstChild.select(0, 0);\n        }\n      } else if ((_anchorOffset === undefined || _anchorOffset === childrenCount) && (_focusOffset === undefined || _focusOffset === childrenCount)) {\n        const lastChild = this.getLastChild();\n        if ($isTextNode(lastChild) || $isElementNode(lastChild)) {\n          return lastChild.select();\n        }\n      }\n    }\n    if (anchorOffset === undefined) {\n      anchorOffset = childrenCount;\n    }\n    if (focusOffset === undefined) {\n      focusOffset = childrenCount;\n    }\n    const key = this.__key;\n    if (!$isRangeSelection(selection)) {\n      return internalMakeRangeSelection(key, anchorOffset, key, focusOffset, 'element', 'element');\n    } else {\n      selection.anchor.set(key, anchorOffset, 'element');\n      selection.focus.set(key, focusOffset, 'element');\n      selection.dirty = true;\n    }\n    return selection;\n  }\n  selectStart() {\n    const firstNode = this.getFirstDescendant();\n    return firstNode ? firstNode.selectStart() : this.select();\n  }\n  selectEnd() {\n    const lastNode = this.getLastDescendant();\n    return lastNode ? lastNode.selectEnd() : this.select();\n  }\n  clear() {\n    const writableSelf = this.getWritable();\n    const children = this.getChildren();\n    children.forEach(child => child.remove());\n    return writableSelf;\n  }\n  append(...nodesToAppend) {\n    return this.splice(this.getChildrenSize(), 0, nodesToAppend);\n  }\n  setDirection(direction) {\n    const self = this.getWritable();\n    self.__dir = direction;\n    return self;\n  }\n  setFormat(type) {\n    const self = this.getWritable();\n    self.__format = type !== '' ? ELEMENT_TYPE_TO_FORMAT[type] : 0;\n    return this;\n  }\n  setIndent(indentLevel) {\n    const self = this.getWritable();\n    self.__indent = indentLevel;\n    return this;\n  }\n  splice(start, deleteCount, nodesToInsert) {\n    const nodesToInsertLength = nodesToInsert.length;\n    const oldSize = this.getChildrenSize();\n    const writableSelf = this.getWritable();\n    const writableSelfKey = writableSelf.__key;\n    const nodesToInsertKeys = [];\n    const nodesToRemoveKeys = [];\n    const nodeAfterRange = this.getChildAtIndex(start + deleteCount);\n    let nodeBeforeRange = null;\n    let newSize = oldSize - deleteCount + nodesToInsertLength;\n    if (start !== 0) {\n      if (start === oldSize) {\n        nodeBeforeRange = this.getLastChild();\n      } else {\n        const node = this.getChildAtIndex(start);\n        if (node !== null) {\n          nodeBeforeRange = node.getPreviousSibling();\n        }\n      }\n    }\n    if (deleteCount > 0) {\n      let nodeToDelete = nodeBeforeRange === null ? this.getFirstChild() : nodeBeforeRange.getNextSibling();\n      for (let i = 0; i < deleteCount; i++) {\n        if (nodeToDelete === null) {\n          {\n            throw Error(`splice: sibling not found`);\n          }\n        }\n        const nextSibling = nodeToDelete.getNextSibling();\n        const nodeKeyToDelete = nodeToDelete.__key;\n        const writableNodeToDelete = nodeToDelete.getWritable();\n        removeFromParent(writableNodeToDelete);\n        nodesToRemoveKeys.push(nodeKeyToDelete);\n        nodeToDelete = nextSibling;\n      }\n    }\n    let prevNode = nodeBeforeRange;\n    for (let i = 0; i < nodesToInsertLength; i++) {\n      const nodeToInsert = nodesToInsert[i];\n      if (prevNode !== null && nodeToInsert.is(prevNode)) {\n        nodeBeforeRange = prevNode = prevNode.getPreviousSibling();\n      }\n      const writableNodeToInsert = nodeToInsert.getWritable();\n      if (writableNodeToInsert.__parent === writableSelfKey) {\n        newSize--;\n      }\n      removeFromParent(writableNodeToInsert);\n      const nodeKeyToInsert = nodeToInsert.__key;\n      if (prevNode === null) {\n        writableSelf.__first = nodeKeyToInsert;\n        writableNodeToInsert.__prev = null;\n      } else {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = nodeKeyToInsert;\n        writableNodeToInsert.__prev = writablePrevNode.__key;\n      }\n      if (nodeToInsert.__key === writableSelfKey) {\n        {\n          throw Error(`append: attempting to append self`);\n        }\n      }\n      // Set child parent to self\n      writableNodeToInsert.__parent = writableSelfKey;\n      nodesToInsertKeys.push(nodeKeyToInsert);\n      prevNode = nodeToInsert;\n    }\n    if (start + deleteCount === oldSize) {\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writablePrevNode.__next = null;\n        writableSelf.__last = prevNode.__key;\n      }\n    } else if (nodeAfterRange !== null) {\n      const writableNodeAfterRange = nodeAfterRange.getWritable();\n      if (prevNode !== null) {\n        const writablePrevNode = prevNode.getWritable();\n        writableNodeAfterRange.__prev = prevNode.__key;\n        writablePrevNode.__next = nodeAfterRange.__key;\n      } else {\n        writableNodeAfterRange.__prev = null;\n      }\n    }\n    writableSelf.__size = newSize;\n\n    // In case of deletion we need to adjust selection, unlink removed nodes\n    // and clean up node itself if it becomes empty. None of these needed\n    // for insertion-only cases\n    if (nodesToRemoveKeys.length) {\n      // Adjusting selection, in case node that was anchor/focus will be deleted\n      const selection = $getSelection();\n      if ($isRangeSelection(selection)) {\n        const nodesToRemoveKeySet = new Set(nodesToRemoveKeys);\n        const nodesToInsertKeySet = new Set(nodesToInsertKeys);\n        const {\n          anchor,\n          focus\n        } = selection;\n        if (isPointRemoved(anchor, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(anchor, anchor.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        if (isPointRemoved(focus, nodesToRemoveKeySet, nodesToInsertKeySet)) {\n          moveSelectionPointToSibling(focus, focus.getNode(), this, nodeBeforeRange, nodeAfterRange);\n        }\n        // Cleanup if node can't be empty\n        if (newSize === 0 && !this.canBeEmpty() && !$isRootOrShadowRoot(this)) {\n          this.remove();\n        }\n      }\n    }\n    return writableSelf;\n  }\n  // JSON serialization\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'element',\n      version: 1\n    };\n  }\n  // These are intended to be extends for specific element heuristics.\n  insertNewAfter(selection, restoreSelection) {\n    return null;\n  }\n  canIndent() {\n    return true;\n  }\n  /*\n   * This method controls the behavior of a the node during backwards\n   * deletion (i.e., backspace) when selection is at the beginning of\n   * the node (offset 0)\n   */\n  collapseAtStart(selection) {\n    return false;\n  }\n  excludeFromCopy(destination) {\n    return false;\n  }\n  // TODO 0.10 deprecate\n  canExtractContents() {\n    return true;\n  }\n  canReplaceWith(replacement) {\n    return true;\n  }\n  canInsertAfter(node) {\n    return true;\n  }\n  canBeEmpty() {\n    return true;\n  }\n  canInsertTextBefore() {\n    return true;\n  }\n  canInsertTextAfter() {\n    return true;\n  }\n  isInline() {\n    return false;\n  }\n  // A shadow root is a Node that behaves like RootNode. The shadow root (and RootNode) mark the\n  // end of the hiercharchy, most implementations should treat it as there's nothing (upwards)\n  // beyond this point. For example, node.getTopLevelElement(), when performed inside a TableCellNode\n  // will return the immediate first child underneath TableCellNode instead of RootNode.\n  isShadowRoot() {\n    return false;\n  }\n  canMergeWith(node) {\n    return false;\n  }\n  extractWithChild(child, selection, destination) {\n    return false;\n  }\n}\nfunction $isElementNode(node) {\n  return node instanceof ElementNode;\n}\nfunction isPointRemoved(point, nodesToRemoveKeySet, nodesToInsertKeySet) {\n  let node = point.getNode();\n  while (node) {\n    const nodeKey = node.__key;\n    if (nodesToRemoveKeySet.has(nodeKey) && !nodesToInsertKeySet.has(nodeKey)) {\n      return true;\n    }\n    node = node.getParent();\n  }\n  return false;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass RootNode extends ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'root';\n  }\n  static clone() {\n    return new RootNode();\n  }\n  constructor() {\n    super('root');\n    this.__cachedText = null;\n  }\n  getTopLevelElementOrThrow() {\n    {\n      throw Error(`getTopLevelElementOrThrow: root nodes are not top level elements`);\n    }\n  }\n  getTextContent() {\n    const cachedText = this.__cachedText;\n    if (isCurrentlyReadOnlyMode() || getActiveEditor()._dirtyType === NO_DIRTY_NODES) {\n      if (cachedText !== null) {\n        return cachedText;\n      }\n    }\n    return super.getTextContent();\n  }\n  remove() {\n    {\n      throw Error(`remove: cannot be called on root nodes`);\n    }\n  }\n  replace(node) {\n    {\n      throw Error(`replace: cannot be called on root nodes`);\n    }\n  }\n  insertBefore(nodeToInsert) {\n    {\n      throw Error(`insertBefore: cannot be called on root nodes`);\n    }\n  }\n  insertAfter(nodeToInsert) {\n    {\n      throw Error(`insertAfter: cannot be called on root nodes`);\n    }\n  }\n\n  // View\n\n  updateDOM(prevNode, dom) {\n    return false;\n  }\n\n  // Mutate\n\n  append(...nodesToAppend) {\n    for (let i = 0; i < nodesToAppend.length; i++) {\n      const node = nodesToAppend[i];\n      if (!$isElementNode(node) && !$isDecoratorNode(node)) {\n        {\n          throw Error(`rootNode.append: Only element or decorator nodes can be appended to the root node`);\n        }\n      }\n    }\n    return super.append(...nodesToAppend);\n  }\n  static importJSON(serializedNode) {\n    // We don't create a root, and instead use the existing root.\n    const node = $getRoot();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      children: [],\n      direction: this.getDirection(),\n      format: this.getFormatType(),\n      indent: this.getIndent(),\n      type: 'root',\n      version: 1\n    };\n  }\n  collapseAtStart() {\n    return true;\n  }\n}\nfunction $createRootNode() {\n  return new RootNode();\n}\nfunction $isRootNode(node) {\n  return node instanceof RootNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction editorStateHasDirtySelection(editorState, editor) {\n  const currentSelection = editor.getEditorState()._selection;\n  const pendingSelection = editorState._selection;\n\n  // Check if we need to update because of changes in selection\n  if (pendingSelection !== null) {\n    if (pendingSelection.dirty || !pendingSelection.is(currentSelection)) {\n      return true;\n    }\n  } else if (currentSelection !== null) {\n    return true;\n  }\n  return false;\n}\nfunction cloneEditorState(current) {\n  return new EditorState(new Map(current._nodeMap));\n}\nfunction createEmptyEditorState() {\n  return new EditorState(new Map([['root', $createRootNode()]]));\n}\nfunction exportNodeToJSON(node) {\n  const serializedNode = node.exportJSON();\n  const nodeClass = node.constructor;\n  if (serializedNode.type !== nodeClass.getType()) {\n    {\n      throw Error(`LexicalNode: Node ${nodeClass.name} does not match the serialized type. Check if .exportJSON() is implemented and it is returning the correct type.`);\n    }\n  }\n  if ($isElementNode(node)) {\n    const serializedChildren = serializedNode.children;\n    if (!Array.isArray(serializedChildren)) {\n      {\n        throw Error(`LexicalNode: Node ${nodeClass.name} is an element but .exportJSON() does not have a children array.`);\n      }\n    }\n    const children = node.getChildren();\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      const serializedChildNode = exportNodeToJSON(child);\n      serializedChildren.push(serializedChildNode);\n    }\n  }\n\n  // @ts-expect-error\n  return serializedNode;\n}\nclass EditorState {\n  constructor(nodeMap, selection) {\n    this._nodeMap = nodeMap;\n    this._selection = selection || null;\n    this._flushSync = false;\n    this._readOnly = false;\n  }\n  isEmpty() {\n    return this._nodeMap.size === 1 && this._selection === null;\n  }\n  read(callbackFn) {\n    return readEditorState(this, callbackFn);\n  }\n  clone(selection) {\n    const editorState = new EditorState(this._nodeMap, selection === undefined ? this._selection : selection);\n    editorState._readOnly = true;\n    return editorState;\n  }\n  toJSON() {\n    return readEditorState(this, () => ({\n      root: exportNodeToJSON($getRoot())\n    }));\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass ParagraphNode extends ElementNode {\n  static getType() {\n    return 'paragraph';\n  }\n  static clone(node) {\n    return new ParagraphNode(node.__key);\n  }\n\n  // View\n\n  createDOM(config) {\n    const dom = document.createElement('p');\n    const classNames = getCachedClassNameArray(config.theme, 'paragraph');\n    if (classNames !== undefined) {\n      const domClassList = dom.classList;\n      domClassList.add(...classNames);\n    }\n    return dom;\n  }\n  updateDOM(prevNode, dom, config) {\n    return false;\n  }\n  static importDOM() {\n    return {\n      p: node => ({\n        conversion: convertParagraphElement,\n        priority: 0\n      })\n    };\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element && isHTMLElement(element)) {\n      if (this.isEmpty()) element.append(document.createElement('br'));\n      const formatType = this.getFormatType();\n      element.style.textAlign = formatType;\n      const direction = this.getDirection();\n      if (direction) {\n        element.dir = direction;\n      }\n      const indent = this.getIndent();\n      if (indent > 0) {\n        // padding-inline-start is not widely supported in email HTML, but\n        // Lexical Reconciler uses padding-inline-start. Using text-indent instead.\n        element.style.textIndent = `${indent * 20}px`;\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importJSON(serializedNode) {\n    const node = $createParagraphNode();\n    node.setFormat(serializedNode.format);\n    node.setIndent(serializedNode.indent);\n    node.setDirection(serializedNode.direction);\n    return node;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'paragraph',\n      version: 1\n    };\n  }\n\n  // Mutation\n\n  insertNewAfter(_, restoreSelection) {\n    const newElement = $createParagraphNode();\n    const direction = this.getDirection();\n    newElement.setDirection(direction);\n    this.insertAfter(newElement, restoreSelection);\n    return newElement;\n  }\n  collapseAtStart() {\n    const children = this.getChildren();\n    // If we have an empty (trimmed) first paragraph and try and remove it,\n    // delete the paragraph as long as we have another sibling to go to\n    if (children.length === 0 || $isTextNode(children[0]) && children[0].getTextContent().trim() === '') {\n      const nextSibling = this.getNextSibling();\n      if (nextSibling !== null) {\n        this.selectNext();\n        this.remove();\n        return true;\n      }\n      const prevSibling = this.getPreviousSibling();\n      if (prevSibling !== null) {\n        this.selectPrevious();\n        this.remove();\n        return true;\n      }\n    }\n    return false;\n  }\n}\nfunction convertParagraphElement(element) {\n  const node = $createParagraphNode();\n  if (element.style) {\n    node.setFormat(element.style.textAlign);\n    const indent = parseInt(element.style.textIndent, 10) / 20;\n    if (indent > 0) {\n      node.setIndent(indent);\n    }\n  }\n  return {\n    node\n  };\n}\nfunction $createParagraphNode() {\n  return $applyNodeReplacement(new ParagraphNode());\n}\nfunction $isParagraphNode(node) {\n  return node instanceof ParagraphNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// https://github.com/microsoft/TypeScript/issues/3841\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst COMMAND_PRIORITY_EDITOR = 0;\nconst COMMAND_PRIORITY_LOW = 1;\nconst COMMAND_PRIORITY_NORMAL = 2;\nconst COMMAND_PRIORITY_HIGH = 3;\nconst COMMAND_PRIORITY_CRITICAL = 4;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n/**\n * Type helper for extracting the payload type from a command.\n *\n * @example\n * ```ts\n * const MY_COMMAND = createCommand<SomeType>();\n *\n * // ...\n *\n * editor.registerCommand(MY_COMMAND, payload => {\n *   // Type of `payload` is inferred here. But lets say we want to extract a function to delegate to\n *   handleMyCommand(editor, payload);\n *   return true;\n * });\n *\n * function handleMyCommand(editor: LexicalEditor, payload: CommandPayloadType<typeof MY_COMMAND>) {\n *   // `payload` is of type `SomeType`, extracted from the command.\n * }\n * ```\n */\n\nfunction resetEditor(editor, prevRootElement, nextRootElement, pendingEditorState) {\n  const keyNodeMap = editor._keyToDOMMap;\n  keyNodeMap.clear();\n  editor._editorState = createEmptyEditorState();\n  editor._pendingEditorState = pendingEditorState;\n  editor._compositionKey = null;\n  editor._dirtyType = NO_DIRTY_NODES;\n  editor._cloneNotNeeded.clear();\n  editor._dirtyLeaves = new Set();\n  editor._dirtyElements.clear();\n  editor._normalizedNodes = new Set();\n  editor._updateTags = new Set();\n  editor._updates = [];\n  editor._blockCursorElement = null;\n  const observer = editor._observer;\n  if (observer !== null) {\n    observer.disconnect();\n    editor._observer = null;\n  }\n\n  // Remove all the DOM nodes from the root element\n  if (prevRootElement !== null) {\n    prevRootElement.textContent = '';\n  }\n  if (nextRootElement !== null) {\n    nextRootElement.textContent = '';\n    keyNodeMap.set('root', nextRootElement);\n  }\n}\nfunction initializeConversionCache(nodes, additionalConversions) {\n  const conversionCache = new Map();\n  const handledConversions = new Set();\n  const addConversionsToCache = map => {\n    Object.keys(map).forEach(key => {\n      let currentCache = conversionCache.get(key);\n      if (currentCache === undefined) {\n        currentCache = [];\n        conversionCache.set(key, currentCache);\n      }\n      currentCache.push(map[key]);\n    });\n  };\n  nodes.forEach(node => {\n    const importDOM = node.klass.importDOM != null ? node.klass.importDOM.bind(node.klass) : null;\n    if (importDOM == null || handledConversions.has(importDOM)) {\n      return;\n    }\n    handledConversions.add(importDOM);\n    const map = importDOM();\n    if (map !== null) {\n      addConversionsToCache(map);\n    }\n  });\n  if (additionalConversions) {\n    addConversionsToCache(additionalConversions);\n  }\n  return conversionCache;\n}\n\n/**\n * Creates a new LexicalEditor attached to a single contentEditable (provided in the config). This is\n * the lowest-level initialization API for a LexicalEditor. If you're using React or another framework,\n * consider using the appropriate abstractions, such as LexicalComposer\n * @param editorConfig - the editor configuration.\n * @returns a LexicalEditor instance\n */\nfunction createEditor(editorConfig) {\n  const config = editorConfig || {};\n  const activeEditor = internalGetActiveEditor();\n  const theme = config.theme || {};\n  const parentEditor = editorConfig === undefined ? activeEditor : config.parentEditor || null;\n  const disableEvents = config.disableEvents || false;\n  const editorState = createEmptyEditorState();\n  const namespace = config.namespace || (parentEditor !== null ? parentEditor._config.namespace : createUID());\n  const initialEditorState = config.editorState;\n  const nodes = [RootNode, TextNode, LineBreakNode, TabNode, ParagraphNode, ...(config.nodes || [])];\n  const {\n    onError,\n    html\n  } = config;\n  const isEditable = config.editable !== undefined ? config.editable : true;\n  let registeredNodes;\n  if (editorConfig === undefined && activeEditor !== null) {\n    registeredNodes = activeEditor._nodes;\n  } else {\n    registeredNodes = new Map();\n    for (let i = 0; i < nodes.length; i++) {\n      let klass = nodes[i];\n      let replace = null;\n      let replaceWithKlass = null;\n      if (typeof klass !== 'function') {\n        const options = klass;\n        klass = options.replace;\n        replace = options.with;\n        replaceWithKlass = options.withKlass || null;\n      }\n      // Ensure custom nodes implement required methods.\n      {\n        const name = klass.name;\n        if (name !== 'RootNode') {\n          const proto = klass.prototype;\n          ['getType', 'clone'].forEach(method => {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!klass.hasOwnProperty(method)) {\n              console.warn(`${name} must implement static \"${method}\" method`);\n            }\n          });\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importDOM') &&\n          // eslint-disable-next-line no-prototype-builtins\n          klass.hasOwnProperty('exportDOM')) {\n            console.warn(`${name} should implement \"importDOM\" if using a custom \"exportDOM\" method to ensure HTML serialization (important for copy & paste) works as expected`);\n          }\n          if (proto instanceof DecoratorNode) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (!proto.hasOwnProperty('decorate')) {\n              console.warn(`${proto.constructor.name} must implement \"decorate\" method`);\n            }\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !klass.hasOwnProperty('importJSON')) {\n            console.warn(`${name} should implement \"importJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n          if (\n          // eslint-disable-next-line no-prototype-builtins\n          !proto.hasOwnProperty('exportJSON')) {\n            console.warn(`${name} should implement \"exportJSON\" method to ensure JSON and default HTML serialization works as expected`);\n          }\n        }\n      }\n      const type = klass.getType();\n      const transform = klass.transform();\n      const transforms = new Set();\n      if (transform !== null) {\n        transforms.add(transform);\n      }\n      registeredNodes.set(type, {\n        exportDOM: html && html.export ? html.export.get(klass) : undefined,\n        klass,\n        replace,\n        replaceWithKlass,\n        transforms\n      });\n    }\n  }\n  const editor = new LexicalEditor(editorState, parentEditor, registeredNodes, {\n    disableEvents,\n    namespace,\n    theme\n  }, onError ? onError : console.error, initializeConversionCache(registeredNodes, html ? html.import : undefined), isEditable);\n  if (initialEditorState !== undefined) {\n    editor._pendingEditorState = initialEditorState;\n    editor._dirtyType = FULL_RECONCILE;\n  }\n  return editor;\n}\nclass LexicalEditor {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n  constructor(editorState, parentEditor, nodes, config, onError, htmlConversions, editable) {\n    this._parentEditor = parentEditor;\n    // The root element associated with this editor\n    this._rootElement = null;\n    // The current editor state\n    this._editorState = editorState;\n    // Handling of drafts and updates\n    this._pendingEditorState = null;\n    // Used to help co-ordinate selection and events\n    this._compositionKey = null;\n    this._deferred = [];\n    // Used during reconciliation\n    this._keyToDOMMap = new Map();\n    this._updates = [];\n    this._updating = false;\n    // Listeners\n    this._listeners = {\n      decorator: new Set(),\n      editable: new Set(),\n      mutation: new Map(),\n      root: new Set(),\n      textcontent: new Set(),\n      update: new Set()\n    };\n    // Commands\n    this._commands = new Map();\n    // Editor configuration for theme/context.\n    this._config = config;\n    // Mapping of types to their nodes\n    this._nodes = nodes;\n    // React node decorators for portals\n    this._decorators = {};\n    this._pendingDecorators = null;\n    // Used to optimize reconciliation\n    this._dirtyType = NO_DIRTY_NODES;\n    this._cloneNotNeeded = new Set();\n    this._dirtyLeaves = new Set();\n    this._dirtyElements = new Map();\n    this._normalizedNodes = new Set();\n    this._updateTags = new Set();\n    // Handling of DOM mutations\n    this._observer = null;\n    // Used for identifying owning editors\n    this._key = createUID();\n    this._onError = onError;\n    this._htmlConversions = htmlConversions;\n    this._editable = editable;\n    this._headless = parentEditor !== null && parentEditor._headless;\n    this._window = null;\n    this._blockCursorElement = null;\n  }\n\n  /**\n   *\n   * @returns true if the editor is currently in \"composition\" mode due to receiving input\n   * through an IME, or 3P extension, for example. Returns false otherwise.\n   */\n  isComposing() {\n    return this._compositionKey != null;\n  }\n  /**\n   * Registers a listener for Editor update event. Will trigger the provided callback\n   * each time the editor goes through an update (via {@link LexicalEditor.update}) until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerUpdateListener(listener) {\n    const listenerSetOrMap = this._listeners.update;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for for when the editor changes between editable and non-editable states.\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerEditableListener(listener) {\n    const listenerSetOrMap = this._listeners.editable;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's decorator object changes. The decorator object contains\n   * all DecoratorNode keys -> their decorated value. This is primarily used with external UI frameworks.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerDecoratorListener(listener) {\n    const listenerSetOrMap = this._listeners.decorator;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when Lexical commits an update to the DOM and the text content of\n   * the editor changes from the previous state of the editor. If the text content is the\n   * same between updates, no notifications to the listeners will happen.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerTextContentListener(listener) {\n    const listenerSetOrMap = this._listeners.textcontent;\n    listenerSetOrMap.add(listener);\n    return () => {\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener for when the editor's root DOM element (the content editable\n   * Lexical attaches to) changes. This is primarily used to attach event listeners to the root\n   *  element. The root listener function is executed directly upon registration and then on\n   * any subsequent update.\n   *\n   * Will trigger the provided callback each time the editor transitions between these states until the\n   * teardown function is called.\n   *\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerRootListener(listener) {\n    const listenerSetOrMap = this._listeners.root;\n    listener(this._rootElement, null);\n    listenerSetOrMap.add(listener);\n    return () => {\n      listener(null, this._rootElement);\n      listenerSetOrMap.delete(listener);\n    };\n  }\n  /**\n   * Registers a listener that will trigger anytime the provided command\n   * is dispatched, subject to priority. Listeners that run at a higher priority can \"intercept\"\n   * commands and prevent them from propagating to other handlers by returning true.\n   *\n   * Listeners registered at the same priority level will run deterministically in the order of registration.\n   *\n   * @param command - the command that will trigger the callback.\n   * @param listener - the function that will execute when the command is dispatched.\n   * @param priority - the relative priority of the listener. 0 | 1 | 2 | 3 | 4\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerCommand(command, listener, priority) {\n    if (priority === undefined) {\n      {\n        throw Error(`Listener for type \"command\" requires a \"priority\".`);\n      }\n    }\n    const commandsMap = this._commands;\n    if (!commandsMap.has(command)) {\n      commandsMap.set(command, [new Set(), new Set(), new Set(), new Set(), new Set()]);\n    }\n    const listenersInPriorityOrder = commandsMap.get(command);\n    if (listenersInPriorityOrder === undefined) {\n      {\n        throw Error(`registerCommand: Command ${String(command)} not found in command map`);\n      }\n    }\n    const listeners = listenersInPriorityOrder[priority];\n    listeners.add(listener);\n    return () => {\n      listeners.delete(listener);\n      if (listenersInPriorityOrder.every(listenersSet => listenersSet.size === 0)) {\n        commandsMap.delete(command);\n      }\n    };\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * mutated. The listener will receive a list of nodes along with the type of mutation\n   * that was performed on each: created, destroyed, or updated.\n   *\n   * One common use case for this is to attach DOM event listeners to the underlying DOM nodes as Lexical nodes are created.\n   * {@link LexicalEditor.getElementByKey} can be used for this.\n   *\n   * @param klass - The class of the node that you want to listen to mutations on.\n   * @param listener - The logic you want to run when the node is mutated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerMutationListener(klass, listener) {\n    const registeredNode = this._nodes.get(klass.getType());\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const mutations = this._listeners.mutation;\n    mutations.set(listener, klass);\n    return () => {\n      mutations.delete(listener);\n    };\n  }\n\n  /** @internal */\n  registerNodeTransformToKlass(klass, listener) {\n    const type = klass.getType();\n    const registeredNode = this._nodes.get(type);\n    if (registeredNode === undefined) {\n      {\n        throw Error(`Node ${klass.name} has not been registered. Ensure node has been passed to createEditor.`);\n      }\n    }\n    const transforms = registeredNode.transforms;\n    transforms.add(listener);\n    return registeredNode;\n  }\n\n  /**\n   * Registers a listener that will run when a Lexical node of the provided class is\n   * marked dirty during an update. The listener will continue to run as long as the node\n   * is marked dirty. There are no guarantees around the order of transform execution!\n   *\n   * Watch out for infinite loops. See [Node Transforms](https://lexical.dev/docs/concepts/transforms)\n   * @param klass - The class of the node that you want to run transforms on.\n   * @param listener - The logic you want to run when the node is updated.\n   * @returns a teardown function that can be used to cleanup the listener.\n   */\n  registerNodeTransform(klass, listener) {\n    const registeredNode = this.registerNodeTransformToKlass(klass, listener);\n    const registeredNodes = [registeredNode];\n    const replaceWithKlass = registeredNode.replaceWithKlass;\n    if (replaceWithKlass != null) {\n      const registeredReplaceWithNode = this.registerNodeTransformToKlass(replaceWithKlass, listener);\n      registeredNodes.push(registeredReplaceWithNode);\n    }\n    markAllNodesAsDirty(this, klass.getType());\n    return () => {\n      registeredNodes.forEach(node => node.transforms.delete(listener));\n    };\n  }\n\n  /**\n   * Used to assert that a certain node is registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered the provided node type, false otherwise.\n   */\n  hasNode(node) {\n    return this._nodes.has(node.getType());\n  }\n\n  /**\n   * Used to assert that certain nodes are registered, usually by plugins to ensure nodes that they\n   * depend on have been registered.\n   * @returns True if the editor has registered all of the provided node types, false otherwise.\n   */\n  hasNodes(nodes) {\n    return nodes.every(this.hasNode.bind(this));\n  }\n\n  /**\n   * Dispatches a command of the specified type with the specified payload.\n   * This triggers all command listeners (set by {@link LexicalEditor.registerCommand})\n   * for this type, passing them the provided payload.\n   * @param type - the type of command listeners to trigger.\n   * @param payload - the data to pass as an argument to the command listeners.\n   */\n  dispatchCommand(type, payload) {\n    return dispatchCommand(this, type, payload);\n  }\n\n  /**\n   * Gets a map of all decorators in the editor.\n   * @returns A mapping of call decorator keys to their decorated content\n   */\n  getDecorators() {\n    return this._decorators;\n  }\n\n  /**\n   *\n   * @returns the current root element of the editor. If you want to register\n   * an event listener, do it via {@link LexicalEditor.registerRootListener}, since\n   * this reference may not be stable.\n   */\n  getRootElement() {\n    return this._rootElement;\n  }\n\n  /**\n   * Gets the key of the editor\n   * @returns The editor key\n   */\n  getKey() {\n    return this._key;\n  }\n\n  /**\n   * Imperatively set the root contenteditable element that Lexical listens\n   * for events on.\n   */\n  setRootElement(nextRootElement) {\n    const prevRootElement = this._rootElement;\n    if (nextRootElement !== prevRootElement) {\n      const classNames = getCachedClassNameArray(this._config.theme, 'root');\n      const pendingEditorState = this._pendingEditorState || this._editorState;\n      this._rootElement = nextRootElement;\n      resetEditor(this, prevRootElement, nextRootElement, pendingEditorState);\n      if (prevRootElement !== null) {\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          removeRootElementEvents(prevRootElement);\n        }\n        if (classNames != null) {\n          prevRootElement.classList.remove(...classNames);\n        }\n      }\n      if (nextRootElement !== null) {\n        const windowObj = getDefaultView(nextRootElement);\n        const style = nextRootElement.style;\n        style.userSelect = 'text';\n        style.whiteSpace = 'pre-wrap';\n        style.wordBreak = 'break-word';\n        nextRootElement.setAttribute('data-lexical-editor', 'true');\n        this._window = windowObj;\n        this._dirtyType = FULL_RECONCILE;\n        initMutationObserver(this);\n        this._updateTags.add('history-merge');\n        commitPendingUpdates(this);\n\n        // TODO: remove this flag once we no longer use UEv2 internally\n        if (!this._config.disableEvents) {\n          addRootElementEvents(nextRootElement, this);\n        }\n        if (classNames != null) {\n          nextRootElement.classList.add(...classNames);\n        }\n      } else {\n        // If content editable is unmounted we'll reset editor state back to original\n        // (or pending) editor state since there will be no reconciliation\n        this._editorState = pendingEditorState;\n        this._pendingEditorState = null;\n        this._window = null;\n      }\n      triggerListeners('root', this, false, nextRootElement, prevRootElement);\n    }\n  }\n\n  /**\n   * Gets the underlying HTMLElement associated with the LexicalNode for the given key.\n   * @returns the HTMLElement rendered by the LexicalNode associated with the key.\n   * @param key - the key of the LexicalNode.\n   */\n  getElementByKey(key) {\n    return this._keyToDOMMap.get(key) || null;\n  }\n\n  /**\n   * Gets the active editor state.\n   * @returns The editor state\n   */\n  getEditorState() {\n    return this._editorState;\n  }\n\n  /**\n   * Imperatively set the EditorState. Triggers reconciliation like an update.\n   * @param editorState - the state to set the editor\n   * @param options - options for the update.\n   */\n  setEditorState(editorState, options) {\n    if (editorState.isEmpty()) {\n      {\n        throw Error(`setEditorState: the editor state is empty. Ensure the editor state's root node never becomes empty.`);\n      }\n    }\n    flushRootMutations(this);\n    const pendingEditorState = this._pendingEditorState;\n    const tags = this._updateTags;\n    const tag = options !== undefined ? options.tag : null;\n    if (pendingEditorState !== null && !pendingEditorState.isEmpty()) {\n      if (tag != null) {\n        tags.add(tag);\n      }\n      commitPendingUpdates(this);\n    }\n    this._pendingEditorState = editorState;\n    this._dirtyType = FULL_RECONCILE;\n    this._dirtyElements.set('root', false);\n    this._compositionKey = null;\n    if (tag != null) {\n      tags.add(tag);\n    }\n    commitPendingUpdates(this);\n  }\n\n  /**\n   * Parses a SerializedEditorState (usually produced by {@link EditorState.toJSON}) and returns\n   * and EditorState object that can be, for example, passed to {@link LexicalEditor.setEditorState}. Typically,\n   * deserliazation from JSON stored in a database uses this method.\n   * @param maybeStringifiedEditorState\n   * @param updateFn\n   * @returns\n   */\n  parseEditorState(maybeStringifiedEditorState, updateFn) {\n    const serializedEditorState = typeof maybeStringifiedEditorState === 'string' ? JSON.parse(maybeStringifiedEditorState) : maybeStringifiedEditorState;\n    return parseEditorState(serializedEditorState, this, updateFn);\n  }\n\n  /**\n   * Executes an update to the editor state. The updateFn callback is the ONLY place\n   * where Lexical editor state can be safely mutated.\n   * @param updateFn - A function that has access to writable editor state.\n   * @param options - A bag of options to control the behavior of the update.\n   * @param options.onUpdate - A function to run once the update is complete.\n   * Useful for synchronizing updates in some cases.\n   * @param options.skipTransforms - Setting this to true will suppress all node\n   * transforms for this update cycle.\n   * @param options.tag - A tag to identify this update, in an update listener, for instance.\n   * Some tags are reserved by the core and control update behavior in different ways.\n   * @param options.discrete - If true, prevents this update from being batched, forcing it to\n   * run synchronously.\n   */\n  update(updateFn, options) {\n    updateEditor(this, updateFn, options);\n  }\n\n  /**\n   * Focuses the editor\n   * @param callbackFn - A function to run after the editor is focused.\n   * @param options - A bag of options\n   * @param options.defaultSelection - Where to move selection when the editor is\n   * focused. Can be rootStart, rootEnd, or undefined. Defaults to rootEnd.\n   */\n  focus(callbackFn, options = {}) {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      // This ensures that iOS does not trigger caps lock upon focus\n      rootElement.setAttribute('autocapitalize', 'off');\n      updateEditor(this, () => {\n        const selection = $getSelection();\n        const root = $getRoot();\n        if (selection !== null) {\n          // Marking the selection dirty will force the selection back to it\n          selection.dirty = true;\n        } else if (root.getChildrenSize() !== 0) {\n          if (options.defaultSelection === 'rootStart') {\n            root.selectStart();\n          } else {\n            root.selectEnd();\n          }\n        }\n      }, {\n        onUpdate: () => {\n          rootElement.removeAttribute('autocapitalize');\n          if (callbackFn) {\n            callbackFn();\n          }\n        },\n        tag: 'focus'\n      });\n      // In the case where onUpdate doesn't fire (due to the focus update not\n      // occuring).\n      if (this._pendingEditorState === null) {\n        rootElement.removeAttribute('autocapitalize');\n      }\n    }\n  }\n\n  /**\n   * Removes focus from the editor.\n   */\n  blur() {\n    const rootElement = this._rootElement;\n    if (rootElement !== null) {\n      rootElement.blur();\n    }\n    const domSelection = getDOMSelection(this._window);\n    if (domSelection !== null) {\n      domSelection.removeAllRanges();\n    }\n  }\n  /**\n   * Returns true if the editor is editable, false otherwise.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  isEditable() {\n    return this._editable;\n  }\n  /**\n   * Sets the editable property of the editor. When false, the\n   * editor will not listen for user events on the underling contenteditable.\n   * @param editable - the value to set the editable mode to.\n   */\n  setEditable(editable) {\n    if (this._editable !== editable) {\n      this._editable = editable;\n      triggerListeners('editable', this, true, editable);\n    }\n  }\n  /**\n   * Returns a JSON-serializable javascript object NOT a JSON string.\n   * You still must call JSON.stringify (or something else) to turn the\n   * state into a string you can transfer over the wire and store in a database.\n   *\n   * See {@link LexicalNode.exportJSON}\n   *\n   * @returns A JSON-serializable javascript object\n   */\n  toJSON() {\n    return {\n      editorState: this._editorState.toJSON()\n    };\n  }\n}\n\nexports.$addUpdateTag = $addUpdateTag;\nexports.$applyNodeReplacement = $applyNodeReplacement;\nexports.$copyNode = $copyNode;\nexports.$createLineBreakNode = $createLineBreakNode;\nexports.$createNodeSelection = $createNodeSelection;\nexports.$createParagraphNode = $createParagraphNode;\nexports.$createPoint = $createPoint;\nexports.$createRangeSelection = $createRangeSelection;\nexports.$createTabNode = $createTabNode;\nexports.$createTextNode = $createTextNode;\nexports.$getAdjacentNode = $getAdjacentNode;\nexports.$getCharacterOffsets = $getCharacterOffsets;\nexports.$getEditor = $getEditor;\nexports.$getNearestNodeFromDOMNode = $getNearestNodeFromDOMNode;\nexports.$getNearestRootOrShadowRoot = $getNearestRootOrShadowRoot;\nexports.$getNodeByKey = $getNodeByKey;\nexports.$getPreviousSelection = $getPreviousSelection;\nexports.$getRoot = $getRoot;\nexports.$getSelection = $getSelection;\nexports.$getTextContent = $getTextContent;\nexports.$hasAncestor = $hasAncestor;\nexports.$hasUpdateTag = $hasUpdateTag;\nexports.$insertNodes = $insertNodes;\nexports.$isBlockElementNode = $isBlockElementNode;\nexports.$isDecoratorNode = $isDecoratorNode;\nexports.$isElementNode = $isElementNode;\nexports.$isInlineElementOrDecoratorNode = $isInlineElementOrDecoratorNode;\nexports.$isLeafNode = $isLeafNode;\nexports.$isLineBreakNode = $isLineBreakNode;\nexports.$isNodeSelection = $isNodeSelection;\nexports.$isParagraphNode = $isParagraphNode;\nexports.$isRangeSelection = $isRangeSelection;\nexports.$isRootNode = $isRootNode;\nexports.$isRootOrShadowRoot = $isRootOrShadowRoot;\nexports.$isTabNode = $isTabNode;\nexports.$isTextNode = $isTextNode;\nexports.$nodesOfType = $nodesOfType;\nexports.$normalizeSelection__EXPERIMENTAL = $normalizeSelection;\nexports.$parseSerializedNode = $parseSerializedNode;\nexports.$selectAll = $selectAll;\nexports.$setCompositionKey = $setCompositionKey;\nexports.$setSelection = $setSelection;\nexports.$splitNode = $splitNode;\nexports.BLUR_COMMAND = BLUR_COMMAND;\nexports.CAN_REDO_COMMAND = CAN_REDO_COMMAND;\nexports.CAN_UNDO_COMMAND = CAN_UNDO_COMMAND;\nexports.CLEAR_EDITOR_COMMAND = CLEAR_EDITOR_COMMAND;\nexports.CLEAR_HISTORY_COMMAND = CLEAR_HISTORY_COMMAND;\nexports.CLICK_COMMAND = CLICK_COMMAND;\nexports.COMMAND_PRIORITY_CRITICAL = COMMAND_PRIORITY_CRITICAL;\nexports.COMMAND_PRIORITY_EDITOR = COMMAND_PRIORITY_EDITOR;\nexports.COMMAND_PRIORITY_HIGH = COMMAND_PRIORITY_HIGH;\nexports.COMMAND_PRIORITY_LOW = COMMAND_PRIORITY_LOW;\nexports.COMMAND_PRIORITY_NORMAL = COMMAND_PRIORITY_NORMAL;\nexports.CONTROLLED_TEXT_INSERTION_COMMAND = CONTROLLED_TEXT_INSERTION_COMMAND;\nexports.COPY_COMMAND = COPY_COMMAND;\nexports.CUT_COMMAND = CUT_COMMAND;\nexports.DELETE_CHARACTER_COMMAND = DELETE_CHARACTER_COMMAND;\nexports.DELETE_LINE_COMMAND = DELETE_LINE_COMMAND;\nexports.DELETE_WORD_COMMAND = DELETE_WORD_COMMAND;\nexports.DRAGEND_COMMAND = DRAGEND_COMMAND;\nexports.DRAGOVER_COMMAND = DRAGOVER_COMMAND;\nexports.DRAGSTART_COMMAND = DRAGSTART_COMMAND;\nexports.DROP_COMMAND = DROP_COMMAND;\nexports.DecoratorNode = DecoratorNode;\nexports.ElementNode = ElementNode;\nexports.FOCUS_COMMAND = FOCUS_COMMAND;\nexports.FORMAT_ELEMENT_COMMAND = FORMAT_ELEMENT_COMMAND;\nexports.FORMAT_TEXT_COMMAND = FORMAT_TEXT_COMMAND;\nexports.INDENT_CONTENT_COMMAND = INDENT_CONTENT_COMMAND;\nexports.INSERT_LINE_BREAK_COMMAND = INSERT_LINE_BREAK_COMMAND;\nexports.INSERT_PARAGRAPH_COMMAND = INSERT_PARAGRAPH_COMMAND;\nexports.INSERT_TAB_COMMAND = INSERT_TAB_COMMAND;\nexports.KEY_ARROW_DOWN_COMMAND = KEY_ARROW_DOWN_COMMAND;\nexports.KEY_ARROW_LEFT_COMMAND = KEY_ARROW_LEFT_COMMAND;\nexports.KEY_ARROW_RIGHT_COMMAND = KEY_ARROW_RIGHT_COMMAND;\nexports.KEY_ARROW_UP_COMMAND = KEY_ARROW_UP_COMMAND;\nexports.KEY_BACKSPACE_COMMAND = KEY_BACKSPACE_COMMAND;\nexports.KEY_DELETE_COMMAND = KEY_DELETE_COMMAND;\nexports.KEY_DOWN_COMMAND = KEY_DOWN_COMMAND;\nexports.KEY_ENTER_COMMAND = KEY_ENTER_COMMAND;\nexports.KEY_ESCAPE_COMMAND = KEY_ESCAPE_COMMAND;\nexports.KEY_MODIFIER_COMMAND = KEY_MODIFIER_COMMAND;\nexports.KEY_SPACE_COMMAND = KEY_SPACE_COMMAND;\nexports.KEY_TAB_COMMAND = KEY_TAB_COMMAND;\nexports.LineBreakNode = LineBreakNode;\nexports.MOVE_TO_END = MOVE_TO_END;\nexports.MOVE_TO_START = MOVE_TO_START;\nexports.OUTDENT_CONTENT_COMMAND = OUTDENT_CONTENT_COMMAND;\nexports.PASTE_COMMAND = PASTE_COMMAND;\nexports.ParagraphNode = ParagraphNode;\nexports.REDO_COMMAND = REDO_COMMAND;\nexports.REMOVE_TEXT_COMMAND = REMOVE_TEXT_COMMAND;\nexports.RootNode = RootNode;\nexports.SELECTION_CHANGE_COMMAND = SELECTION_CHANGE_COMMAND;\nexports.SELECTION_INSERT_CLIPBOARD_NODES_COMMAND = SELECTION_INSERT_CLIPBOARD_NODES_COMMAND;\nexports.SELECT_ALL_COMMAND = SELECT_ALL_COMMAND;\nexports.TabNode = TabNode;\nexports.TextNode = TextNode;\nexports.UNDO_COMMAND = UNDO_COMMAND;\nexports.createCommand = createCommand;\nexports.createEditor = createEditor;\nexports.getNearestEditorFromDOMNode = getNearestEditorFromDOMNode;\nexports.isCurrentlyReadOnlyMode = isCurrentlyReadOnlyMode;\nexports.isHTMLAnchorElement = isHTMLAnchorElement;\nexports.isHTMLElement = isHTMLElement;\nexports.isSelectionCapturedInDecoratorInput = isSelectionCapturedInDecoratorInput;\nexports.isSelectionWithinEditor = isSelectionWithinEditor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}