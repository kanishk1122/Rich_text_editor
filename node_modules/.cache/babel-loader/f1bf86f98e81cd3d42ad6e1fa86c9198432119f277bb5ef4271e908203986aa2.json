{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PIXEL_VALUE_REG_EXP = /^(\\d+(?:\\.\\d+)?)px$/;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst TableCellHeaderStates = {\n  BOTH: 3,\n  COLUMN: 2,\n  NO_STATUS: 0,\n  ROW: 1\n};\n/** @noInheritDoc */\nclass TableCellNode extends lexical.ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'tablecell';\n  }\n  static clone(node) {\n    const cellNode = new TableCellNode(node.__headerState, node.__colSpan, node.__width, node.__key);\n    cellNode.__rowSpan = node.__rowSpan;\n    cellNode.__backgroundColor = node.__backgroundColor;\n    return cellNode;\n  }\n  static importDOM() {\n    return {\n      td: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      }),\n      th: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const colSpan = serializedNode.colSpan || 1;\n    const rowSpan = serializedNode.rowSpan || 1;\n    const cellNode = $createTableCellNode(serializedNode.headerState, colSpan, serializedNode.width || undefined);\n    cellNode.__rowSpan = rowSpan;\n    cellNode.__backgroundColor = serializedNode.backgroundColor || null;\n    return cellNode;\n  }\n  constructor() {\n    let headerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TableCellHeaderStates.NO_STATUS;\n    let colSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let width = arguments.length > 2 ? arguments[2] : undefined;\n    let key = arguments.length > 3 ? arguments[3] : undefined;\n    super(key);\n    this.__colSpan = colSpan;\n    this.__rowSpan = 1;\n    this.__headerState = headerState;\n    this.__width = width;\n    this.__backgroundColor = null;\n  }\n  createDOM(config) {\n    const element = document.createElement(this.getTag());\n    if (this.__width) {\n      element.style.width = `${this.__width}px`;\n    }\n    if (this.__colSpan > 1) {\n      element.colSpan = this.__colSpan;\n    }\n    if (this.__rowSpan > 1) {\n      element.rowSpan = this.__rowSpan;\n    }\n    if (this.__backgroundColor !== null) {\n      element.style.backgroundColor = this.__backgroundColor;\n    }\n    utils.addClassNamesToElement(element, config.theme.tableCell, this.hasHeader() && config.theme.tableCellHeader);\n    return element;\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element) {\n      const element_ = element;\n      const maxWidth = 700;\n      const colCount = this.getParentOrThrow().getChildrenSize();\n      element_.style.border = '1px solid black';\n      if (this.__colSpan > 1) {\n        element_.colSpan = this.__colSpan;\n      }\n      if (this.__rowSpan > 1) {\n        element_.rowSpan = this.__rowSpan;\n      }\n      element_.style.width = `${this.getWidth() || Math.max(90, maxWidth / colCount)}px`;\n      element_.style.verticalAlign = 'top';\n      element_.style.textAlign = 'start';\n      const backgroundColor = this.getBackgroundColor();\n      if (backgroundColor !== null) {\n        element_.style.backgroundColor = backgroundColor;\n      } else if (this.hasHeader()) {\n        element_.style.backgroundColor = '#f2f3f5';\n      }\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      backgroundColor: this.getBackgroundColor(),\n      colSpan: this.__colSpan,\n      headerState: this.__headerState,\n      rowSpan: this.__rowSpan,\n      type: 'tablecell',\n      width: this.getWidth()\n    };\n  }\n  getColSpan() {\n    return this.__colSpan;\n  }\n  setColSpan(colSpan) {\n    this.getWritable().__colSpan = colSpan;\n    return this;\n  }\n  getRowSpan() {\n    return this.__rowSpan;\n  }\n  setRowSpan(rowSpan) {\n    this.getWritable().__rowSpan = rowSpan;\n    return this;\n  }\n  getTag() {\n    return this.hasHeader() ? 'th' : 'td';\n  }\n  setHeaderStyles(headerState) {\n    const self = this.getWritable();\n    self.__headerState = headerState;\n    return this.__headerState;\n  }\n  getHeaderStyles() {\n    return this.getLatest().__headerState;\n  }\n  setWidth(width) {\n    const self = this.getWritable();\n    self.__width = width;\n    return this.__width;\n  }\n  getWidth() {\n    return this.getLatest().__width;\n  }\n  getBackgroundColor() {\n    return this.getLatest().__backgroundColor;\n  }\n  setBackgroundColor(newBackgroundColor) {\n    this.getWritable().__backgroundColor = newBackgroundColor;\n  }\n  toggleHeaderStyle(headerStateToToggle) {\n    const self = this.getWritable();\n    if ((self.__headerState & headerStateToToggle) === headerStateToToggle) {\n      self.__headerState -= headerStateToToggle;\n    } else {\n      self.__headerState += headerStateToToggle;\n    }\n    return self;\n  }\n  hasHeaderState(headerState) {\n    return (this.getHeaderStyles() & headerState) === headerState;\n  }\n  hasHeader() {\n    return this.getLatest().__headerState !== TableCellHeaderStates.NO_STATUS;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__headerState !== this.__headerState || prevNode.__width !== this.__width || prevNode.__colSpan !== this.__colSpan || prevNode.__rowSpan !== this.__rowSpan || prevNode.__backgroundColor !== this.__backgroundColor;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  collapseAtStart() {\n    return true;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction convertTableCellNodeElement(domNode) {\n  const domNode_ = domNode;\n  const nodeName = domNode.nodeName.toLowerCase();\n  let width = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.width)) {\n    width = parseFloat(domNode_.style.width);\n  }\n  const tableCellNode = $createTableCellNode(nodeName === 'th' ? TableCellHeaderStates.ROW : TableCellHeaderStates.NO_STATUS, domNode_.colSpan, width);\n  tableCellNode.__rowSpan = domNode_.rowSpan;\n  const backgroundColor = domNode_.style.backgroundColor;\n  if (backgroundColor !== '') {\n    tableCellNode.__backgroundColor = backgroundColor;\n  }\n  return {\n    forChild: (lexicalNode, parentLexicalNode) => {\n      if ($isTableCellNode(parentLexicalNode) && !lexical.$isElementNode(lexicalNode)) {\n        const paragraphNode = lexical.$createParagraphNode();\n        if (lexical.$isLineBreakNode(lexicalNode) && lexicalNode.getTextContent() === '\\n') {\n          return null;\n        }\n        paragraphNode.append(lexicalNode);\n        return paragraphNode;\n      }\n      return lexicalNode;\n    },\n    node: tableCellNode\n  };\n}\nfunction $createTableCellNode(headerState) {\n  let colSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let width = arguments.length > 2 ? arguments[2] : undefined;\n  return lexical.$applyNodeReplacement(new TableCellNode(headerState, colSpan, width));\n}\nfunction $isTableCellNode(node) {\n  return node instanceof TableCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst INSERT_TABLE_COMMAND = lexical.createCommand('INSERT_TABLE_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TableRowNode extends lexical.ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'tablerow';\n  }\n  static clone(node) {\n    return new TableRowNode(node.__height, node.__key);\n  }\n  static importDOM() {\n    return {\n      tr: node => ({\n        conversion: convertTableRowElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createTableRowNode(serializedNode.height);\n  }\n  constructor(height, key) {\n    super(key);\n    this.__height = height;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tablerow',\n      version: 1\n    };\n  }\n  createDOM(config) {\n    const element = document.createElement('tr');\n    if (this.__height) {\n      element.style.height = `${this.__height}px`;\n    }\n    utils.addClassNamesToElement(element, config.theme.tableRow);\n    return element;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  setHeight(height) {\n    const self = this.getWritable();\n    self.__height = height;\n    return this.__height;\n  }\n  getHeight() {\n    return this.getLatest().__height;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__height !== this.__height;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction convertTableRowElement(domNode) {\n  const domNode_ = domNode;\n  let height = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.height)) {\n    height = parseFloat(domNode_.style.height);\n  }\n  return {\n    node: $createTableRowNode(height)\n  };\n}\nfunction $createTableRowNode(height) {\n  return lexical.$applyNodeReplacement(new TableRowNode(height));\n}\nfunction $isTableRowNode(node) {\n  return node instanceof TableRowNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $createTableNodeWithDimensions(rowCount, columnCount) {\n  let includeHeaders = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const tableNode = $createTableNode();\n  for (let iRow = 0; iRow < rowCount; iRow++) {\n    const tableRowNode = $createTableRowNode();\n    for (let iColumn = 0; iColumn < columnCount; iColumn++) {\n      let headerState = TableCellHeaderStates.NO_STATUS;\n      if (typeof includeHeaders === 'object') {\n        if (iRow === 0 && includeHeaders.rows) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0 && includeHeaders.columns) headerState |= TableCellHeaderStates.COLUMN;\n      } else if (includeHeaders) {\n        if (iRow === 0) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0) headerState |= TableCellHeaderStates.COLUMN;\n      }\n      const tableCellNode = $createTableCellNode(headerState);\n      const paragraphNode = lexical.$createParagraphNode();\n      paragraphNode.append(lexical.$createTextNode());\n      tableCellNode.append(paragraphNode);\n      tableRowNode.append(tableCellNode);\n    }\n    tableNode.append(tableRowNode);\n  }\n  return tableNode;\n}\nfunction $getTableCellNodeFromLexicalNode(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableCellNode(n));\n  if ($isTableCellNode(node)) {\n    return node;\n  }\n  return null;\n}\nfunction $getTableRowNodeFromTableCellNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableRowNode(n));\n  if ($isTableRowNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table row.');\n}\nfunction $getTableNodeFromLexicalNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableNode(n));\n  if ($isTableNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table.');\n}\nfunction $getTableRowIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableRowNode);\n  return tableNode.getChildren().findIndex(n => n.is(tableRowNode));\n}\nfunction $getTableColumnIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  return tableRowNode.getChildren().findIndex(n => n.is(tableCellNode));\n}\nfunction $getTableCellSiblingsFromTableCellNode(tableCellNode, table) {\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n  const {\n    x,\n    y\n  } = tableNode.getCordsFromCellNode(tableCellNode, table);\n  return {\n    above: tableNode.getCellNodeFromCords(x, y - 1, table),\n    below: tableNode.getCellNodeFromCords(x, y + 1, table),\n    left: tableNode.getCellNodeFromCords(x - 1, y, table),\n    right: tableNode.getCellNodeFromCords(x + 1, y, table)\n  };\n}\nfunction $removeTableRowAtIndex(tableNode, indexToDelete) {\n  const tableRows = tableNode.getChildren();\n  if (indexToDelete >= tableRows.length || indexToDelete < 0) {\n    throw new Error('Expected table cell to be inside of table row.');\n  }\n  const targetRowNode = tableRows[indexToDelete];\n  targetRowNode.remove();\n  return tableNode;\n}\nfunction $insertTableRow(tableNode, targetIndex) {\n  let shouldInsertAfter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let rowCount = arguments.length > 3 ? arguments[3] : undefined;\n  let table = arguments.length > 4 ? arguments[4] : undefined;\n  const tableRows = tableNode.getChildren();\n  if (targetIndex >= tableRows.length || targetIndex < 0) {\n    throw new Error('Table row target index out of range');\n  }\n  const targetRowNode = tableRows[targetIndex];\n  if ($isTableRowNode(targetRowNode)) {\n    for (let r = 0; r < rowCount; r++) {\n      const tableRowCells = targetRowNode.getChildren();\n      const tableColumnCount = tableRowCells.length;\n      const newTableRowNode = $createTableRowNode();\n      for (let c = 0; c < tableColumnCount; c++) {\n        const tableCellFromTargetRow = tableRowCells[c];\n        if (!$isTableCellNode(tableCellFromTargetRow)) {\n          throw Error(`Expected table cell`);\n        }\n        const {\n          above,\n          below\n        } = $getTableCellSiblingsFromTableCellNode(tableCellFromTargetRow, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        const width = above && above.getWidth() || below && below.getWidth() || undefined;\n        if (above && above.hasHeaderState(TableCellHeaderStates.COLUMN) || below && below.hasHeaderState(TableCellHeaderStates.COLUMN)) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n        const tableCellNode = $createTableCellNode(headerState, 1, width);\n        tableCellNode.append(lexical.$createParagraphNode());\n        newTableRowNode.append(tableCellNode);\n      }\n      if (shouldInsertAfter) {\n        targetRowNode.insertAfter(newTableRowNode);\n      } else {\n        targetRowNode.insertBefore(newTableRowNode);\n      }\n    }\n  } else {\n    throw new Error('Row before insertion index does not exist.');\n  }\n  return tableNode;\n}\nconst getHeaderState = (currentState, possibleState) => {\n  if (currentState === TableCellHeaderStates.BOTH || currentState === possibleState) {\n    return possibleState;\n  }\n  return TableCellHeaderStates.NO_STATUS;\n};\nfunction $insertTableRow__EXPERIMENTAL() {\n  let insertAfter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const focus = selection.focus.getNode();\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [gridMap, focusCellMap] = $computeTableMap(grid, focusCell, focusCell);\n  const columnCount = gridMap[0].length;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  if (insertAfter) {\n    const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n    const focusEndRowMap = gridMap[focusEndRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusEndRowMap[i];\n      if (startRow + cell.__rowSpan - 1 <= focusEndRow) {\n        const currentCell = focusEndRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append(lexical.$createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const focusEndRowNode = grid.getChildAtIndex(focusEndRow);\n    if (!$isTableRowNode(focusEndRowNode)) {\n      throw Error(`focusEndRow is not a TableRowNode`);\n    }\n    focusEndRowNode.insertAfter(newRow);\n  } else {\n    const focusStartRowMap = gridMap[focusStartRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusStartRowMap[i];\n      if (startRow === focusStartRow) {\n        const currentCell = focusStartRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append(lexical.$createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const focusStartRowNode = grid.getChildAtIndex(focusStartRow);\n    if (!$isTableRowNode(focusStartRowNode)) {\n      throw Error(`focusEndRow is not a TableRowNode`);\n    }\n    focusStartRowNode.insertBefore(newRow);\n  }\n}\nfunction $insertTableColumn(tableNode, targetIndex) {\n  let shouldInsertAfter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let columnCount = arguments.length > 3 ? arguments[3] : undefined;\n  let table = arguments.length > 4 ? arguments[4] : undefined;\n  const tableRows = tableNode.getChildren();\n  const tableCellsToBeInserted = [];\n  for (let r = 0; r < tableRows.length; r++) {\n    const currentTableRowNode = tableRows[r];\n    if ($isTableRowNode(currentTableRowNode)) {\n      for (let c = 0; c < columnCount; c++) {\n        const tableRowChildren = currentTableRowNode.getChildren();\n        if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n          throw new Error('Table column target index out of range');\n        }\n        const targetCell = tableRowChildren[targetIndex];\n        if (!$isTableCellNode(targetCell)) {\n          throw Error(`Expected table cell`);\n        }\n        const {\n          left,\n          right\n        } = $getTableCellSiblingsFromTableCellNode(targetCell, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        if (left && left.hasHeaderState(TableCellHeaderStates.ROW) || right && right.hasHeaderState(TableCellHeaderStates.ROW)) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n        const newTableCell = $createTableCellNode(headerState);\n        newTableCell.append(lexical.$createParagraphNode());\n        tableCellsToBeInserted.push({\n          newTableCell,\n          targetCell\n        });\n      }\n    }\n  }\n  tableCellsToBeInserted.forEach(_ref => {\n    let {\n      newTableCell,\n      targetCell\n    } = _ref;\n    if (shouldInsertAfter) {\n      targetCell.insertAfter(newTableCell);\n    } else {\n      targetCell.insertBefore(newTableCell);\n    }\n  });\n  return tableNode;\n}\nfunction $insertTableColumn__EXPERIMENTAL() {\n  let insertAfter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell] = $getNodeTriplet(anchor);\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [gridMap, focusCellMap, anchorCellMap] = $computeTableMap(grid, focusCell, anchorCell);\n  const rowCount = gridMap.length;\n  const startColumn = insertAfter ? Math.max(focusCellMap.startColumn, anchorCellMap.startColumn) : Math.min(focusCellMap.startColumn, anchorCellMap.startColumn);\n  const insertAfterColumn = insertAfter ? startColumn + focusCell.__colSpan - 1 : startColumn - 1;\n  const gridFirstChild = grid.getFirstChild();\n  if (!$isTableRowNode(gridFirstChild)) {\n    throw Error(`Expected firstTable child to be a row`);\n  }\n  let firstInsertedCell = null;\n  function $createTableCellNodeForInsertTableColumn() {\n    let headerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : TableCellHeaderStates.NO_STATUS;\n    const cell = $createTableCellNode(headerState).append(lexical.$createParagraphNode());\n    if (firstInsertedCell === null) {\n      firstInsertedCell = cell;\n    }\n    return cell;\n  }\n  let loopRow = gridFirstChild;\n  rowLoop: for (let i = 0; i < rowCount; i++) {\n    if (i !== 0) {\n      const currentRow = loopRow.getNextSibling();\n      if (!$isTableRowNode(currentRow)) {\n        throw Error(`Expected row nextSibling to be a row`);\n      }\n      loopRow = currentRow;\n    }\n    const rowMap = gridMap[i];\n    const currentCellHeaderState = rowMap[insertAfterColumn < 0 ? 0 : insertAfterColumn].cell.__headerState;\n    const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.ROW);\n    if (insertAfterColumn < 0) {\n      $insertFirst(loopRow, $createTableCellNodeForInsertTableColumn(headerState));\n      continue;\n    }\n    const {\n      cell: currentCell,\n      startColumn: currentStartColumn,\n      startRow: currentStartRow\n    } = rowMap[insertAfterColumn];\n    if (currentStartColumn + currentCell.__colSpan - 1 <= insertAfterColumn) {\n      let insertAfterCell = currentCell;\n      let insertAfterCellRowStart = currentStartRow;\n      let prevCellIndex = insertAfterColumn;\n      while (insertAfterCellRowStart !== i && insertAfterCell.__rowSpan > 1) {\n        prevCellIndex -= currentCell.__colSpan;\n        if (prevCellIndex >= 0) {\n          const {\n            cell: cell_,\n            startRow: startRow_\n          } = rowMap[prevCellIndex];\n          insertAfterCell = cell_;\n          insertAfterCellRowStart = startRow_;\n        } else {\n          loopRow.append($createTableCellNodeForInsertTableColumn(headerState));\n          continue rowLoop;\n        }\n      }\n      insertAfterCell.insertAfter($createTableCellNodeForInsertTableColumn(headerState));\n    } else {\n      currentCell.setColSpan(currentCell.__colSpan + 1);\n    }\n  }\n  if (firstInsertedCell !== null) {\n    $moveSelectionToCell(firstInsertedCell);\n  }\n}\nfunction $deleteTableColumn(tableNode, targetIndex) {\n  const tableRows = tableNode.getChildren();\n  for (let i = 0; i < tableRows.length; i++) {\n    const currentTableRowNode = tableRows[i];\n    if ($isTableRowNode(currentTableRowNode)) {\n      const tableRowChildren = currentTableRowNode.getChildren();\n      if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n        throw new Error('Table column target index out of range');\n      }\n      tableRowChildren[targetIndex].remove();\n    }\n  }\n  return tableNode;\n}\nfunction $deleteTableRow__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startRow: anchorStartRow\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n  if (gridMap.length === focusEndRow - anchorStartRow + 1) {\n    // Empty grid\n    grid.remove();\n    return;\n  }\n  const columnCount = gridMap[0].length;\n  const nextRow = gridMap[focusEndRow + 1];\n  const nextRowNode = grid.getChildAtIndex(focusEndRow + 1);\n  for (let row = focusEndRow; row >= anchorStartRow; row--) {\n    for (let column = columnCount - 1; column >= 0; column--) {\n      const {\n        cell,\n        startRow: cellStartRow,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn !== column) {\n        // Don't repeat work for the same Cell\n        continue;\n      }\n      // Rows overflowing top have to be trimmed\n      if (row === anchorStartRow && cellStartRow < anchorStartRow) {\n        cell.setRowSpan(cell.__rowSpan - (cellStartRow - anchorStartRow));\n      }\n      // Rows overflowing bottom have to be trimmed and moved to the next row\n      if (cellStartRow >= anchorStartRow && cellStartRow + cell.__rowSpan - 1 > focusEndRow) {\n        cell.setRowSpan(cell.__rowSpan - (focusEndRow - cellStartRow + 1));\n        if (!(nextRowNode !== null)) {\n          throw Error(`Expected nextRowNode not to be null`);\n        }\n        if (column === 0) {\n          $insertFirst(nextRowNode, cell);\n        } else {\n          const {\n            cell: previousCell\n          } = nextRow[column - 1];\n          previousCell.insertAfter(cell);\n        }\n      }\n    }\n    const rowNode = grid.getChildAtIndex(row);\n    if (!$isTableRowNode(rowNode)) {\n      throw Error(`Expected GridNode childAtIndex(${String(row)}) to be RowNode`);\n    }\n    rowNode.remove();\n  }\n  if (nextRow !== undefined) {\n    const {\n      cell\n    } = nextRow[0];\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = gridMap[anchorStartRow - 1];\n    const {\n      cell\n    } = previousRow[0];\n    $moveSelectionToCell(cell);\n  }\n}\nfunction $deleteTableColumn__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startColumn: anchorStartColumn\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow,\n    startColumn: focusStartColumn\n  } = focusCellMap;\n  const startColumn = Math.min(anchorStartColumn, focusStartColumn);\n  const endColumn = Math.max(anchorStartColumn + anchorCell.__colSpan - 1, focusStartColumn + focusCell.__colSpan - 1);\n  const selectedColumnCount = endColumn - startColumn + 1;\n  const columnCount = gridMap[0].length;\n  if (columnCount === endColumn - startColumn + 1) {\n    // Empty grid\n    grid.selectPrevious();\n    grid.remove();\n    return;\n  }\n  const rowCount = gridMap.length;\n  for (let row = 0; row < rowCount; row++) {\n    for (let column = startColumn; column <= endColumn; column++) {\n      const {\n        cell,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn < startColumn) {\n        if (column === startColumn) {\n          const overflowLeft = startColumn - cellStartColumn;\n          // Overflowing left\n          cell.setColSpan(cell.__colSpan -\n          // Possible overflow right too\n          Math.min(selectedColumnCount, cell.__colSpan - overflowLeft));\n        }\n      } else if (cellStartColumn + cell.__colSpan - 1 > endColumn) {\n        if (column === endColumn) {\n          // Overflowing right\n          const inSelectedArea = endColumn - cellStartColumn + 1;\n          cell.setColSpan(cell.__colSpan - inSelectedArea);\n        }\n      } else {\n        cell.remove();\n      }\n    }\n  }\n  const focusRowMap = gridMap[focusStartRow];\n  const nextColumn = focusRowMap[focusStartColumn + focusCell.__colSpan];\n  if (nextColumn !== undefined) {\n    const {\n      cell\n    } = nextColumn;\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = focusRowMap[focusStartColumn - 1];\n    const {\n      cell\n    } = previousRow;\n    $moveSelectionToCell(cell);\n  }\n}\nfunction $moveSelectionToCell(cell) {\n  const firstDescendant = cell.getFirstDescendant();\n  if (firstDescendant == null) {\n    cell.selectStart();\n  } else {\n    firstDescendant.getParentOrThrow().selectStart();\n  }\n}\nfunction $insertFirst(parent, node) {\n  const firstChild = parent.getFirstChild();\n  if (firstChild !== null) {\n    firstChild.insertBefore(node);\n  } else {\n    parent.append(node);\n  }\n}\nfunction $unmergeCell() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const [cell, row, grid] = $getNodeTriplet(anchor);\n  const colSpan = cell.__colSpan;\n  const rowSpan = cell.__rowSpan;\n  if (colSpan > 1) {\n    for (let i = 1; i < colSpan; i++) {\n      cell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n    }\n    cell.setColSpan(1);\n  }\n  if (rowSpan > 1) {\n    const [map, cellMap] = $computeTableMap(grid, cell, cell);\n    const {\n      startColumn,\n      startRow\n    } = cellMap;\n    let currentRowNode;\n    for (let i = 1; i < rowSpan; i++) {\n      const currentRow = startRow + i;\n      const currentRowMap = map[currentRow];\n      currentRowNode = (currentRowNode || row).getNextSibling();\n      if (!$isTableRowNode(currentRowNode)) {\n        throw Error(`Expected row next sibling to be a row`);\n      }\n      let insertAfterCell = null;\n      for (let column = 0; column < startColumn; column++) {\n        const currentCellMap = currentRowMap[column];\n        const currentCell = currentCellMap.cell;\n        if (currentCellMap.startRow === currentRow) {\n          insertAfterCell = currentCell;\n        }\n        if (currentCell.__colSpan > 1) {\n          column += currentCell.__colSpan - 1;\n        }\n      }\n      if (insertAfterCell === null) {\n        for (let j = 0; j < colSpan; j++) {\n          $insertFirst(currentRowNode, $createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      } else {\n        for (let j = 0; j < colSpan; j++) {\n          insertAfterCell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      }\n    }\n    cell.setRowSpan(1);\n  }\n}\nfunction $computeTableMap(grid, cellA, cellB) {\n  const tableMap = [];\n  let cellAValue = null;\n  let cellBValue = null;\n  function write(startRow, startColumn, cell) {\n    const value = {\n      cell,\n      startColumn,\n      startRow\n    };\n    const rowSpan = cell.__rowSpan;\n    const colSpan = cell.__colSpan;\n    for (let i = 0; i < rowSpan; i++) {\n      if (tableMap[startRow + i] === undefined) {\n        tableMap[startRow + i] = [];\n      }\n      for (let j = 0; j < colSpan; j++) {\n        tableMap[startRow + i][startColumn + j] = value;\n      }\n    }\n    if (cellA.is(cell)) {\n      cellAValue = value;\n    }\n    if (cellB.is(cell)) {\n      cellBValue = value;\n    }\n  }\n  function isEmpty(row, column) {\n    return tableMap[row] === undefined || tableMap[row][column] === undefined;\n  }\n  const gridChildren = grid.getChildren();\n  for (let i = 0; i < gridChildren.length; i++) {\n    const row = gridChildren[i];\n    if (!$isTableRowNode(row)) {\n      throw Error(`Expected GridNode children to be TableRowNode`);\n    }\n    const rowChildren = row.getChildren();\n    let j = 0;\n    for (const cell of rowChildren) {\n      if (!$isTableCellNode(cell)) {\n        throw Error(`Expected TableRowNode children to be TableCellNode`);\n      }\n      while (!isEmpty(i, j)) {\n        j++;\n      }\n      write(i, j, cell);\n      j += cell.__colSpan;\n    }\n  }\n  if (!(cellAValue !== null)) {\n    throw Error(`Anchor not found in Grid`);\n  }\n  if (!(cellBValue !== null)) {\n    throw Error(`Focus not found in Grid`);\n  }\n  return [tableMap, cellAValue, cellBValue];\n}\nfunction $getNodeTriplet(source) {\n  let cell;\n  if (source instanceof TableCellNode) {\n    cell = source;\n  } else if ('__type' in source) {\n    const cell_ = utils.$findMatchingParent(source, $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      throw Error(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  } else {\n    const cell_ = utils.$findMatchingParent(source.getNode(), $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      throw Error(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  }\n  const row = cell.getParent();\n  if (!$isTableRowNode(row)) {\n    throw Error(`Expected TableCellNode to have a parent TableRowNode`);\n  }\n  const grid = row.getParent();\n  if (!$isTableNode(grid)) {\n    throw Error(`Expected TableRowNode to have a parent GridNode`);\n  }\n  return [cell, row, grid];\n}\nfunction $getTableCellNodeRect(tableCellNode) {\n  const [cellNode,, gridNode] = $getNodeTriplet(tableCellNode);\n  const rows = gridNode.getChildren();\n  const rowCount = rows.length;\n  const columnCount = rows[0].getChildren().length;\n\n  // Create a matrix of the same size as the table to track the position of each cell\n  const cellMatrix = new Array(rowCount);\n  for (let i = 0; i < rowCount; i++) {\n    cellMatrix[i] = new Array(columnCount);\n  }\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    const row = rows[rowIndex];\n    const cells = row.getChildren();\n    let columnIndex = 0;\n    for (let cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n      // Find the next available position in the matrix, skip the position of merged cells\n      while (cellMatrix[rowIndex][columnIndex]) {\n        columnIndex++;\n      }\n      const cell = cells[cellIndex];\n      const rowSpan = cell.__rowSpan || 1;\n      const colSpan = cell.__colSpan || 1;\n\n      // Put the cell into the corresponding position in the matrix\n      for (let i = 0; i < rowSpan; i++) {\n        for (let j = 0; j < colSpan; j++) {\n          cellMatrix[rowIndex + i][columnIndex + j] = cell;\n        }\n      }\n\n      // Return to the original index, row span and column span of the cell.\n      if (cellNode === cell) {\n        return {\n          colSpan,\n          columnIndex,\n          rowIndex,\n          rowSpan\n        };\n      }\n      columnIndex += colSpan;\n    }\n  }\n  return null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass TableSelection {\n  constructor(tableKey, anchor, focus) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.dirty = false;\n    this.tableKey = tableKey;\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isTableSelection(selection)) {\n      return false;\n    }\n    return this.tableKey === selection.tableKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n  set(tableKey, anchorCellKey, focusCellKey) {\n    this.dirty = true;\n    this.tableKey = tableKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n  clone() {\n    return new TableSelection(this.tableKey, this.anchor, this.focus);\n  }\n  isCollapsed() {\n    return false;\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const focusNode = this.focus.getNode();\n    if (!lexical.$isElementNode(focusNode)) {\n      throw Error(`Expected TableSelection focus to be an ElementNode`);\n    }\n    const selection = lexical.$normalizeSelection__EXPERIMENTAL(focusNode.select(0, focusNode.getChildrenSize()));\n    selection.insertNodes(nodes);\n  }\n\n  // TODO Deprecate this method. It's confusing when used with colspan|rowspan\n  getShape() {\n    const anchorCellNode = lexical.$getNodeByKey(this.anchor.key);\n    if (!$isTableCellNode(anchorCellNode)) {\n      throw Error(`Expected TableSelection anchor to be (or a child of) TableCellNode`);\n    }\n    const anchorCellNodeRect = $getTableCellNodeRect(anchorCellNode);\n    if (!(anchorCellNodeRect !== null)) {\n      throw Error(`getCellRect: expected to find AnchorNode`);\n    }\n    const focusCellNode = lexical.$getNodeByKey(this.focus.key);\n    if (!$isTableCellNode(focusCellNode)) {\n      throw Error(`Expected TableSelection focus to be (or a child of) TableCellNode`);\n    }\n    const focusCellNodeRect = $getTableCellNodeRect(focusCellNode);\n    if (!(focusCellNodeRect !== null)) {\n      throw Error(`getCellRect: expected to find focusCellNode`);\n    }\n    const startX = Math.min(anchorCellNodeRect.columnIndex, focusCellNodeRect.columnIndex);\n    const stopX = Math.max(anchorCellNodeRect.columnIndex, focusCellNodeRect.columnIndex);\n    const startY = Math.min(anchorCellNodeRect.rowIndex, focusCellNodeRect.rowIndex);\n    const stopY = Math.max(anchorCellNodeRect.rowIndex, focusCellNodeRect.rowIndex);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchorNode = this.anchor.getNode();\n    const focusNode = this.focus.getNode();\n    const anchorCell = utils.$findMatchingParent(anchorNode, $isTableCellNode);\n    // todo replace with triplet\n    const focusCell = utils.$findMatchingParent(focusNode, $isTableCellNode);\n    if (!$isTableCellNode(anchorCell)) {\n      throw Error(`Expected TableSelection anchor to be (or a child of) TableCellNode`);\n    }\n    if (!$isTableCellNode(focusCell)) {\n      throw Error(`Expected TableSelection focus to be (or a child of) TableCellNode`);\n    }\n    const anchorRow = anchorCell.getParent();\n    if (!$isTableRowNode(anchorRow)) {\n      throw Error(`Expected anchorCell to have a parent TableRowNode`);\n    }\n    const tableNode = anchorRow.getParent();\n    if (!$isTableNode(tableNode)) {\n      throw Error(`Expected tableNode to have a parent TableNode`);\n    }\n    const focusCellGrid = focusCell.getParents()[1];\n    if (focusCellGrid !== tableNode) {\n      if (!tableNode.isParentOf(focusCell)) {\n        // focus is on higher Grid level than anchor\n        const gridParent = tableNode.getParent();\n        if (!(gridParent != null)) {\n          throw Error(`Expected gridParent to have a parent`);\n        }\n        this.set(this.tableKey, gridParent.getKey(), focusCell.getKey());\n      } else {\n        // anchor is on higher Grid level than focus\n        const focusCellParent = focusCellGrid.getParent();\n        if (!(focusCellParent != null)) {\n          throw Error(`Expected focusCellParent to have a parent`);\n        }\n        this.set(this.tableKey, focusCell.getKey(), focusCellParent.getKey());\n      }\n      return this.getNodes();\n    }\n\n    // TODO Mapping the whole Grid every time not efficient. We need to compute the entire state only\n    // once (on load) and iterate on it as updates occur. However, to do this we need to have the\n    // ability to store a state. Killing TableSelection and moving the logic to the plugin would make\n    // this possible.\n    const [map, cellAMap, cellBMap] = $computeTableMap(tableNode, anchorCell, focusCell);\n    let minColumn = Math.min(cellAMap.startColumn, cellBMap.startColumn);\n    let minRow = Math.min(cellAMap.startRow, cellBMap.startRow);\n    let maxColumn = Math.max(cellAMap.startColumn + cellAMap.cell.__colSpan - 1, cellBMap.startColumn + cellBMap.cell.__colSpan - 1);\n    let maxRow = Math.max(cellAMap.startRow + cellAMap.cell.__rowSpan - 1, cellBMap.startRow + cellBMap.cell.__rowSpan - 1);\n    let exploredMinColumn = minColumn;\n    let exploredMinRow = minRow;\n    let exploredMaxColumn = minColumn;\n    let exploredMaxRow = minRow;\n    function expandBoundary(mapValue) {\n      const {\n        cell,\n        startColumn: cellStartColumn,\n        startRow: cellStartRow\n      } = mapValue;\n      minColumn = Math.min(minColumn, cellStartColumn);\n      minRow = Math.min(minRow, cellStartRow);\n      maxColumn = Math.max(maxColumn, cellStartColumn + cell.__colSpan - 1);\n      maxRow = Math.max(maxRow, cellStartRow + cell.__rowSpan - 1);\n    }\n    while (minColumn < exploredMinColumn || minRow < exploredMinRow || maxColumn > exploredMaxColumn || maxRow > exploredMaxRow) {\n      if (minColumn < exploredMinColumn) {\n        // Expand on the left\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const previousColumn = exploredMinColumn - 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][previousColumn]);\n        }\n        exploredMinColumn = previousColumn;\n      }\n      if (minRow < exploredMinRow) {\n        // Expand on top\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const previousRow = exploredMinRow - 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[previousRow][exploredMinColumn + i]);\n        }\n        exploredMinRow = previousRow;\n      }\n      if (maxColumn > exploredMaxColumn) {\n        // Expand on the right\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const nextColumn = exploredMaxColumn + 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][nextColumn]);\n        }\n        exploredMaxColumn = nextColumn;\n      }\n      if (maxRow > exploredMaxRow) {\n        // Expand on the bottom\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const nextRow = exploredMaxRow + 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[nextRow][exploredMinColumn + i]);\n        }\n        exploredMaxRow = nextRow;\n      }\n    }\n    const nodes = [tableNode];\n    let lastRow = null;\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minColumn; j <= maxColumn; j++) {\n        const {\n          cell\n        } = map[i][j];\n        const currentRow = cell.getParent();\n        if (!$isTableRowNode(currentRow)) {\n          throw Error(`Expected TableCellNode parent to be a TableRowNode`);\n        }\n        if (currentRow !== lastRow) {\n          nodes.push(currentRow);\n        }\n        nodes.push(cell, ...$getChildrenRecursively(cell));\n        lastRow = currentRow;\n      }\n    }\n    if (!lexical.isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isTableSelection(x) {\n  return x instanceof TableSelection;\n}\nfunction $createTableSelection() {\n  const anchor = lexical.$createPoint('root', 0, 'element');\n  const focus = lexical.$createPoint('root', 0, 'element');\n  return new TableSelection('root', anchor, focus);\n}\nfunction $getChildrenRecursively(node) {\n  const nodes = [];\n  const stack = [node];\n  while (stack.length > 0) {\n    const currentNode = stack.pop();\n    if (!(currentNode !== undefined)) {\n      throw Error(`Stack.length > 0; can't be undefined`);\n    }\n    if (lexical.$isElementNode(currentNode)) {\n      stack.unshift(...currentNode.getChildren());\n    }\n    if (currentNode !== node) {\n      nodes.push(currentNode);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst getDOMSelection = targetWindow => CAN_USE_DOM ? (targetWindow || window).getSelection() : null;\nclass TableObserver {\n  constructor(editor, tableNodeKey) {\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.listenersToRemove = new Set();\n    this.tableNodeKey = tableNodeKey;\n    this.editor = editor;\n    this.table = {\n      columns: 0,\n      domRows: [],\n      rows: 0\n    };\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.trackTable();\n  }\n  getTable() {\n    return this.table;\n  }\n  removeListeners() {\n    Array.from(this.listenersToRemove).forEach(removeListener => removeListener());\n  }\n  trackTable() {\n    const observer = new MutationObserver(records => {\n      this.editor.update(() => {\n        let gridNeedsRedraw = false;\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const target = record.target;\n          const nodeName = target.nodeName;\n          if (nodeName === 'TABLE' || nodeName === 'TR') {\n            gridNeedsRedraw = true;\n            break;\n          }\n        }\n        if (!gridNeedsRedraw) {\n          return;\n        }\n        const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n        if (!tableElement) {\n          throw new Error('Expected to find TableElement in DOM');\n        }\n        this.table = getTable(tableElement);\n      });\n    });\n    this.editor.update(() => {\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      this.table = getTable(tableElement);\n      observer.observe(tableElement, {\n        childList: true,\n        subtree: true\n      });\n    });\n  }\n  clearHighlight() {\n    const editor = this.editor;\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.enableHighlightStyle();\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      const grid = getTable(tableElement);\n      $updateDOMForSelection(editor, grid, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n  enableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      utils.removeClassNamesFromElement(tableElement, editor._config.theme.tableSelection);\n      tableElement.classList.remove('disable-selection');\n      this.hasHijackedSelectionStyles = false;\n    });\n  }\n  disableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      utils.addClassNamesToElement(tableElement, editor._config.theme.tableSelection);\n      this.hasHijackedSelectionStyles = true;\n    });\n  }\n  updateTableTableSelection(selection) {\n    if (selection !== null && selection.tableKey === this.tableNodeKey) {\n      const editor = this.editor;\n      this.tableSelection = selection;\n      this.isHighlightingCells = true;\n      this.disableHighlightStyle();\n      $updateDOMForSelection(editor, this.table, this.tableSelection);\n    } else if (selection == null) {\n      this.clearHighlight();\n    } else {\n      this.tableNodeKey = selection.tableKey;\n      this.updateTableTableSelection(selection);\n    }\n  }\n  setFocusCellForSelection(cell) {\n    let ignoreStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      const cellX = cell.x;\n      const cellY = cell.y;\n      this.focusCell = cell;\n      if (this.anchorCell !== null) {\n        const domSelection = getDOMSelection(editor._window);\n        // Collapse the selection\n        if (domSelection) {\n          domSelection.setBaseAndExtent(this.anchorCell.elem, 0, this.focusCell.elem, 0);\n        }\n      }\n      if (!this.isHighlightingCells && (this.anchorX !== cellX || this.anchorY !== cellY || ignoreStart)) {\n        this.isHighlightingCells = true;\n        this.disableHighlightStyle();\n      } else if (cellX === this.focusX && cellY === this.focusY) {\n        return;\n      }\n      this.focusX = cellX;\n      this.focusY = cellY;\n      if (this.isHighlightingCells) {\n        const focusTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n        if (this.tableSelection != null && this.anchorCellNodeKey != null && $isTableCellNode(focusTableCellNode)) {\n          const focusNodeKey = focusTableCellNode.getKey();\n          this.tableSelection = this.tableSelection.clone() || $createTableSelection();\n          this.focusCellNodeKey = focusNodeKey;\n          this.tableSelection.set(this.tableNodeKey, this.anchorCellNodeKey, this.focusCellNodeKey);\n          lexical.$setSelection(this.tableSelection);\n          editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n          $updateDOMForSelection(editor, this.table, this.tableSelection);\n        }\n      }\n    });\n  }\n  setAnchorCellForSelection(cell) {\n    this.isHighlightingCells = false;\n    this.anchorCell = cell;\n    this.anchorX = cell.x;\n    this.anchorY = cell.y;\n    this.editor.update(() => {\n      const anchorTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n      if ($isTableCellNode(anchorTableCellNode)) {\n        const anchorNodeKey = anchorTableCellNode.getKey();\n        this.tableSelection = this.tableSelection != null ? this.tableSelection.clone() : $createTableSelection();\n        this.anchorCellNodeKey = anchorNodeKey;\n      }\n    });\n  }\n  formatCells(type) {\n    this.editor.update(() => {\n      const selection = lexical.$getSelection();\n      if (!$isTableSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n      const formatSelection = lexical.$createRangeSelection();\n      const anchor = formatSelection.anchor;\n      const focus = formatSelection.focus;\n      selection.getNodes().forEach(cellNode => {\n        if ($isTableCellNode(cellNode) && cellNode.getTextContentSize() !== 0) {\n          anchor.set(cellNode.getKey(), 0, 'element');\n          focus.set(cellNode.getKey(), cellNode.getChildrenSize(), 'element');\n          formatSelection.formatText(type);\n        }\n      });\n      lexical.$setSelection(selection);\n      this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n  clearText() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const selection = lexical.$getSelection();\n      if (!$isTableSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n      const selectedNodes = selection.getNodes().filter($isTableCellNode);\n      if (selectedNodes.length === this.table.columns * this.table.rows) {\n        tableNode.selectPrevious();\n        // Delete entire table\n        tableNode.remove();\n        const rootNode = lexical.$getRoot();\n        rootNode.selectStart();\n        return;\n      }\n      selectedNodes.forEach(cellNode => {\n        if (lexical.$isElementNode(cellNode)) {\n          const paragraphNode = lexical.$createParagraphNode();\n          const textNode = lexical.$createTextNode();\n          paragraphNode.append(textNode);\n          cellNode.append(paragraphNode);\n          cellNode.getChildren().forEach(child => {\n            if (child !== paragraphNode) {\n              child.remove();\n            }\n          });\n        }\n      });\n      $updateDOMForSelection(editor, this.table, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst LEXICAL_ELEMENT_KEY = '__lexicalTableSelection';\nfunction applyTableHandlers(tableNode, tableElement, editor, hasTabHandler) {\n  const rootElement = editor.getRootElement();\n  if (rootElement === null) {\n    throw new Error('No root element.');\n  }\n  const tableObserver = new TableObserver(editor, tableNode.getKey());\n  const editorWindow = editor._window || window;\n  attachTableObserverToTableElement(tableElement, tableObserver);\n  tableElement.addEventListener('mousedown', event => {\n    setTimeout(() => {\n      if (event.button !== 0) {\n        return;\n      }\n      if (!editorWindow) {\n        return;\n      }\n      const anchorCell = getDOMCellFromTarget(event.target);\n      if (anchorCell !== null) {\n        stopEvent(event);\n        tableObserver.setAnchorCellForSelection(anchorCell);\n      }\n      const onMouseUp = () => {\n        editorWindow.removeEventListener('mouseup', onMouseUp);\n        editorWindow.removeEventListener('mousemove', onMouseMove);\n      };\n      const onMouseMove = moveEvent => {\n        const focusCell = getDOMCellFromTarget(moveEvent.target);\n        if (focusCell !== null && (tableObserver.anchorX !== focusCell.x || tableObserver.anchorY !== focusCell.y)) {\n          moveEvent.preventDefault();\n          tableObserver.setFocusCellForSelection(focusCell);\n        }\n      };\n      editorWindow.addEventListener('mouseup', onMouseUp);\n      editorWindow.addEventListener('mousemove', onMouseMove);\n    }, 0);\n  });\n\n  // Clear selection when clicking outside of dom.\n  const mouseDownCallback = event => {\n    if (event.button !== 0) {\n      return;\n    }\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n      const target = event.target;\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey && rootElement.contains(target)) {\n        tableObserver.clearHighlight();\n      }\n    });\n  };\n  editorWindow.addEventListener('mousedown', mouseDownCallback);\n  tableObserver.listenersToRemove.add(() => editorWindow.removeEventListener('mousedown', mouseDownCallback));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => $handleArrowKey(editor, event, 'down', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => $handleArrowKey(editor, event, 'up', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => $handleArrowKey(editor, event, 'backward', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => $handleArrowKey(editor, event, 'forward', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if ($isTableSelection(selection)) {\n      const focusCellNode = utils.$findMatchingParent(selection.focus.getNode(), $isTableCellNode);\n      if ($isTableCellNode(focusCellNode)) {\n        stopEvent(event);\n        focusCellNode.selectEnd();\n        return true;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  const deleteTextHandler = command => () => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n      const anchorNode = selection.anchor.getNode();\n      const focusNode = selection.focus.getNode();\n      const isAnchorInside = tableNode.isParentOf(anchorNode);\n      const isFocusInside = tableNode.isParentOf(focusNode);\n      const selectionContainsPartialTable = isAnchorInside && !isFocusInside || isFocusInside && !isAnchorInside;\n      if (selectionContainsPartialTable) {\n        tableObserver.clearText();\n        return true;\n      }\n      const nearestElementNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n      const topLevelCellElementNode = nearestElementNode && utils.$findMatchingParent(nearestElementNode, n => lexical.$isElementNode(n) && $isTableCellNode(n.getParent()));\n      if (!lexical.$isElementNode(topLevelCellElementNode) || !lexical.$isElementNode(nearestElementNode)) {\n        return false;\n      }\n      if (command === lexical.DELETE_LINE_COMMAND && topLevelCellElementNode.getPreviousSibling() === null) {\n        // TODO: Fix Delete Line in Table Cells.\n        return true;\n      }\n      if (command === lexical.DELETE_CHARACTER_COMMAND || command === lexical.DELETE_WORD_COMMAND) {\n        if (selection.isCollapsed() && selection.anchor.offset === 0) {\n          if (nearestElementNode !== topLevelCellElementNode) {\n            const children = nearestElementNode.getChildren();\n            const newParagraphNode = lexical.$createParagraphNode();\n            children.forEach(child => newParagraphNode.append(child));\n            nearestElementNode.replace(newParagraphNode);\n            nearestElementNode.getWritable().__parent = tableCellNode.getKey();\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  [lexical.DELETE_WORD_COMMAND, lexical.DELETE_LINE_COMMAND, lexical.DELETE_CHARACTER_COMMAND].forEach(command => {\n    tableObserver.listenersToRemove.add(editor.registerCommand(command, deleteTextHandler(command), lexical.COMMAND_PRIORITY_CRITICAL));\n  });\n  const deleteCellHandler = event => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      event.preventDefault();\n      event.stopPropagation();\n      tableObserver.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  };\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_DELETE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.formatCells(payload);\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.clearHighlight();\n      return false;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  if (hasTabHandler) {\n    tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_TAB_COMMAND, event => {\n      const selection = lexical.$getSelection();\n      if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed() || !$isSelectionInTable(selection, tableNode)) {\n        return false;\n      }\n      const tableCellNode = $findCellNode(selection.anchor.getNode());\n      if (tableCellNode === null) {\n        return false;\n      }\n      stopEvent(event);\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableObserver.table);\n      selectTableNodeInDirection(tableObserver, tableNode, currentCords.x, currentCords.y, !event.shiftKey ? 'forward' : 'backward');\n      return true;\n    }, lexical.COMMAND_PRIORITY_CRITICAL));\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.FOCUS_COMMAND, payload => {\n    return tableNode.isSelected();\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  function getObserverCellFromCellNode(tableCellNode) {\n    const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableObserver.table);\n    return tableNode.getDOMCellFromCordsOrThrow(currentCords.x, currentCords.y, tableObserver.table);\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, selectionPayload => {\n    const {\n      nodes,\n      selection\n    } = selectionPayload;\n    const anchorAndFocus = selection.getStartEndPoints();\n    const isTableSelection = $isTableSelection(selection);\n    const isRangeSelection = lexical.$isRangeSelection(selection);\n    const isSelectionInsideOfGrid = isRangeSelection && utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n)) !== null && utils.$findMatchingParent(selection.focus.getNode(), n => $isTableCellNode(n)) !== null || isTableSelection;\n    if (nodes.length !== 1 || !$isTableNode(nodes[0]) || !isSelectionInsideOfGrid || anchorAndFocus === null) {\n      return false;\n    }\n    const [anchor] = anchorAndFocus;\n    const newGrid = nodes[0];\n    const newGridRows = newGrid.getChildren();\n    const newColumnCount = newGrid.getFirstChildOrThrow().getChildrenSize();\n    const newRowCount = newGrid.getChildrenSize();\n    const gridCellNode = utils.$findMatchingParent(anchor.getNode(), n => $isTableCellNode(n));\n    const gridRowNode = gridCellNode && utils.$findMatchingParent(gridCellNode, n => $isTableRowNode(n));\n    const gridNode = gridRowNode && utils.$findMatchingParent(gridRowNode, n => $isTableNode(n));\n    if (!$isTableCellNode(gridCellNode) || !$isTableRowNode(gridRowNode) || !$isTableNode(gridNode)) {\n      return false;\n    }\n    const startY = gridRowNode.getIndexWithinParent();\n    const stopY = Math.min(gridNode.getChildrenSize() - 1, startY + newRowCount - 1);\n    const startX = gridCellNode.getIndexWithinParent();\n    const stopX = Math.min(gridRowNode.getChildrenSize() - 1, startX + newColumnCount - 1);\n    const fromX = Math.min(startX, stopX);\n    const fromY = Math.min(startY, stopY);\n    const toX = Math.max(startX, stopX);\n    const toY = Math.max(startY, stopY);\n    const gridRowNodes = gridNode.getChildren();\n    let newRowIdx = 0;\n    let newAnchorCellKey;\n    let newFocusCellKey;\n    for (let r = fromY; r <= toY; r++) {\n      const currentGridRowNode = gridRowNodes[r];\n      if (!$isTableRowNode(currentGridRowNode)) {\n        return false;\n      }\n      const newGridRowNode = newGridRows[newRowIdx];\n      if (!$isTableRowNode(newGridRowNode)) {\n        return false;\n      }\n      const gridCellNodes = currentGridRowNode.getChildren();\n      const newGridCellNodes = newGridRowNode.getChildren();\n      let newColumnIdx = 0;\n      for (let c = fromX; c <= toX; c++) {\n        const currentGridCellNode = gridCellNodes[c];\n        if (!$isTableCellNode(currentGridCellNode)) {\n          return false;\n        }\n        const newGridCellNode = newGridCellNodes[newColumnIdx];\n        if (!$isTableCellNode(newGridCellNode)) {\n          return false;\n        }\n        if (r === fromY && c === fromX) {\n          newAnchorCellKey = currentGridCellNode.getKey();\n        } else if (r === toY && c === toX) {\n          newFocusCellKey = currentGridCellNode.getKey();\n        }\n        const originalChildren = currentGridCellNode.getChildren();\n        newGridCellNode.getChildren().forEach(child => {\n          if (lexical.$isTextNode(child)) {\n            const paragraphNode = lexical.$createParagraphNode();\n            paragraphNode.append(child);\n            currentGridCellNode.append(child);\n          } else {\n            currentGridCellNode.append(child);\n          }\n        });\n        originalChildren.forEach(n => n.remove());\n        newColumnIdx++;\n      }\n      newRowIdx++;\n    }\n    if (newAnchorCellKey && newFocusCellKey) {\n      const newTableSelection = $createTableSelection();\n      newTableSelection.set(nodes[0].getKey(), newAnchorCellKey, newFocusCellKey);\n      lexical.$setSelection(newTableSelection);\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_CHANGE_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    const prevSelection = lexical.$getPreviousSelection();\n    if (lexical.$isRangeSelection(selection)) {\n      const {\n        anchor,\n        focus\n      } = selection;\n      const anchorNode = anchor.getNode();\n      const focusNode = focus.getNode();\n      // Using explicit comparison with table node to ensure it's not a nested table\n      // as in that case we'll leave selection resolving to that table\n      const anchorCellNode = $findCellNode(anchorNode);\n      const focusCellNode = $findCellNode(focusNode);\n      const isAnchorInside = anchorCellNode && tableNode.is($findTableNode(anchorCellNode));\n      const isFocusInside = focusCellNode && tableNode.is($findTableNode(focusCellNode));\n      const isPartialyWithinTable = isAnchorInside !== isFocusInside;\n      const isWithinTable = isAnchorInside && isFocusInside;\n      const isBackward = selection.isBackward();\n      if (isPartialyWithinTable) {\n        const newSelection = selection.clone();\n        newSelection.focus.set(tableNode.getKey(), isBackward ? 0 : tableNode.getChildrenSize(), 'element');\n        lexical.$setSelection(newSelection);\n        $addHighlightStyleToTable(editor, tableObserver);\n      } else if (isWithinTable) {\n        // Handle case when selection spans across multiple cells but still\n        // has range selection, then we convert it into grid selection\n        if (!anchorCellNode.is(focusCellNode)) {\n          tableObserver.setAnchorCellForSelection(getObserverCellFromCellNode(anchorCellNode));\n          tableObserver.setFocusCellForSelection(getObserverCellFromCellNode(focusCellNode), true);\n        }\n      }\n    }\n    if (selection && !selection.is(prevSelection) && ($isTableSelection(selection) || $isTableSelection(prevSelection)) && tableObserver.tableSelection && !tableObserver.tableSelection.is(prevSelection)) {\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.updateTableTableSelection(selection);\n      } else if (!$isTableSelection(selection) && $isTableSelection(prevSelection) && prevSelection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.updateTableTableSelection(null);\n      }\n      return false;\n    }\n    if (tableObserver.hasHijackedSelectionStyles && !tableNode.isSelected()) {\n      $removeHighlightStyleToTable(editor, tableObserver);\n    } else if (!tableObserver.hasHijackedSelectionStyles && tableNode.isSelected()) {\n      $addHighlightStyleToTable(editor, tableObserver);\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  return tableObserver;\n}\nfunction attachTableObserverToTableElement(tableElement, tableObserver) {\n  tableElement[LEXICAL_ELEMENT_KEY] = tableObserver;\n}\nfunction getTableObserverFromTableElement(tableElement) {\n  return tableElement[LEXICAL_ELEMENT_KEY];\n}\nfunction getDOMCellFromTarget(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    const nodeName = currentNode.nodeName;\n    if (nodeName === 'TD' || nodeName === 'TH') {\n      // @ts-expect-error: internal field\n      const cell = currentNode._cell;\n      if (cell === undefined) {\n        return null;\n      }\n      return cell;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  return null;\n}\nfunction getTable(tableElement) {\n  const domRows = [];\n  const grid = {\n    columns: 0,\n    domRows,\n    rows: 0\n  };\n  let currentNode = tableElement.firstChild;\n  let x = 0;\n  let y = 0;\n  domRows.length = 0;\n  while (currentNode != null) {\n    const nodeMame = currentNode.nodeName;\n    if (nodeMame === 'TD' || nodeMame === 'TH') {\n      const elem = currentNode;\n      const cell = {\n        elem,\n        hasBackgroundColor: elem.style.backgroundColor !== '',\n        highlighted: false,\n        x,\n        y\n      };\n\n      // @ts-expect-error: internal field\n      currentNode._cell = cell;\n      let row = domRows[y];\n      if (row === undefined) {\n        row = domRows[y] = [];\n      }\n      row[x] = cell;\n    } else {\n      const child = currentNode.firstChild;\n      if (child != null) {\n        currentNode = child;\n        continue;\n      }\n    }\n    const sibling = currentNode.nextSibling;\n    if (sibling != null) {\n      x++;\n      currentNode = sibling;\n      continue;\n    }\n    const parent = currentNode.parentNode;\n    if (parent != null) {\n      const parentSibling = parent.nextSibling;\n      if (parentSibling == null) {\n        break;\n      }\n      y++;\n      x = 0;\n      currentNode = parentSibling;\n    }\n  }\n  grid.columns = x + 1;\n  grid.rows = y + 1;\n  return grid;\n}\nfunction $updateDOMForSelection(editor, table, selection) {\n  const selectedCellNodes = new Set(selection ? selection.getNodes() : []);\n  $forEachTableCell(table, (cell, lexicalNode) => {\n    const elem = cell.elem;\n    if (selectedCellNodes.has(lexicalNode)) {\n      cell.highlighted = true;\n      $addHighlightToDOM(editor, cell);\n    } else {\n      cell.highlighted = false;\n      $removeHighlightFromDOM(editor, cell);\n      if (!elem.getAttribute('style')) {\n        elem.removeAttribute('style');\n      }\n    }\n  });\n}\nfunction $forEachTableCell(grid, cb) {\n  const {\n    domRows\n  } = grid;\n  for (let y = 0; y < domRows.length; y++) {\n    const row = domRows[y];\n    if (!row) {\n      continue;\n    }\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (!cell) {\n        continue;\n      }\n      const lexicalNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n      if (lexicalNode !== null) {\n        cb(cell, lexicalNode, {\n          x,\n          y\n        });\n      }\n    }\n  }\n}\nfunction $addHighlightStyleToTable(editor, tableSelection) {\n  tableSelection.disableHighlightStyle();\n  $forEachTableCell(tableSelection.table, cell => {\n    cell.highlighted = true;\n    $addHighlightToDOM(editor, cell);\n  });\n}\nfunction $removeHighlightStyleToTable(editor, tableObserver) {\n  tableObserver.enableHighlightStyle();\n  $forEachTableCell(tableObserver.table, cell => {\n    const elem = cell.elem;\n    cell.highlighted = false;\n    $removeHighlightFromDOM(editor, cell);\n    if (!elem.getAttribute('style')) {\n      elem.removeAttribute('style');\n    }\n  });\n}\nconst selectTableNodeInDirection = (tableObserver, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableObserver.table.columns - 1 : 0)) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableObserver.table), isForward);\n      } else {\n        if (y !== (isForward ? tableObserver.table.rows - 1 : 0)) {\n          selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(isForward ? 0 : tableObserver.table.columns - 1, y + (isForward ? 1 : -1), tableObserver.table), isForward);\n        } else if (!isForward) {\n          tableNode.selectPrevious();\n        } else {\n          tableNode.selectNext();\n        }\n      }\n      return true;\n    case 'up':\n      if (y !== 0) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y - 1, tableObserver.table), false);\n      } else {\n        tableNode.selectPrevious();\n      }\n      return true;\n    case 'down':\n      if (y !== tableObserver.table.rows - 1) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y + 1, tableObserver.table), true);\n      } else {\n        tableNode.selectNext();\n      }\n      return true;\n    default:\n      return false;\n  }\n};\nconst adjustFocusNodeInDirection = (tableObserver, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableObserver.table.columns - 1 : 0)) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableObserver.table));\n      }\n      return true;\n    case 'up':\n      if (y !== 0) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x, y - 1, tableObserver.table));\n        return true;\n      } else {\n        return false;\n      }\n    case 'down':\n      if (y !== tableObserver.table.rows - 1) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x, y + 1, tableObserver.table));\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n};\nfunction $isSelectionInTable(selection, tableNode) {\n  if (lexical.$isRangeSelection(selection) || $isTableSelection(selection)) {\n    const isAnchorInside = tableNode.isParentOf(selection.anchor.getNode());\n    const isFocusInside = tableNode.isParentOf(selection.focus.getNode());\n    return isAnchorInside && isFocusInside;\n  }\n  return false;\n}\nfunction selectTableCellNode(tableCell, fromStart) {\n  if (fromStart) {\n    tableCell.selectStart();\n  } else {\n    tableCell.selectEnd();\n  }\n}\nconst BROWSER_BLUE_RGB = '172,206,247';\nfunction $addHighlightToDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  const backgroundColor = node.getBackgroundColor();\n  if (backgroundColor === null) {\n    element.style.setProperty('background-color', `rgb(${BROWSER_BLUE_RGB})`);\n  } else {\n    element.style.setProperty('background-image', `linear-gradient(to right, rgba(${BROWSER_BLUE_RGB},0.85), rgba(${BROWSER_BLUE_RGB},0.85))`);\n  }\n  element.style.setProperty('caret-color', 'transparent');\n}\nfunction $removeHighlightFromDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  const backgroundColor = node.getBackgroundColor();\n  if (backgroundColor === null) {\n    element.style.removeProperty('background-color');\n  }\n  element.style.removeProperty('background-image');\n  element.style.removeProperty('caret-color');\n}\nfunction $findCellNode(node) {\n  const cellNode = utils.$findMatchingParent(node, $isTableCellNode);\n  return $isTableCellNode(cellNode) ? cellNode : null;\n}\nfunction $findTableNode(node) {\n  const tableNode = utils.$findMatchingParent(node, $isTableNode);\n  return $isTableNode(tableNode) ? tableNode : null;\n}\nfunction $handleArrowKey(editor, event, direction, tableNode, tableObserver) {\n  const selection = lexical.$getSelection();\n  if (!$isSelectionInTable(selection, tableNode)) {\n    return false;\n  }\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed()) {\n    // Horizontal move between cels seem to work well without interruption\n    // so just exit early, and handle vertical moves\n    if (direction === 'backward' || direction === 'forward') {\n      return false;\n    }\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n    if (!$isTableCellNode(anchorCellNode) || !anchorCellNode.is(focusCellNode)) {\n      return false;\n    }\n    const anchorCellTable = $findTableNode(anchorCellNode);\n    if (anchorCellTable !== tableNode && anchorCellTable != null) {\n      const anchorCellTableElement = editor.getElementByKey(anchorCellTable.getKey());\n      if (anchorCellTableElement != null) {\n        tableObserver.table = getTable(anchorCellTableElement);\n        return $handleArrowKey(editor, event, direction, anchorCellTable, tableObserver);\n      }\n    }\n    const anchorCellDom = editor.getElementByKey(anchorCellNode.__key);\n    const anchorDOM = editor.getElementByKey(anchor.key);\n    if (anchorDOM == null || anchorCellDom == null) {\n      return false;\n    }\n    let edgeSelectionRect;\n    if (anchor.type === 'element') {\n      edgeSelectionRect = anchorDOM.getBoundingClientRect();\n    } else {\n      const domSelection = window.getSelection();\n      if (domSelection === null || domSelection.rangeCount === 0) {\n        return false;\n      }\n      const range = domSelection.getRangeAt(0);\n      edgeSelectionRect = range.getBoundingClientRect();\n    }\n    const edgeChild = direction === 'up' ? anchorCellNode.getFirstChild() : anchorCellNode.getLastChild();\n    if (edgeChild == null) {\n      return false;\n    }\n    const edgeChildDOM = editor.getElementByKey(edgeChild.__key);\n    if (edgeChildDOM == null) {\n      return false;\n    }\n    const edgeRect = edgeChildDOM.getBoundingClientRect();\n    const isExiting = direction === 'up' ? edgeRect.top > edgeSelectionRect.top - edgeSelectionRect.height : edgeSelectionRect.bottom + edgeSelectionRect.height > edgeRect.bottom;\n    if (isExiting) {\n      stopEvent(event);\n      const cords = tableNode.getCordsFromCellNode(anchorCellNode, tableObserver.table);\n      if (event.shiftKey) {\n        const cell = tableNode.getDOMCellFromCordsOrThrow(cords.x, cords.y, tableObserver.table);\n        tableObserver.setAnchorCellForSelection(cell);\n        tableObserver.setFocusCellForSelection(cell, true);\n      } else {\n        return selectTableNodeInDirection(tableObserver, tableNode, cords.x, cords.y, direction);\n      }\n      return true;\n    }\n  } else if ($isTableSelection(selection)) {\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n    const [tableNodeFromSelection] = selection.getNodes();\n    const tableElement = editor.getElementByKey(tableNodeFromSelection.getKey());\n    if (!$isTableCellNode(anchorCellNode) || !$isTableCellNode(focusCellNode) || !$isTableNode(tableNodeFromSelection) || tableElement == null) {\n      return false;\n    }\n    tableObserver.updateTableTableSelection(selection);\n    const grid = getTable(tableElement);\n    const cordsAnchor = tableNode.getCordsFromCellNode(anchorCellNode, grid);\n    const anchorCell = tableNode.getDOMCellFromCordsOrThrow(cordsAnchor.x, cordsAnchor.y, grid);\n    tableObserver.setAnchorCellForSelection(anchorCell);\n    stopEvent(event);\n    if (event.shiftKey) {\n      const cords = tableNode.getCordsFromCellNode(focusCellNode, grid);\n      return adjustFocusNodeInDirection(tableObserver, tableNodeFromSelection, cords.x, cords.y, direction);\n    } else {\n      focusCellNode.selectEnd();\n    }\n    return true;\n  }\n  return false;\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n  event.stopPropagation();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TableNode extends lexical.ElementNode {\n  static getType() {\n    return 'table';\n  }\n  static clone(node) {\n    return new TableNode(node.__key);\n  }\n  static importDOM() {\n    return {\n      table: _node => ({\n        conversion: convertTableElement,\n        priority: 1\n      })\n    };\n  }\n  static importJSON(_serializedNode) {\n    return $createTableNode();\n  }\n  constructor(key) {\n    super(key);\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'table',\n      version: 1\n    };\n  }\n  createDOM(config, editor) {\n    const tableElement = document.createElement('table');\n    utils.addClassNamesToElement(tableElement, config.theme.table);\n    return tableElement;\n  }\n  updateDOM() {\n    return false;\n  }\n  exportDOM(editor) {\n    return {\n      ...super.exportDOM(editor),\n      after: tableElement => {\n        if (tableElement) {\n          const newElement = tableElement.cloneNode();\n          const colGroup = document.createElement('colgroup');\n          const tBody = document.createElement('tbody');\n          if (utils.isHTMLElement(tableElement)) {\n            tBody.append(...tableElement.children);\n          }\n          const firstRow = this.getFirstChildOrThrow();\n          if (!$isTableRowNode(firstRow)) {\n            throw new Error('Expected to find row node.');\n          }\n          const colCount = firstRow.getChildrenSize();\n          for (let i = 0; i < colCount; i++) {\n            const col = document.createElement('col');\n            colGroup.append(col);\n          }\n          newElement.replaceChildren(colGroup, tBody);\n          return newElement;\n        }\n      }\n    };\n  }\n\n  // TODO 0.10 deprecate\n  canExtractContents() {\n    return false;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  getCordsFromCellNode(tableCellNode, table) {\n    const {\n      rows,\n      domRows\n    } = table;\n    for (let y = 0; y < rows; y++) {\n      const row = domRows[y];\n      if (row == null) {\n        continue;\n      }\n      const x = row.findIndex(cell => {\n        if (!cell) return;\n        const {\n          elem\n        } = cell;\n        const cellNode = lexical.$getNearestNodeFromDOMNode(elem);\n        return cellNode === tableCellNode;\n      });\n      if (x !== -1) {\n        return {\n          x,\n          y\n        };\n      }\n    }\n    throw new Error('Cell not found in table.');\n  }\n  getDOMCellFromCords(x, y, table) {\n    const {\n      domRows\n    } = table;\n    const row = domRows[y];\n    if (row == null) {\n      return null;\n    }\n    const cell = row[x];\n    if (cell == null) {\n      return null;\n    }\n    return cell;\n  }\n  getDOMCellFromCordsOrThrow(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (!cell) {\n      throw new Error('Cell not found at cords.');\n    }\n    return cell;\n  }\n  getCellNodeFromCords(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (cell == null) {\n      return null;\n    }\n    const node = lexical.$getNearestNodeFromDOMNode(cell.elem);\n    if ($isTableCellNode(node)) {\n      return node;\n    }\n    return null;\n  }\n  getCellNodeFromCordsOrThrow(x, y, table) {\n    const node = this.getCellNodeFromCords(x, y, table);\n    if (!node) {\n      throw new Error('Node at cords not TableCellNode.');\n    }\n    return node;\n  }\n  canSelectBefore() {\n    return true;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction $getElementForTableNode(editor, tableNode) {\n  const tableElement = editor.getElementByKey(tableNode.getKey());\n  if (tableElement == null) {\n    throw new Error('Table Element Not Found');\n  }\n  return getTable(tableElement);\n}\nfunction convertTableElement(_domNode) {\n  return {\n    node: $createTableNode()\n  };\n}\nfunction $createTableNode() {\n  return lexical.$applyNodeReplacement(new TableNode());\n}\nfunction $isTableNode(node) {\n  return node instanceof TableNode;\n}\nexports.$computeTableMap = $computeTableMap;\nexports.$createTableCellNode = $createTableCellNode;\nexports.$createTableNode = $createTableNode;\nexports.$createTableNodeWithDimensions = $createTableNodeWithDimensions;\nexports.$createTableRowNode = $createTableRowNode;\nexports.$createTableSelection = $createTableSelection;\nexports.$deleteTableColumn = $deleteTableColumn;\nexports.$deleteTableColumn__EXPERIMENTAL = $deleteTableColumn__EXPERIMENTAL;\nexports.$deleteTableRow__EXPERIMENTAL = $deleteTableRow__EXPERIMENTAL;\nexports.$getElementForTableNode = $getElementForTableNode;\nexports.$getNodeTriplet = $getNodeTriplet;\nexports.$getTableCellNodeFromLexicalNode = $getTableCellNodeFromLexicalNode;\nexports.$getTableCellNodeRect = $getTableCellNodeRect;\nexports.$getTableColumnIndexFromTableCellNode = $getTableColumnIndexFromTableCellNode;\nexports.$getTableNodeFromLexicalNodeOrThrow = $getTableNodeFromLexicalNodeOrThrow;\nexports.$getTableRowIndexFromTableCellNode = $getTableRowIndexFromTableCellNode;\nexports.$getTableRowNodeFromTableCellNodeOrThrow = $getTableRowNodeFromTableCellNodeOrThrow;\nexports.$insertTableColumn = $insertTableColumn;\nexports.$insertTableColumn__EXPERIMENTAL = $insertTableColumn__EXPERIMENTAL;\nexports.$insertTableRow = $insertTableRow;\nexports.$insertTableRow__EXPERIMENTAL = $insertTableRow__EXPERIMENTAL;\nexports.$isTableCellNode = $isTableCellNode;\nexports.$isTableNode = $isTableNode;\nexports.$isTableRowNode = $isTableRowNode;\nexports.$isTableSelection = $isTableSelection;\nexports.$removeTableRowAtIndex = $removeTableRowAtIndex;\nexports.$unmergeCell = $unmergeCell;\nexports.INSERT_TABLE_COMMAND = INSERT_TABLE_COMMAND;\nexports.TableCellHeaderStates = TableCellHeaderStates;\nexports.TableCellNode = TableCellNode;\nexports.TableNode = TableNode;\nexports.TableObserver = TableObserver;\nexports.TableRowNode = TableRowNode;\nexports.applyTableHandlers = applyTableHandlers;\nexports.getDOMCellFromTarget = getDOMCellFromTarget;\nexports.getTableObserverFromTableElement = getTableObserverFromTableElement;","map":{"version":3,"names":["utils","require","lexical","PIXEL_VALUE_REG_EXP","TableCellHeaderStates","BOTH","COLUMN","NO_STATUS","ROW","TableCellNode","ElementNode","getType","clone","node","cellNode","__headerState","__colSpan","__width","__key","__rowSpan","__backgroundColor","importDOM","td","conversion","convertTableCellNodeElement","priority","th","importJSON","serializedNode","colSpan","rowSpan","$createTableCellNode","headerState","width","undefined","backgroundColor","constructor","arguments","length","key","createDOM","config","element","document","createElement","getTag","style","addClassNamesToElement","theme","tableCell","hasHeader","tableCellHeader","exportDOM","editor","element_","maxWidth","colCount","getParentOrThrow","getChildrenSize","border","getWidth","Math","max","verticalAlign","textAlign","getBackgroundColor","exportJSON","type","getColSpan","setColSpan","getWritable","getRowSpan","setRowSpan","setHeaderStyles","self","getHeaderStyles","getLatest","setWidth","setBackgroundColor","newBackgroundColor","toggleHeaderStyle","headerStateToToggle","hasHeaderState","updateDOM","prevNode","isShadowRoot","collapseAtStart","canBeEmpty","canIndent","domNode","domNode_","nodeName","toLowerCase","test","parseFloat","tableCellNode","forChild","lexicalNode","parentLexicalNode","$isTableCellNode","$isElementNode","paragraphNode","$createParagraphNode","$isLineBreakNode","getTextContent","append","$applyNodeReplacement","INSERT_TABLE_COMMAND","createCommand","TableRowNode","__height","tr","convertTableRowElement","$createTableRowNode","height","version","tableRow","setHeight","getHeight","$isTableRowNode","CAN_USE_DOM","window","$createTableNodeWithDimensions","rowCount","columnCount","includeHeaders","tableNode","$createTableNode","iRow","tableRowNode","iColumn","rows","columns","$createTextNode","$getTableCellNodeFromLexicalNode","startingNode","$findMatchingParent","n","$getTableRowNodeFromTableCellNodeOrThrow","Error","$getTableNodeFromLexicalNodeOrThrow","$isTableNode","$getTableRowIndexFromTableCellNode","getChildren","findIndex","is","$getTableColumnIndexFromTableCellNode","$getTableCellSiblingsFromTableCellNode","table","x","y","getCordsFromCellNode","above","getCellNodeFromCords","below","left","right","$removeTableRowAtIndex","indexToDelete","tableRows","targetRowNode","remove","$insertTableRow","targetIndex","shouldInsertAfter","r","tableRowCells","tableColumnCount","newTableRowNode","c","tableCellFromTargetRow","insertAfter","insertBefore","getHeaderState","currentState","possibleState","$insertTableRow__EXPERIMENTAL","selection","$getSelection","$isRangeSelection","$isTableSelection","focus","getNode","focusCell","grid","$getNodeTriplet","gridMap","focusCellMap","$computeTableMap","startRow","focusStartRow","focusEndRow","focusEndRowMap","newRow","i","cell","currentCell","currentCellHeaderState","focusEndRowNode","getChildAtIndex","focusStartRowMap","focusStartRowNode","$insertTableColumn","tableCellsToBeInserted","currentTableRowNode","tableRowChildren","targetCell","newTableCell","push","forEach","_ref","$insertTableColumn__EXPERIMENTAL","anchor","anchorCell","anchorCellMap","startColumn","min","insertAfterColumn","gridFirstChild","getFirstChild","firstInsertedCell","$createTableCellNodeForInsertTableColumn","loopRow","rowLoop","currentRow","getNextSibling","rowMap","$insertFirst","currentStartColumn","currentStartRow","insertAfterCell","insertAfterCellRowStart","prevCellIndex","cell_","startRow_","$moveSelectionToCell","$deleteTableColumn","$deleteTableRow__EXPERIMENTAL","anchorStartRow","nextRow","nextRowNode","row","column","cellStartRow","cellStartColumn","previousCell","rowNode","String","previousRow","$deleteTableColumn__EXPERIMENTAL","anchorStartColumn","focusStartColumn","endColumn","selectedColumnCount","selectPrevious","overflowLeft","inSelectedArea","focusRowMap","nextColumn","firstDescendant","getFirstDescendant","selectStart","parent","firstChild","$unmergeCell","map","cellMap","currentRowNode","currentRowMap","currentCellMap","j","cellA","cellB","tableMap","cellAValue","cellBValue","write","value","isEmpty","gridChildren","rowChildren","source","getParent","$getTableCellNodeRect","gridNode","cellMatrix","Array","rowIndex","cells","columnIndex","cellIndex","TableSelection","tableKey","_selection","_cachedNodes","dirty","getStartEndPoints","isBackward","isBefore","getCachedNodes","setCachedNodes","nodes","set","anchorCellKey","focusCellKey","isCollapsed","extract","getNodes","insertRawText","text","insertText","insertNodes","focusNode","$normalizeSelection__EXPERIMENTAL","select","getShape","anchorCellNode","$getNodeByKey","anchorCellNodeRect","focusCellNode","focusCellNodeRect","startX","stopX","startY","stopY","fromX","fromY","toX","toY","cachedNodes","anchorNode","anchorRow","focusCellGrid","getParents","isParentOf","gridParent","getKey","focusCellParent","cellAMap","cellBMap","minColumn","minRow","maxColumn","maxRow","exploredMinColumn","exploredMinRow","exploredMaxColumn","exploredMaxRow","expandBoundary","mapValue","rowDiff","previousColumn","columnDiff","lastRow","$getChildrenRecursively","isCurrentlyReadOnlyMode","textContent","$createTableSelection","$createPoint","stack","currentNode","pop","unshift","getDOMSelection","targetWindow","getSelection","TableObserver","tableNodeKey","isHighlightingCells","anchorX","anchorY","focusX","focusY","listenersToRemove","Set","domRows","tableSelection","anchorCellNodeKey","focusCellNodeKey","hasHijackedSelectionStyles","trackTable","getTable","removeListeners","from","removeListener","observer","MutationObserver","records","update","gridNeedsRedraw","record","target","tableElement","getElementByKey","observe","childList","subtree","clearHighlight","enableHighlightStyle","$updateDOMForSelection","$setSelection","dispatchCommand","SELECTION_CHANGE_COMMAND","removeClassNamesFromElement","_config","classList","disableHighlightStyle","updateTableTableSelection","setFocusCellForSelection","ignoreStart","cellX","cellY","domSelection","_window","setBaseAndExtent","elem","focusTableCellNode","$getNearestNodeFromDOMNode","focusNodeKey","setAnchorCellForSelection","anchorTableCellNode","anchorNodeKey","formatCells","formatSelection","$createRangeSelection","getTextContentSize","formatText","clearText","selectedNodes","filter","rootNode","$getRoot","textNode","child","LEXICAL_ELEMENT_KEY","applyTableHandlers","hasTabHandler","rootElement","getRootElement","tableObserver","editorWindow","attachTableObserverToTableElement","addEventListener","event","setTimeout","button","getDOMCellFromTarget","stopEvent","onMouseUp","removeEventListener","onMouseMove","moveEvent","preventDefault","mouseDownCallback","contains","add","registerCommand","KEY_ARROW_DOWN_COMMAND","$handleArrowKey","COMMAND_PRIORITY_HIGH","KEY_ARROW_UP_COMMAND","KEY_ARROW_LEFT_COMMAND","KEY_ARROW_RIGHT_COMMAND","KEY_ESCAPE_COMMAND","selectEnd","deleteTextHandler","command","$isSelectionInTable","isAnchorInside","isFocusInside","selectionContainsPartialTable","nearestElementNode","topLevelCellElementNode","DELETE_LINE_COMMAND","getPreviousSibling","DELETE_CHARACTER_COMMAND","DELETE_WORD_COMMAND","offset","children","newParagraphNode","replace","__parent","COMMAND_PRIORITY_CRITICAL","deleteCellHandler","stopPropagation","KEY_BACKSPACE_COMMAND","KEY_DELETE_COMMAND","FORMAT_TEXT_COMMAND","payload","CONTROLLED_TEXT_INSERTION_COMMAND","KEY_TAB_COMMAND","$findCellNode","currentCords","selectTableNodeInDirection","shiftKey","FOCUS_COMMAND","isSelected","getObserverCellFromCellNode","getDOMCellFromCordsOrThrow","SELECTION_INSERT_CLIPBOARD_NODES_COMMAND","selectionPayload","anchorAndFocus","isTableSelection","isRangeSelection","isSelectionInsideOfGrid","newGrid","newGridRows","newColumnCount","getFirstChildOrThrow","newRowCount","gridCellNode","gridRowNode","getIndexWithinParent","gridRowNodes","newRowIdx","newAnchorCellKey","newFocusCellKey","currentGridRowNode","newGridRowNode","gridCellNodes","newGridCellNodes","newColumnIdx","currentGridCellNode","newGridCellNode","originalChildren","$isTextNode","newTableSelection","prevSelection","$getPreviousSelection","$findTableNode","isPartialyWithinTable","isWithinTable","newSelection","$addHighlightStyleToTable","$removeHighlightStyleToTable","getTableObserverFromTableElement","_cell","parentNode","nodeMame","hasBackgroundColor","highlighted","sibling","nextSibling","parentSibling","selectedCellNodes","$forEachTableCell","has","$addHighlightToDOM","$removeHighlightFromDOM","getAttribute","removeAttribute","cb","direction","isForward","selectTableCellNode","getCellNodeFromCordsOrThrow","selectNext","adjustFocusNodeInDirection","fromStart","BROWSER_BLUE_RGB","setProperty","removeProperty","anchorCellTable","anchorCellTableElement","anchorCellDom","anchorDOM","edgeSelectionRect","getBoundingClientRect","rangeCount","range","getRangeAt","edgeChild","getLastChild","edgeChildDOM","edgeRect","isExiting","top","bottom","cords","tableNodeFromSelection","cordsAnchor","stopImmediatePropagation","TableNode","_node","convertTableElement","_serializedNode","after","newElement","cloneNode","colGroup","tBody","isHTMLElement","firstRow","col","replaceChildren","canExtractContents","getDOMCellFromCords","canSelectBefore","$getElementForTableNode","_domNode","exports"],"sources":["/media/ks/My thing/test/textditor/node_modules/@lexical/table/LexicalTable.dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar utils = require('@lexical/utils');\nvar lexical = require('lexical');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst PIXEL_VALUE_REG_EXP = /^(\\d+(?:\\.\\d+)?)px$/;\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst TableCellHeaderStates = {\n  BOTH: 3,\n  COLUMN: 2,\n  NO_STATUS: 0,\n  ROW: 1\n};\n/** @noInheritDoc */\nclass TableCellNode extends lexical.ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'tablecell';\n  }\n  static clone(node) {\n    const cellNode = new TableCellNode(node.__headerState, node.__colSpan, node.__width, node.__key);\n    cellNode.__rowSpan = node.__rowSpan;\n    cellNode.__backgroundColor = node.__backgroundColor;\n    return cellNode;\n  }\n  static importDOM() {\n    return {\n      td: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      }),\n      th: node => ({\n        conversion: convertTableCellNodeElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    const colSpan = serializedNode.colSpan || 1;\n    const rowSpan = serializedNode.rowSpan || 1;\n    const cellNode = $createTableCellNode(serializedNode.headerState, colSpan, serializedNode.width || undefined);\n    cellNode.__rowSpan = rowSpan;\n    cellNode.__backgroundColor = serializedNode.backgroundColor || null;\n    return cellNode;\n  }\n  constructor(headerState = TableCellHeaderStates.NO_STATUS, colSpan = 1, width, key) {\n    super(key);\n    this.__colSpan = colSpan;\n    this.__rowSpan = 1;\n    this.__headerState = headerState;\n    this.__width = width;\n    this.__backgroundColor = null;\n  }\n  createDOM(config) {\n    const element = document.createElement(this.getTag());\n    if (this.__width) {\n      element.style.width = `${this.__width}px`;\n    }\n    if (this.__colSpan > 1) {\n      element.colSpan = this.__colSpan;\n    }\n    if (this.__rowSpan > 1) {\n      element.rowSpan = this.__rowSpan;\n    }\n    if (this.__backgroundColor !== null) {\n      element.style.backgroundColor = this.__backgroundColor;\n    }\n    utils.addClassNamesToElement(element, config.theme.tableCell, this.hasHeader() && config.theme.tableCellHeader);\n    return element;\n  }\n  exportDOM(editor) {\n    const {\n      element\n    } = super.exportDOM(editor);\n    if (element) {\n      const element_ = element;\n      const maxWidth = 700;\n      const colCount = this.getParentOrThrow().getChildrenSize();\n      element_.style.border = '1px solid black';\n      if (this.__colSpan > 1) {\n        element_.colSpan = this.__colSpan;\n      }\n      if (this.__rowSpan > 1) {\n        element_.rowSpan = this.__rowSpan;\n      }\n      element_.style.width = `${this.getWidth() || Math.max(90, maxWidth / colCount)}px`;\n      element_.style.verticalAlign = 'top';\n      element_.style.textAlign = 'start';\n      const backgroundColor = this.getBackgroundColor();\n      if (backgroundColor !== null) {\n        element_.style.backgroundColor = backgroundColor;\n      } else if (this.hasHeader()) {\n        element_.style.backgroundColor = '#f2f3f5';\n      }\n    }\n    return {\n      element\n    };\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      backgroundColor: this.getBackgroundColor(),\n      colSpan: this.__colSpan,\n      headerState: this.__headerState,\n      rowSpan: this.__rowSpan,\n      type: 'tablecell',\n      width: this.getWidth()\n    };\n  }\n  getColSpan() {\n    return this.__colSpan;\n  }\n  setColSpan(colSpan) {\n    this.getWritable().__colSpan = colSpan;\n    return this;\n  }\n  getRowSpan() {\n    return this.__rowSpan;\n  }\n  setRowSpan(rowSpan) {\n    this.getWritable().__rowSpan = rowSpan;\n    return this;\n  }\n  getTag() {\n    return this.hasHeader() ? 'th' : 'td';\n  }\n  setHeaderStyles(headerState) {\n    const self = this.getWritable();\n    self.__headerState = headerState;\n    return this.__headerState;\n  }\n  getHeaderStyles() {\n    return this.getLatest().__headerState;\n  }\n  setWidth(width) {\n    const self = this.getWritable();\n    self.__width = width;\n    return this.__width;\n  }\n  getWidth() {\n    return this.getLatest().__width;\n  }\n  getBackgroundColor() {\n    return this.getLatest().__backgroundColor;\n  }\n  setBackgroundColor(newBackgroundColor) {\n    this.getWritable().__backgroundColor = newBackgroundColor;\n  }\n  toggleHeaderStyle(headerStateToToggle) {\n    const self = this.getWritable();\n    if ((self.__headerState & headerStateToToggle) === headerStateToToggle) {\n      self.__headerState -= headerStateToToggle;\n    } else {\n      self.__headerState += headerStateToToggle;\n    }\n    return self;\n  }\n  hasHeaderState(headerState) {\n    return (this.getHeaderStyles() & headerState) === headerState;\n  }\n  hasHeader() {\n    return this.getLatest().__headerState !== TableCellHeaderStates.NO_STATUS;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__headerState !== this.__headerState || prevNode.__width !== this.__width || prevNode.__colSpan !== this.__colSpan || prevNode.__rowSpan !== this.__rowSpan || prevNode.__backgroundColor !== this.__backgroundColor;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  collapseAtStart() {\n    return true;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction convertTableCellNodeElement(domNode) {\n  const domNode_ = domNode;\n  const nodeName = domNode.nodeName.toLowerCase();\n  let width = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.width)) {\n    width = parseFloat(domNode_.style.width);\n  }\n  const tableCellNode = $createTableCellNode(nodeName === 'th' ? TableCellHeaderStates.ROW : TableCellHeaderStates.NO_STATUS, domNode_.colSpan, width);\n  tableCellNode.__rowSpan = domNode_.rowSpan;\n  const backgroundColor = domNode_.style.backgroundColor;\n  if (backgroundColor !== '') {\n    tableCellNode.__backgroundColor = backgroundColor;\n  }\n  return {\n    forChild: (lexicalNode, parentLexicalNode) => {\n      if ($isTableCellNode(parentLexicalNode) && !lexical.$isElementNode(lexicalNode)) {\n        const paragraphNode = lexical.$createParagraphNode();\n        if (lexical.$isLineBreakNode(lexicalNode) && lexicalNode.getTextContent() === '\\n') {\n          return null;\n        }\n        paragraphNode.append(lexicalNode);\n        return paragraphNode;\n      }\n      return lexicalNode;\n    },\n    node: tableCellNode\n  };\n}\nfunction $createTableCellNode(headerState, colSpan = 1, width) {\n  return lexical.$applyNodeReplacement(new TableCellNode(headerState, colSpan, width));\n}\nfunction $isTableCellNode(node) {\n  return node instanceof TableCellNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst INSERT_TABLE_COMMAND = lexical.createCommand('INSERT_TABLE_COMMAND');\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TableRowNode extends lexical.ElementNode {\n  /** @internal */\n\n  static getType() {\n    return 'tablerow';\n  }\n  static clone(node) {\n    return new TableRowNode(node.__height, node.__key);\n  }\n  static importDOM() {\n    return {\n      tr: node => ({\n        conversion: convertTableRowElement,\n        priority: 0\n      })\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createTableRowNode(serializedNode.height);\n  }\n  constructor(height, key) {\n    super(key);\n    this.__height = height;\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'tablerow',\n      version: 1\n    };\n  }\n  createDOM(config) {\n    const element = document.createElement('tr');\n    if (this.__height) {\n      element.style.height = `${this.__height}px`;\n    }\n    utils.addClassNamesToElement(element, config.theme.tableRow);\n    return element;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  setHeight(height) {\n    const self = this.getWritable();\n    self.__height = height;\n    return this.__height;\n  }\n  getHeight() {\n    return this.getLatest().__height;\n  }\n  updateDOM(prevNode) {\n    return prevNode.__height !== this.__height;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction convertTableRowElement(domNode) {\n  const domNode_ = domNode;\n  let height = undefined;\n  if (PIXEL_VALUE_REG_EXP.test(domNode_.style.height)) {\n    height = parseFloat(domNode_.style.height);\n  }\n  return {\n    node: $createTableRowNode(height)\n  };\n}\nfunction $createTableRowNode(height) {\n  return lexical.$applyNodeReplacement(new TableRowNode(height));\n}\nfunction $isTableRowNode(node) {\n  return node instanceof TableRowNode;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst CAN_USE_DOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nfunction $createTableNodeWithDimensions(rowCount, columnCount, includeHeaders = true) {\n  const tableNode = $createTableNode();\n  for (let iRow = 0; iRow < rowCount; iRow++) {\n    const tableRowNode = $createTableRowNode();\n    for (let iColumn = 0; iColumn < columnCount; iColumn++) {\n      let headerState = TableCellHeaderStates.NO_STATUS;\n      if (typeof includeHeaders === 'object') {\n        if (iRow === 0 && includeHeaders.rows) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0 && includeHeaders.columns) headerState |= TableCellHeaderStates.COLUMN;\n      } else if (includeHeaders) {\n        if (iRow === 0) headerState |= TableCellHeaderStates.ROW;\n        if (iColumn === 0) headerState |= TableCellHeaderStates.COLUMN;\n      }\n      const tableCellNode = $createTableCellNode(headerState);\n      const paragraphNode = lexical.$createParagraphNode();\n      paragraphNode.append(lexical.$createTextNode());\n      tableCellNode.append(paragraphNode);\n      tableRowNode.append(tableCellNode);\n    }\n    tableNode.append(tableRowNode);\n  }\n  return tableNode;\n}\nfunction $getTableCellNodeFromLexicalNode(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableCellNode(n));\n  if ($isTableCellNode(node)) {\n    return node;\n  }\n  return null;\n}\nfunction $getTableRowNodeFromTableCellNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableRowNode(n));\n  if ($isTableRowNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table row.');\n}\nfunction $getTableNodeFromLexicalNodeOrThrow(startingNode) {\n  const node = utils.$findMatchingParent(startingNode, n => $isTableNode(n));\n  if ($isTableNode(node)) {\n    return node;\n  }\n  throw new Error('Expected table cell to be inside of table.');\n}\nfunction $getTableRowIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableRowNode);\n  return tableNode.getChildren().findIndex(n => n.is(tableRowNode));\n}\nfunction $getTableColumnIndexFromTableCellNode(tableCellNode) {\n  const tableRowNode = $getTableRowNodeFromTableCellNodeOrThrow(tableCellNode);\n  return tableRowNode.getChildren().findIndex(n => n.is(tableCellNode));\n}\nfunction $getTableCellSiblingsFromTableCellNode(tableCellNode, table) {\n  const tableNode = $getTableNodeFromLexicalNodeOrThrow(tableCellNode);\n  const {\n    x,\n    y\n  } = tableNode.getCordsFromCellNode(tableCellNode, table);\n  return {\n    above: tableNode.getCellNodeFromCords(x, y - 1, table),\n    below: tableNode.getCellNodeFromCords(x, y + 1, table),\n    left: tableNode.getCellNodeFromCords(x - 1, y, table),\n    right: tableNode.getCellNodeFromCords(x + 1, y, table)\n  };\n}\nfunction $removeTableRowAtIndex(tableNode, indexToDelete) {\n  const tableRows = tableNode.getChildren();\n  if (indexToDelete >= tableRows.length || indexToDelete < 0) {\n    throw new Error('Expected table cell to be inside of table row.');\n  }\n  const targetRowNode = tableRows[indexToDelete];\n  targetRowNode.remove();\n  return tableNode;\n}\nfunction $insertTableRow(tableNode, targetIndex, shouldInsertAfter = true, rowCount, table) {\n  const tableRows = tableNode.getChildren();\n  if (targetIndex >= tableRows.length || targetIndex < 0) {\n    throw new Error('Table row target index out of range');\n  }\n  const targetRowNode = tableRows[targetIndex];\n  if ($isTableRowNode(targetRowNode)) {\n    for (let r = 0; r < rowCount; r++) {\n      const tableRowCells = targetRowNode.getChildren();\n      const tableColumnCount = tableRowCells.length;\n      const newTableRowNode = $createTableRowNode();\n      for (let c = 0; c < tableColumnCount; c++) {\n        const tableCellFromTargetRow = tableRowCells[c];\n        if (!$isTableCellNode(tableCellFromTargetRow)) {\n          throw Error(`Expected table cell`);\n        }\n        const {\n          above,\n          below\n        } = $getTableCellSiblingsFromTableCellNode(tableCellFromTargetRow, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        const width = above && above.getWidth() || below && below.getWidth() || undefined;\n        if (above && above.hasHeaderState(TableCellHeaderStates.COLUMN) || below && below.hasHeaderState(TableCellHeaderStates.COLUMN)) {\n          headerState |= TableCellHeaderStates.COLUMN;\n        }\n        const tableCellNode = $createTableCellNode(headerState, 1, width);\n        tableCellNode.append(lexical.$createParagraphNode());\n        newTableRowNode.append(tableCellNode);\n      }\n      if (shouldInsertAfter) {\n        targetRowNode.insertAfter(newTableRowNode);\n      } else {\n        targetRowNode.insertBefore(newTableRowNode);\n      }\n    }\n  } else {\n    throw new Error('Row before insertion index does not exist.');\n  }\n  return tableNode;\n}\nconst getHeaderState = (currentState, possibleState) => {\n  if (currentState === TableCellHeaderStates.BOTH || currentState === possibleState) {\n    return possibleState;\n  }\n  return TableCellHeaderStates.NO_STATUS;\n};\nfunction $insertTableRow__EXPERIMENTAL(insertAfter = true) {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const focus = selection.focus.getNode();\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [gridMap, focusCellMap] = $computeTableMap(grid, focusCell, focusCell);\n  const columnCount = gridMap[0].length;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  if (insertAfter) {\n    const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n    const focusEndRowMap = gridMap[focusEndRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusEndRowMap[i];\n      if (startRow + cell.__rowSpan - 1 <= focusEndRow) {\n        const currentCell = focusEndRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append(lexical.$createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const focusEndRowNode = grid.getChildAtIndex(focusEndRow);\n    if (!$isTableRowNode(focusEndRowNode)) {\n      throw Error(`focusEndRow is not a TableRowNode`);\n    }\n    focusEndRowNode.insertAfter(newRow);\n  } else {\n    const focusStartRowMap = gridMap[focusStartRow];\n    const newRow = $createTableRowNode();\n    for (let i = 0; i < columnCount; i++) {\n      const {\n        cell,\n        startRow\n      } = focusStartRowMap[i];\n      if (startRow === focusStartRow) {\n        const currentCell = focusStartRowMap[i].cell;\n        const currentCellHeaderState = currentCell.__headerState;\n        const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.COLUMN);\n        newRow.append($createTableCellNode(headerState).append(lexical.$createParagraphNode()));\n      } else {\n        cell.setRowSpan(cell.__rowSpan + 1);\n      }\n    }\n    const focusStartRowNode = grid.getChildAtIndex(focusStartRow);\n    if (!$isTableRowNode(focusStartRowNode)) {\n      throw Error(`focusEndRow is not a TableRowNode`);\n    }\n    focusStartRowNode.insertBefore(newRow);\n  }\n}\nfunction $insertTableColumn(tableNode, targetIndex, shouldInsertAfter = true, columnCount, table) {\n  const tableRows = tableNode.getChildren();\n  const tableCellsToBeInserted = [];\n  for (let r = 0; r < tableRows.length; r++) {\n    const currentTableRowNode = tableRows[r];\n    if ($isTableRowNode(currentTableRowNode)) {\n      for (let c = 0; c < columnCount; c++) {\n        const tableRowChildren = currentTableRowNode.getChildren();\n        if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n          throw new Error('Table column target index out of range');\n        }\n        const targetCell = tableRowChildren[targetIndex];\n        if (!$isTableCellNode(targetCell)) {\n          throw Error(`Expected table cell`);\n        }\n        const {\n          left,\n          right\n        } = $getTableCellSiblingsFromTableCellNode(targetCell, table);\n        let headerState = TableCellHeaderStates.NO_STATUS;\n        if (left && left.hasHeaderState(TableCellHeaderStates.ROW) || right && right.hasHeaderState(TableCellHeaderStates.ROW)) {\n          headerState |= TableCellHeaderStates.ROW;\n        }\n        const newTableCell = $createTableCellNode(headerState);\n        newTableCell.append(lexical.$createParagraphNode());\n        tableCellsToBeInserted.push({\n          newTableCell,\n          targetCell\n        });\n      }\n    }\n  }\n  tableCellsToBeInserted.forEach(({\n    newTableCell,\n    targetCell\n  }) => {\n    if (shouldInsertAfter) {\n      targetCell.insertAfter(newTableCell);\n    } else {\n      targetCell.insertBefore(newTableCell);\n    }\n  });\n  return tableNode;\n}\nfunction $insertTableColumn__EXPERIMENTAL(insertAfter = true) {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell] = $getNodeTriplet(anchor);\n  const [focusCell,, grid] = $getNodeTriplet(focus);\n  const [gridMap, focusCellMap, anchorCellMap] = $computeTableMap(grid, focusCell, anchorCell);\n  const rowCount = gridMap.length;\n  const startColumn = insertAfter ? Math.max(focusCellMap.startColumn, anchorCellMap.startColumn) : Math.min(focusCellMap.startColumn, anchorCellMap.startColumn);\n  const insertAfterColumn = insertAfter ? startColumn + focusCell.__colSpan - 1 : startColumn - 1;\n  const gridFirstChild = grid.getFirstChild();\n  if (!$isTableRowNode(gridFirstChild)) {\n    throw Error(`Expected firstTable child to be a row`);\n  }\n  let firstInsertedCell = null;\n  function $createTableCellNodeForInsertTableColumn(headerState = TableCellHeaderStates.NO_STATUS) {\n    const cell = $createTableCellNode(headerState).append(lexical.$createParagraphNode());\n    if (firstInsertedCell === null) {\n      firstInsertedCell = cell;\n    }\n    return cell;\n  }\n  let loopRow = gridFirstChild;\n  rowLoop: for (let i = 0; i < rowCount; i++) {\n    if (i !== 0) {\n      const currentRow = loopRow.getNextSibling();\n      if (!$isTableRowNode(currentRow)) {\n        throw Error(`Expected row nextSibling to be a row`);\n      }\n      loopRow = currentRow;\n    }\n    const rowMap = gridMap[i];\n    const currentCellHeaderState = rowMap[insertAfterColumn < 0 ? 0 : insertAfterColumn].cell.__headerState;\n    const headerState = getHeaderState(currentCellHeaderState, TableCellHeaderStates.ROW);\n    if (insertAfterColumn < 0) {\n      $insertFirst(loopRow, $createTableCellNodeForInsertTableColumn(headerState));\n      continue;\n    }\n    const {\n      cell: currentCell,\n      startColumn: currentStartColumn,\n      startRow: currentStartRow\n    } = rowMap[insertAfterColumn];\n    if (currentStartColumn + currentCell.__colSpan - 1 <= insertAfterColumn) {\n      let insertAfterCell = currentCell;\n      let insertAfterCellRowStart = currentStartRow;\n      let prevCellIndex = insertAfterColumn;\n      while (insertAfterCellRowStart !== i && insertAfterCell.__rowSpan > 1) {\n        prevCellIndex -= currentCell.__colSpan;\n        if (prevCellIndex >= 0) {\n          const {\n            cell: cell_,\n            startRow: startRow_\n          } = rowMap[prevCellIndex];\n          insertAfterCell = cell_;\n          insertAfterCellRowStart = startRow_;\n        } else {\n          loopRow.append($createTableCellNodeForInsertTableColumn(headerState));\n          continue rowLoop;\n        }\n      }\n      insertAfterCell.insertAfter($createTableCellNodeForInsertTableColumn(headerState));\n    } else {\n      currentCell.setColSpan(currentCell.__colSpan + 1);\n    }\n  }\n  if (firstInsertedCell !== null) {\n    $moveSelectionToCell(firstInsertedCell);\n  }\n}\nfunction $deleteTableColumn(tableNode, targetIndex) {\n  const tableRows = tableNode.getChildren();\n  for (let i = 0; i < tableRows.length; i++) {\n    const currentTableRowNode = tableRows[i];\n    if ($isTableRowNode(currentTableRowNode)) {\n      const tableRowChildren = currentTableRowNode.getChildren();\n      if (targetIndex >= tableRowChildren.length || targetIndex < 0) {\n        throw new Error('Table column target index out of range');\n      }\n      tableRowChildren[targetIndex].remove();\n    }\n  }\n  return tableNode;\n}\nfunction $deleteTableRow__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startRow: anchorStartRow\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow\n  } = focusCellMap;\n  const focusEndRow = focusStartRow + focusCell.__rowSpan - 1;\n  if (gridMap.length === focusEndRow - anchorStartRow + 1) {\n    // Empty grid\n    grid.remove();\n    return;\n  }\n  const columnCount = gridMap[0].length;\n  const nextRow = gridMap[focusEndRow + 1];\n  const nextRowNode = grid.getChildAtIndex(focusEndRow + 1);\n  for (let row = focusEndRow; row >= anchorStartRow; row--) {\n    for (let column = columnCount - 1; column >= 0; column--) {\n      const {\n        cell,\n        startRow: cellStartRow,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn !== column) {\n        // Don't repeat work for the same Cell\n        continue;\n      }\n      // Rows overflowing top have to be trimmed\n      if (row === anchorStartRow && cellStartRow < anchorStartRow) {\n        cell.setRowSpan(cell.__rowSpan - (cellStartRow - anchorStartRow));\n      }\n      // Rows overflowing bottom have to be trimmed and moved to the next row\n      if (cellStartRow >= anchorStartRow && cellStartRow + cell.__rowSpan - 1 > focusEndRow) {\n        cell.setRowSpan(cell.__rowSpan - (focusEndRow - cellStartRow + 1));\n        if (!(nextRowNode !== null)) {\n          throw Error(`Expected nextRowNode not to be null`);\n        }\n        if (column === 0) {\n          $insertFirst(nextRowNode, cell);\n        } else {\n          const {\n            cell: previousCell\n          } = nextRow[column - 1];\n          previousCell.insertAfter(cell);\n        }\n      }\n    }\n    const rowNode = grid.getChildAtIndex(row);\n    if (!$isTableRowNode(rowNode)) {\n      throw Error(`Expected GridNode childAtIndex(${String(row)}) to be RowNode`);\n    }\n    rowNode.remove();\n  }\n  if (nextRow !== undefined) {\n    const {\n      cell\n    } = nextRow[0];\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = gridMap[anchorStartRow - 1];\n    const {\n      cell\n    } = previousRow[0];\n    $moveSelectionToCell(cell);\n  }\n}\nfunction $deleteTableColumn__EXPERIMENTAL() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const focus = selection.focus.getNode();\n  const [anchorCell,, grid] = $getNodeTriplet(anchor);\n  const [focusCell] = $getNodeTriplet(focus);\n  const [gridMap, anchorCellMap, focusCellMap] = $computeTableMap(grid, anchorCell, focusCell);\n  const {\n    startColumn: anchorStartColumn\n  } = anchorCellMap;\n  const {\n    startRow: focusStartRow,\n    startColumn: focusStartColumn\n  } = focusCellMap;\n  const startColumn = Math.min(anchorStartColumn, focusStartColumn);\n  const endColumn = Math.max(anchorStartColumn + anchorCell.__colSpan - 1, focusStartColumn + focusCell.__colSpan - 1);\n  const selectedColumnCount = endColumn - startColumn + 1;\n  const columnCount = gridMap[0].length;\n  if (columnCount === endColumn - startColumn + 1) {\n    // Empty grid\n    grid.selectPrevious();\n    grid.remove();\n    return;\n  }\n  const rowCount = gridMap.length;\n  for (let row = 0; row < rowCount; row++) {\n    for (let column = startColumn; column <= endColumn; column++) {\n      const {\n        cell,\n        startColumn: cellStartColumn\n      } = gridMap[row][column];\n      if (cellStartColumn < startColumn) {\n        if (column === startColumn) {\n          const overflowLeft = startColumn - cellStartColumn;\n          // Overflowing left\n          cell.setColSpan(cell.__colSpan -\n          // Possible overflow right too\n          Math.min(selectedColumnCount, cell.__colSpan - overflowLeft));\n        }\n      } else if (cellStartColumn + cell.__colSpan - 1 > endColumn) {\n        if (column === endColumn) {\n          // Overflowing right\n          const inSelectedArea = endColumn - cellStartColumn + 1;\n          cell.setColSpan(cell.__colSpan - inSelectedArea);\n        }\n      } else {\n        cell.remove();\n      }\n    }\n  }\n  const focusRowMap = gridMap[focusStartRow];\n  const nextColumn = focusRowMap[focusStartColumn + focusCell.__colSpan];\n  if (nextColumn !== undefined) {\n    const {\n      cell\n    } = nextColumn;\n    $moveSelectionToCell(cell);\n  } else {\n    const previousRow = focusRowMap[focusStartColumn - 1];\n    const {\n      cell\n    } = previousRow;\n    $moveSelectionToCell(cell);\n  }\n}\nfunction $moveSelectionToCell(cell) {\n  const firstDescendant = cell.getFirstDescendant();\n  if (firstDescendant == null) {\n    cell.selectStart();\n  } else {\n    firstDescendant.getParentOrThrow().selectStart();\n  }\n}\nfunction $insertFirst(parent, node) {\n  const firstChild = parent.getFirstChild();\n  if (firstChild !== null) {\n    firstChild.insertBefore(node);\n  } else {\n    parent.append(node);\n  }\n}\nfunction $unmergeCell() {\n  const selection = lexical.$getSelection();\n  if (!(lexical.$isRangeSelection(selection) || $isTableSelection(selection))) {\n    throw Error(`Expected a RangeSelection or GridSelection`);\n  }\n  const anchor = selection.anchor.getNode();\n  const [cell, row, grid] = $getNodeTriplet(anchor);\n  const colSpan = cell.__colSpan;\n  const rowSpan = cell.__rowSpan;\n  if (colSpan > 1) {\n    for (let i = 1; i < colSpan; i++) {\n      cell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n    }\n    cell.setColSpan(1);\n  }\n  if (rowSpan > 1) {\n    const [map, cellMap] = $computeTableMap(grid, cell, cell);\n    const {\n      startColumn,\n      startRow\n    } = cellMap;\n    let currentRowNode;\n    for (let i = 1; i < rowSpan; i++) {\n      const currentRow = startRow + i;\n      const currentRowMap = map[currentRow];\n      currentRowNode = (currentRowNode || row).getNextSibling();\n      if (!$isTableRowNode(currentRowNode)) {\n        throw Error(`Expected row next sibling to be a row`);\n      }\n      let insertAfterCell = null;\n      for (let column = 0; column < startColumn; column++) {\n        const currentCellMap = currentRowMap[column];\n        const currentCell = currentCellMap.cell;\n        if (currentCellMap.startRow === currentRow) {\n          insertAfterCell = currentCell;\n        }\n        if (currentCell.__colSpan > 1) {\n          column += currentCell.__colSpan - 1;\n        }\n      }\n      if (insertAfterCell === null) {\n        for (let j = 0; j < colSpan; j++) {\n          $insertFirst(currentRowNode, $createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      } else {\n        for (let j = 0; j < colSpan; j++) {\n          insertAfterCell.insertAfter($createTableCellNode(TableCellHeaderStates.NO_STATUS));\n        }\n      }\n    }\n    cell.setRowSpan(1);\n  }\n}\nfunction $computeTableMap(grid, cellA, cellB) {\n  const tableMap = [];\n  let cellAValue = null;\n  let cellBValue = null;\n  function write(startRow, startColumn, cell) {\n    const value = {\n      cell,\n      startColumn,\n      startRow\n    };\n    const rowSpan = cell.__rowSpan;\n    const colSpan = cell.__colSpan;\n    for (let i = 0; i < rowSpan; i++) {\n      if (tableMap[startRow + i] === undefined) {\n        tableMap[startRow + i] = [];\n      }\n      for (let j = 0; j < colSpan; j++) {\n        tableMap[startRow + i][startColumn + j] = value;\n      }\n    }\n    if (cellA.is(cell)) {\n      cellAValue = value;\n    }\n    if (cellB.is(cell)) {\n      cellBValue = value;\n    }\n  }\n  function isEmpty(row, column) {\n    return tableMap[row] === undefined || tableMap[row][column] === undefined;\n  }\n  const gridChildren = grid.getChildren();\n  for (let i = 0; i < gridChildren.length; i++) {\n    const row = gridChildren[i];\n    if (!$isTableRowNode(row)) {\n      throw Error(`Expected GridNode children to be TableRowNode`);\n    }\n    const rowChildren = row.getChildren();\n    let j = 0;\n    for (const cell of rowChildren) {\n      if (!$isTableCellNode(cell)) {\n        throw Error(`Expected TableRowNode children to be TableCellNode`);\n      }\n      while (!isEmpty(i, j)) {\n        j++;\n      }\n      write(i, j, cell);\n      j += cell.__colSpan;\n    }\n  }\n  if (!(cellAValue !== null)) {\n    throw Error(`Anchor not found in Grid`);\n  }\n  if (!(cellBValue !== null)) {\n    throw Error(`Focus not found in Grid`);\n  }\n  return [tableMap, cellAValue, cellBValue];\n}\nfunction $getNodeTriplet(source) {\n  let cell;\n  if (source instanceof TableCellNode) {\n    cell = source;\n  } else if ('__type' in source) {\n    const cell_ = utils.$findMatchingParent(source, $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      throw Error(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  } else {\n    const cell_ = utils.$findMatchingParent(source.getNode(), $isTableCellNode);\n    if (!$isTableCellNode(cell_)) {\n      throw Error(`Expected to find a parent TableCellNode`);\n    }\n    cell = cell_;\n  }\n  const row = cell.getParent();\n  if (!$isTableRowNode(row)) {\n    throw Error(`Expected TableCellNode to have a parent TableRowNode`);\n  }\n  const grid = row.getParent();\n  if (!$isTableNode(grid)) {\n    throw Error(`Expected TableRowNode to have a parent GridNode`);\n  }\n  return [cell, row, grid];\n}\nfunction $getTableCellNodeRect(tableCellNode) {\n  const [cellNode,, gridNode] = $getNodeTriplet(tableCellNode);\n  const rows = gridNode.getChildren();\n  const rowCount = rows.length;\n  const columnCount = rows[0].getChildren().length;\n\n  // Create a matrix of the same size as the table to track the position of each cell\n  const cellMatrix = new Array(rowCount);\n  for (let i = 0; i < rowCount; i++) {\n    cellMatrix[i] = new Array(columnCount);\n  }\n  for (let rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n    const row = rows[rowIndex];\n    const cells = row.getChildren();\n    let columnIndex = 0;\n    for (let cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n      // Find the next available position in the matrix, skip the position of merged cells\n      while (cellMatrix[rowIndex][columnIndex]) {\n        columnIndex++;\n      }\n      const cell = cells[cellIndex];\n      const rowSpan = cell.__rowSpan || 1;\n      const colSpan = cell.__colSpan || 1;\n\n      // Put the cell into the corresponding position in the matrix\n      for (let i = 0; i < rowSpan; i++) {\n        for (let j = 0; j < colSpan; j++) {\n          cellMatrix[rowIndex + i][columnIndex + j] = cell;\n        }\n      }\n\n      // Return to the original index, row span and column span of the cell.\n      if (cellNode === cell) {\n        return {\n          colSpan,\n          columnIndex,\n          rowIndex,\n          rowSpan\n        };\n      }\n      columnIndex += colSpan;\n    }\n  }\n  return null;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nclass TableSelection {\n  constructor(tableKey, anchor, focus) {\n    this.anchor = anchor;\n    this.focus = focus;\n    anchor._selection = this;\n    focus._selection = this;\n    this._cachedNodes = null;\n    this.dirty = false;\n    this.tableKey = tableKey;\n  }\n  getStartEndPoints() {\n    return [this.anchor, this.focus];\n  }\n\n  /**\n   * Returns whether the Selection is \"backwards\", meaning the focus\n   * logically precedes the anchor in the EditorState.\n   * @returns true if the Selection is backwards, false otherwise.\n   */\n  isBackward() {\n    return this.focus.isBefore(this.anchor);\n  }\n  getCachedNodes() {\n    return this._cachedNodes;\n  }\n  setCachedNodes(nodes) {\n    this._cachedNodes = nodes;\n  }\n  is(selection) {\n    if (!$isTableSelection(selection)) {\n      return false;\n    }\n    return this.tableKey === selection.tableKey && this.anchor.is(selection.anchor) && this.focus.is(selection.focus);\n  }\n  set(tableKey, anchorCellKey, focusCellKey) {\n    this.dirty = true;\n    this.tableKey = tableKey;\n    this.anchor.key = anchorCellKey;\n    this.focus.key = focusCellKey;\n    this._cachedNodes = null;\n  }\n  clone() {\n    return new TableSelection(this.tableKey, this.anchor, this.focus);\n  }\n  isCollapsed() {\n    return false;\n  }\n  extract() {\n    return this.getNodes();\n  }\n  insertRawText(text) {\n    // Do nothing?\n  }\n  insertText() {\n    // Do nothing?\n  }\n  insertNodes(nodes) {\n    const focusNode = this.focus.getNode();\n    if (!lexical.$isElementNode(focusNode)) {\n      throw Error(`Expected TableSelection focus to be an ElementNode`);\n    }\n    const selection = lexical.$normalizeSelection__EXPERIMENTAL(focusNode.select(0, focusNode.getChildrenSize()));\n    selection.insertNodes(nodes);\n  }\n\n  // TODO Deprecate this method. It's confusing when used with colspan|rowspan\n  getShape() {\n    const anchorCellNode = lexical.$getNodeByKey(this.anchor.key);\n    if (!$isTableCellNode(anchorCellNode)) {\n      throw Error(`Expected TableSelection anchor to be (or a child of) TableCellNode`);\n    }\n    const anchorCellNodeRect = $getTableCellNodeRect(anchorCellNode);\n    if (!(anchorCellNodeRect !== null)) {\n      throw Error(`getCellRect: expected to find AnchorNode`);\n    }\n    const focusCellNode = lexical.$getNodeByKey(this.focus.key);\n    if (!$isTableCellNode(focusCellNode)) {\n      throw Error(`Expected TableSelection focus to be (or a child of) TableCellNode`);\n    }\n    const focusCellNodeRect = $getTableCellNodeRect(focusCellNode);\n    if (!(focusCellNodeRect !== null)) {\n      throw Error(`getCellRect: expected to find focusCellNode`);\n    }\n    const startX = Math.min(anchorCellNodeRect.columnIndex, focusCellNodeRect.columnIndex);\n    const stopX = Math.max(anchorCellNodeRect.columnIndex, focusCellNodeRect.columnIndex);\n    const startY = Math.min(anchorCellNodeRect.rowIndex, focusCellNodeRect.rowIndex);\n    const stopY = Math.max(anchorCellNodeRect.rowIndex, focusCellNodeRect.rowIndex);\n    return {\n      fromX: Math.min(startX, stopX),\n      fromY: Math.min(startY, stopY),\n      toX: Math.max(startX, stopX),\n      toY: Math.max(startY, stopY)\n    };\n  }\n  getNodes() {\n    const cachedNodes = this._cachedNodes;\n    if (cachedNodes !== null) {\n      return cachedNodes;\n    }\n    const anchorNode = this.anchor.getNode();\n    const focusNode = this.focus.getNode();\n    const anchorCell = utils.$findMatchingParent(anchorNode, $isTableCellNode);\n    // todo replace with triplet\n    const focusCell = utils.$findMatchingParent(focusNode, $isTableCellNode);\n    if (!$isTableCellNode(anchorCell)) {\n      throw Error(`Expected TableSelection anchor to be (or a child of) TableCellNode`);\n    }\n    if (!$isTableCellNode(focusCell)) {\n      throw Error(`Expected TableSelection focus to be (or a child of) TableCellNode`);\n    }\n    const anchorRow = anchorCell.getParent();\n    if (!$isTableRowNode(anchorRow)) {\n      throw Error(`Expected anchorCell to have a parent TableRowNode`);\n    }\n    const tableNode = anchorRow.getParent();\n    if (!$isTableNode(tableNode)) {\n      throw Error(`Expected tableNode to have a parent TableNode`);\n    }\n    const focusCellGrid = focusCell.getParents()[1];\n    if (focusCellGrid !== tableNode) {\n      if (!tableNode.isParentOf(focusCell)) {\n        // focus is on higher Grid level than anchor\n        const gridParent = tableNode.getParent();\n        if (!(gridParent != null)) {\n          throw Error(`Expected gridParent to have a parent`);\n        }\n        this.set(this.tableKey, gridParent.getKey(), focusCell.getKey());\n      } else {\n        // anchor is on higher Grid level than focus\n        const focusCellParent = focusCellGrid.getParent();\n        if (!(focusCellParent != null)) {\n          throw Error(`Expected focusCellParent to have a parent`);\n        }\n        this.set(this.tableKey, focusCell.getKey(), focusCellParent.getKey());\n      }\n      return this.getNodes();\n    }\n\n    // TODO Mapping the whole Grid every time not efficient. We need to compute the entire state only\n    // once (on load) and iterate on it as updates occur. However, to do this we need to have the\n    // ability to store a state. Killing TableSelection and moving the logic to the plugin would make\n    // this possible.\n    const [map, cellAMap, cellBMap] = $computeTableMap(tableNode, anchorCell, focusCell);\n    let minColumn = Math.min(cellAMap.startColumn, cellBMap.startColumn);\n    let minRow = Math.min(cellAMap.startRow, cellBMap.startRow);\n    let maxColumn = Math.max(cellAMap.startColumn + cellAMap.cell.__colSpan - 1, cellBMap.startColumn + cellBMap.cell.__colSpan - 1);\n    let maxRow = Math.max(cellAMap.startRow + cellAMap.cell.__rowSpan - 1, cellBMap.startRow + cellBMap.cell.__rowSpan - 1);\n    let exploredMinColumn = minColumn;\n    let exploredMinRow = minRow;\n    let exploredMaxColumn = minColumn;\n    let exploredMaxRow = minRow;\n    function expandBoundary(mapValue) {\n      const {\n        cell,\n        startColumn: cellStartColumn,\n        startRow: cellStartRow\n      } = mapValue;\n      minColumn = Math.min(minColumn, cellStartColumn);\n      minRow = Math.min(minRow, cellStartRow);\n      maxColumn = Math.max(maxColumn, cellStartColumn + cell.__colSpan - 1);\n      maxRow = Math.max(maxRow, cellStartRow + cell.__rowSpan - 1);\n    }\n    while (minColumn < exploredMinColumn || minRow < exploredMinRow || maxColumn > exploredMaxColumn || maxRow > exploredMaxRow) {\n      if (minColumn < exploredMinColumn) {\n        // Expand on the left\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const previousColumn = exploredMinColumn - 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][previousColumn]);\n        }\n        exploredMinColumn = previousColumn;\n      }\n      if (minRow < exploredMinRow) {\n        // Expand on top\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const previousRow = exploredMinRow - 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[previousRow][exploredMinColumn + i]);\n        }\n        exploredMinRow = previousRow;\n      }\n      if (maxColumn > exploredMaxColumn) {\n        // Expand on the right\n        const rowDiff = exploredMaxRow - exploredMinRow;\n        const nextColumn = exploredMaxColumn + 1;\n        for (let i = 0; i <= rowDiff; i++) {\n          expandBoundary(map[exploredMinRow + i][nextColumn]);\n        }\n        exploredMaxColumn = nextColumn;\n      }\n      if (maxRow > exploredMaxRow) {\n        // Expand on the bottom\n        const columnDiff = exploredMaxColumn - exploredMinColumn;\n        const nextRow = exploredMaxRow + 1;\n        for (let i = 0; i <= columnDiff; i++) {\n          expandBoundary(map[nextRow][exploredMinColumn + i]);\n        }\n        exploredMaxRow = nextRow;\n      }\n    }\n    const nodes = [tableNode];\n    let lastRow = null;\n    for (let i = minRow; i <= maxRow; i++) {\n      for (let j = minColumn; j <= maxColumn; j++) {\n        const {\n          cell\n        } = map[i][j];\n        const currentRow = cell.getParent();\n        if (!$isTableRowNode(currentRow)) {\n          throw Error(`Expected TableCellNode parent to be a TableRowNode`);\n        }\n        if (currentRow !== lastRow) {\n          nodes.push(currentRow);\n        }\n        nodes.push(cell, ...$getChildrenRecursively(cell));\n        lastRow = currentRow;\n      }\n    }\n    if (!lexical.isCurrentlyReadOnlyMode()) {\n      this._cachedNodes = nodes;\n    }\n    return nodes;\n  }\n  getTextContent() {\n    const nodes = this.getNodes();\n    let textContent = '';\n    for (let i = 0; i < nodes.length; i++) {\n      textContent += nodes[i].getTextContent();\n    }\n    return textContent;\n  }\n}\nfunction $isTableSelection(x) {\n  return x instanceof TableSelection;\n}\nfunction $createTableSelection() {\n  const anchor = lexical.$createPoint('root', 0, 'element');\n  const focus = lexical.$createPoint('root', 0, 'element');\n  return new TableSelection('root', anchor, focus);\n}\nfunction $getChildrenRecursively(node) {\n  const nodes = [];\n  const stack = [node];\n  while (stack.length > 0) {\n    const currentNode = stack.pop();\n    if (!(currentNode !== undefined)) {\n      throw Error(`Stack.length > 0; can't be undefined`);\n    }\n    if (lexical.$isElementNode(currentNode)) {\n      stack.unshift(...currentNode.getChildren());\n    }\n    if (currentNode !== node) {\n      nodes.push(currentNode);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst getDOMSelection = targetWindow => CAN_USE_DOM ? (targetWindow || window).getSelection() : null;\nclass TableObserver {\n  constructor(editor, tableNodeKey) {\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.listenersToRemove = new Set();\n    this.tableNodeKey = tableNodeKey;\n    this.editor = editor;\n    this.table = {\n      columns: 0,\n      domRows: [],\n      rows: 0\n    };\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.trackTable();\n  }\n  getTable() {\n    return this.table;\n  }\n  removeListeners() {\n    Array.from(this.listenersToRemove).forEach(removeListener => removeListener());\n  }\n  trackTable() {\n    const observer = new MutationObserver(records => {\n      this.editor.update(() => {\n        let gridNeedsRedraw = false;\n        for (let i = 0; i < records.length; i++) {\n          const record = records[i];\n          const target = record.target;\n          const nodeName = target.nodeName;\n          if (nodeName === 'TABLE' || nodeName === 'TR') {\n            gridNeedsRedraw = true;\n            break;\n          }\n        }\n        if (!gridNeedsRedraw) {\n          return;\n        }\n        const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n        if (!tableElement) {\n          throw new Error('Expected to find TableElement in DOM');\n        }\n        this.table = getTable(tableElement);\n      });\n    });\n    this.editor.update(() => {\n      const tableElement = this.editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      this.table = getTable(tableElement);\n      observer.observe(tableElement, {\n        childList: true,\n        subtree: true\n      });\n    });\n  }\n  clearHighlight() {\n    const editor = this.editor;\n    this.isHighlightingCells = false;\n    this.anchorX = -1;\n    this.anchorY = -1;\n    this.focusX = -1;\n    this.focusY = -1;\n    this.tableSelection = null;\n    this.anchorCellNodeKey = null;\n    this.focusCellNodeKey = null;\n    this.anchorCell = null;\n    this.focusCell = null;\n    this.hasHijackedSelectionStyles = false;\n    this.enableHighlightStyle();\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      const grid = getTable(tableElement);\n      $updateDOMForSelection(editor, grid, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n  enableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      utils.removeClassNamesFromElement(tableElement, editor._config.theme.tableSelection);\n      tableElement.classList.remove('disable-selection');\n      this.hasHijackedSelectionStyles = false;\n    });\n  }\n  disableHighlightStyle() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      utils.addClassNamesToElement(tableElement, editor._config.theme.tableSelection);\n      this.hasHijackedSelectionStyles = true;\n    });\n  }\n  updateTableTableSelection(selection) {\n    if (selection !== null && selection.tableKey === this.tableNodeKey) {\n      const editor = this.editor;\n      this.tableSelection = selection;\n      this.isHighlightingCells = true;\n      this.disableHighlightStyle();\n      $updateDOMForSelection(editor, this.table, this.tableSelection);\n    } else if (selection == null) {\n      this.clearHighlight();\n    } else {\n      this.tableNodeKey = selection.tableKey;\n      this.updateTableTableSelection(selection);\n    }\n  }\n  setFocusCellForSelection(cell, ignoreStart = false) {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const tableElement = editor.getElementByKey(this.tableNodeKey);\n      if (!tableElement) {\n        throw new Error('Expected to find TableElement in DOM');\n      }\n      const cellX = cell.x;\n      const cellY = cell.y;\n      this.focusCell = cell;\n      if (this.anchorCell !== null) {\n        const domSelection = getDOMSelection(editor._window);\n        // Collapse the selection\n        if (domSelection) {\n          domSelection.setBaseAndExtent(this.anchorCell.elem, 0, this.focusCell.elem, 0);\n        }\n      }\n      if (!this.isHighlightingCells && (this.anchorX !== cellX || this.anchorY !== cellY || ignoreStart)) {\n        this.isHighlightingCells = true;\n        this.disableHighlightStyle();\n      } else if (cellX === this.focusX && cellY === this.focusY) {\n        return;\n      }\n      this.focusX = cellX;\n      this.focusY = cellY;\n      if (this.isHighlightingCells) {\n        const focusTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n        if (this.tableSelection != null && this.anchorCellNodeKey != null && $isTableCellNode(focusTableCellNode)) {\n          const focusNodeKey = focusTableCellNode.getKey();\n          this.tableSelection = this.tableSelection.clone() || $createTableSelection();\n          this.focusCellNodeKey = focusNodeKey;\n          this.tableSelection.set(this.tableNodeKey, this.anchorCellNodeKey, this.focusCellNodeKey);\n          lexical.$setSelection(this.tableSelection);\n          editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n          $updateDOMForSelection(editor, this.table, this.tableSelection);\n        }\n      }\n    });\n  }\n  setAnchorCellForSelection(cell) {\n    this.isHighlightingCells = false;\n    this.anchorCell = cell;\n    this.anchorX = cell.x;\n    this.anchorY = cell.y;\n    this.editor.update(() => {\n      const anchorTableCellNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n      if ($isTableCellNode(anchorTableCellNode)) {\n        const anchorNodeKey = anchorTableCellNode.getKey();\n        this.tableSelection = this.tableSelection != null ? this.tableSelection.clone() : $createTableSelection();\n        this.anchorCellNodeKey = anchorNodeKey;\n      }\n    });\n  }\n  formatCells(type) {\n    this.editor.update(() => {\n      const selection = lexical.$getSelection();\n      if (!$isTableSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n      const formatSelection = lexical.$createRangeSelection();\n      const anchor = formatSelection.anchor;\n      const focus = formatSelection.focus;\n      selection.getNodes().forEach(cellNode => {\n        if ($isTableCellNode(cellNode) && cellNode.getTextContentSize() !== 0) {\n          anchor.set(cellNode.getKey(), 0, 'element');\n          focus.set(cellNode.getKey(), cellNode.getChildrenSize(), 'element');\n          formatSelection.formatText(type);\n        }\n      });\n      lexical.$setSelection(selection);\n      this.editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n  clearText() {\n    const editor = this.editor;\n    editor.update(() => {\n      const tableNode = lexical.$getNodeByKey(this.tableNodeKey);\n      if (!$isTableNode(tableNode)) {\n        throw new Error('Expected TableNode.');\n      }\n      const selection = lexical.$getSelection();\n      if (!$isTableSelection(selection)) {\n        {\n          throw Error(`Expected grid selection`);\n        }\n      }\n      const selectedNodes = selection.getNodes().filter($isTableCellNode);\n      if (selectedNodes.length === this.table.columns * this.table.rows) {\n        tableNode.selectPrevious();\n        // Delete entire table\n        tableNode.remove();\n        const rootNode = lexical.$getRoot();\n        rootNode.selectStart();\n        return;\n      }\n      selectedNodes.forEach(cellNode => {\n        if (lexical.$isElementNode(cellNode)) {\n          const paragraphNode = lexical.$createParagraphNode();\n          const textNode = lexical.$createTextNode();\n          paragraphNode.append(textNode);\n          cellNode.append(paragraphNode);\n          cellNode.getChildren().forEach(child => {\n            if (child !== paragraphNode) {\n              child.remove();\n            }\n          });\n        }\n      });\n      $updateDOMForSelection(editor, this.table, null);\n      lexical.$setSelection(null);\n      editor.dispatchCommand(lexical.SELECTION_CHANGE_COMMAND, undefined);\n    });\n  }\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst LEXICAL_ELEMENT_KEY = '__lexicalTableSelection';\nfunction applyTableHandlers(tableNode, tableElement, editor, hasTabHandler) {\n  const rootElement = editor.getRootElement();\n  if (rootElement === null) {\n    throw new Error('No root element.');\n  }\n  const tableObserver = new TableObserver(editor, tableNode.getKey());\n  const editorWindow = editor._window || window;\n  attachTableObserverToTableElement(tableElement, tableObserver);\n  tableElement.addEventListener('mousedown', event => {\n    setTimeout(() => {\n      if (event.button !== 0) {\n        return;\n      }\n      if (!editorWindow) {\n        return;\n      }\n      const anchorCell = getDOMCellFromTarget(event.target);\n      if (anchorCell !== null) {\n        stopEvent(event);\n        tableObserver.setAnchorCellForSelection(anchorCell);\n      }\n      const onMouseUp = () => {\n        editorWindow.removeEventListener('mouseup', onMouseUp);\n        editorWindow.removeEventListener('mousemove', onMouseMove);\n      };\n      const onMouseMove = moveEvent => {\n        const focusCell = getDOMCellFromTarget(moveEvent.target);\n        if (focusCell !== null && (tableObserver.anchorX !== focusCell.x || tableObserver.anchorY !== focusCell.y)) {\n          moveEvent.preventDefault();\n          tableObserver.setFocusCellForSelection(focusCell);\n        }\n      };\n      editorWindow.addEventListener('mouseup', onMouseUp);\n      editorWindow.addEventListener('mousemove', onMouseMove);\n    }, 0);\n  });\n\n  // Clear selection when clicking outside of dom.\n  const mouseDownCallback = event => {\n    if (event.button !== 0) {\n      return;\n    }\n    editor.update(() => {\n      const selection = lexical.$getSelection();\n      const target = event.target;\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey && rootElement.contains(target)) {\n        tableObserver.clearHighlight();\n      }\n    });\n  };\n  editorWindow.addEventListener('mousedown', mouseDownCallback);\n  tableObserver.listenersToRemove.add(() => editorWindow.removeEventListener('mousedown', mouseDownCallback));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_DOWN_COMMAND, event => $handleArrowKey(editor, event, 'down', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_UP_COMMAND, event => $handleArrowKey(editor, event, 'up', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_LEFT_COMMAND, event => $handleArrowKey(editor, event, 'backward', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ARROW_RIGHT_COMMAND, event => $handleArrowKey(editor, event, 'forward', tableNode, tableObserver), lexical.COMMAND_PRIORITY_HIGH));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_ESCAPE_COMMAND, event => {\n    const selection = lexical.$getSelection();\n    if ($isTableSelection(selection)) {\n      const focusCellNode = utils.$findMatchingParent(selection.focus.getNode(), $isTableCellNode);\n      if ($isTableCellNode(focusCellNode)) {\n        stopEvent(event);\n        focusCellNode.selectEnd();\n        return true;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  const deleteTextHandler = command => () => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n      const anchorNode = selection.anchor.getNode();\n      const focusNode = selection.focus.getNode();\n      const isAnchorInside = tableNode.isParentOf(anchorNode);\n      const isFocusInside = tableNode.isParentOf(focusNode);\n      const selectionContainsPartialTable = isAnchorInside && !isFocusInside || isFocusInside && !isAnchorInside;\n      if (selectionContainsPartialTable) {\n        tableObserver.clearText();\n        return true;\n      }\n      const nearestElementNode = utils.$findMatchingParent(selection.anchor.getNode(), n => lexical.$isElementNode(n));\n      const topLevelCellElementNode = nearestElementNode && utils.$findMatchingParent(nearestElementNode, n => lexical.$isElementNode(n) && $isTableCellNode(n.getParent()));\n      if (!lexical.$isElementNode(topLevelCellElementNode) || !lexical.$isElementNode(nearestElementNode)) {\n        return false;\n      }\n      if (command === lexical.DELETE_LINE_COMMAND && topLevelCellElementNode.getPreviousSibling() === null) {\n        // TODO: Fix Delete Line in Table Cells.\n        return true;\n      }\n      if (command === lexical.DELETE_CHARACTER_COMMAND || command === lexical.DELETE_WORD_COMMAND) {\n        if (selection.isCollapsed() && selection.anchor.offset === 0) {\n          if (nearestElementNode !== topLevelCellElementNode) {\n            const children = nearestElementNode.getChildren();\n            const newParagraphNode = lexical.$createParagraphNode();\n            children.forEach(child => newParagraphNode.append(child));\n            nearestElementNode.replace(newParagraphNode);\n            nearestElementNode.getWritable().__parent = tableCellNode.getKey();\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  [lexical.DELETE_WORD_COMMAND, lexical.DELETE_LINE_COMMAND, lexical.DELETE_CHARACTER_COMMAND].forEach(command => {\n    tableObserver.listenersToRemove.add(editor.registerCommand(command, deleteTextHandler(command), lexical.COMMAND_PRIORITY_CRITICAL));\n  });\n  const deleteCellHandler = event => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      event.preventDefault();\n      event.stopPropagation();\n      tableObserver.clearText();\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  };\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_BACKSPACE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_DELETE_COMMAND, deleteCellHandler, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.FORMAT_TEXT_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.formatCells(payload);\n      return true;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.CONTROLLED_TEXT_INSERTION_COMMAND, payload => {\n    const selection = lexical.$getSelection();\n    if (!$isSelectionInTable(selection, tableNode)) {\n      return false;\n    }\n    if ($isTableSelection(selection)) {\n      tableObserver.clearHighlight();\n      return false;\n    } else if (lexical.$isRangeSelection(selection)) {\n      const tableCellNode = utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n));\n      if (!$isTableCellNode(tableCellNode)) {\n        return false;\n      }\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  if (hasTabHandler) {\n    tableObserver.listenersToRemove.add(editor.registerCommand(lexical.KEY_TAB_COMMAND, event => {\n      const selection = lexical.$getSelection();\n      if (!lexical.$isRangeSelection(selection) || !selection.isCollapsed() || !$isSelectionInTable(selection, tableNode)) {\n        return false;\n      }\n      const tableCellNode = $findCellNode(selection.anchor.getNode());\n      if (tableCellNode === null) {\n        return false;\n      }\n      stopEvent(event);\n      const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableObserver.table);\n      selectTableNodeInDirection(tableObserver, tableNode, currentCords.x, currentCords.y, !event.shiftKey ? 'forward' : 'backward');\n      return true;\n    }, lexical.COMMAND_PRIORITY_CRITICAL));\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.FOCUS_COMMAND, payload => {\n    return tableNode.isSelected();\n  }, lexical.COMMAND_PRIORITY_HIGH));\n  function getObserverCellFromCellNode(tableCellNode) {\n    const currentCords = tableNode.getCordsFromCellNode(tableCellNode, tableObserver.table);\n    return tableNode.getDOMCellFromCordsOrThrow(currentCords.x, currentCords.y, tableObserver.table);\n  }\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_INSERT_CLIPBOARD_NODES_COMMAND, selectionPayload => {\n    const {\n      nodes,\n      selection\n    } = selectionPayload;\n    const anchorAndFocus = selection.getStartEndPoints();\n    const isTableSelection = $isTableSelection(selection);\n    const isRangeSelection = lexical.$isRangeSelection(selection);\n    const isSelectionInsideOfGrid = isRangeSelection && utils.$findMatchingParent(selection.anchor.getNode(), n => $isTableCellNode(n)) !== null && utils.$findMatchingParent(selection.focus.getNode(), n => $isTableCellNode(n)) !== null || isTableSelection;\n    if (nodes.length !== 1 || !$isTableNode(nodes[0]) || !isSelectionInsideOfGrid || anchorAndFocus === null) {\n      return false;\n    }\n    const [anchor] = anchorAndFocus;\n    const newGrid = nodes[0];\n    const newGridRows = newGrid.getChildren();\n    const newColumnCount = newGrid.getFirstChildOrThrow().getChildrenSize();\n    const newRowCount = newGrid.getChildrenSize();\n    const gridCellNode = utils.$findMatchingParent(anchor.getNode(), n => $isTableCellNode(n));\n    const gridRowNode = gridCellNode && utils.$findMatchingParent(gridCellNode, n => $isTableRowNode(n));\n    const gridNode = gridRowNode && utils.$findMatchingParent(gridRowNode, n => $isTableNode(n));\n    if (!$isTableCellNode(gridCellNode) || !$isTableRowNode(gridRowNode) || !$isTableNode(gridNode)) {\n      return false;\n    }\n    const startY = gridRowNode.getIndexWithinParent();\n    const stopY = Math.min(gridNode.getChildrenSize() - 1, startY + newRowCount - 1);\n    const startX = gridCellNode.getIndexWithinParent();\n    const stopX = Math.min(gridRowNode.getChildrenSize() - 1, startX + newColumnCount - 1);\n    const fromX = Math.min(startX, stopX);\n    const fromY = Math.min(startY, stopY);\n    const toX = Math.max(startX, stopX);\n    const toY = Math.max(startY, stopY);\n    const gridRowNodes = gridNode.getChildren();\n    let newRowIdx = 0;\n    let newAnchorCellKey;\n    let newFocusCellKey;\n    for (let r = fromY; r <= toY; r++) {\n      const currentGridRowNode = gridRowNodes[r];\n      if (!$isTableRowNode(currentGridRowNode)) {\n        return false;\n      }\n      const newGridRowNode = newGridRows[newRowIdx];\n      if (!$isTableRowNode(newGridRowNode)) {\n        return false;\n      }\n      const gridCellNodes = currentGridRowNode.getChildren();\n      const newGridCellNodes = newGridRowNode.getChildren();\n      let newColumnIdx = 0;\n      for (let c = fromX; c <= toX; c++) {\n        const currentGridCellNode = gridCellNodes[c];\n        if (!$isTableCellNode(currentGridCellNode)) {\n          return false;\n        }\n        const newGridCellNode = newGridCellNodes[newColumnIdx];\n        if (!$isTableCellNode(newGridCellNode)) {\n          return false;\n        }\n        if (r === fromY && c === fromX) {\n          newAnchorCellKey = currentGridCellNode.getKey();\n        } else if (r === toY && c === toX) {\n          newFocusCellKey = currentGridCellNode.getKey();\n        }\n        const originalChildren = currentGridCellNode.getChildren();\n        newGridCellNode.getChildren().forEach(child => {\n          if (lexical.$isTextNode(child)) {\n            const paragraphNode = lexical.$createParagraphNode();\n            paragraphNode.append(child);\n            currentGridCellNode.append(child);\n          } else {\n            currentGridCellNode.append(child);\n          }\n        });\n        originalChildren.forEach(n => n.remove());\n        newColumnIdx++;\n      }\n      newRowIdx++;\n    }\n    if (newAnchorCellKey && newFocusCellKey) {\n      const newTableSelection = $createTableSelection();\n      newTableSelection.set(nodes[0].getKey(), newAnchorCellKey, newFocusCellKey);\n      lexical.$setSelection(newTableSelection);\n    }\n    return true;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  tableObserver.listenersToRemove.add(editor.registerCommand(lexical.SELECTION_CHANGE_COMMAND, () => {\n    const selection = lexical.$getSelection();\n    const prevSelection = lexical.$getPreviousSelection();\n    if (lexical.$isRangeSelection(selection)) {\n      const {\n        anchor,\n        focus\n      } = selection;\n      const anchorNode = anchor.getNode();\n      const focusNode = focus.getNode();\n      // Using explicit comparison with table node to ensure it's not a nested table\n      // as in that case we'll leave selection resolving to that table\n      const anchorCellNode = $findCellNode(anchorNode);\n      const focusCellNode = $findCellNode(focusNode);\n      const isAnchorInside = anchorCellNode && tableNode.is($findTableNode(anchorCellNode));\n      const isFocusInside = focusCellNode && tableNode.is($findTableNode(focusCellNode));\n      const isPartialyWithinTable = isAnchorInside !== isFocusInside;\n      const isWithinTable = isAnchorInside && isFocusInside;\n      const isBackward = selection.isBackward();\n      if (isPartialyWithinTable) {\n        const newSelection = selection.clone();\n        newSelection.focus.set(tableNode.getKey(), isBackward ? 0 : tableNode.getChildrenSize(), 'element');\n        lexical.$setSelection(newSelection);\n        $addHighlightStyleToTable(editor, tableObserver);\n      } else if (isWithinTable) {\n        // Handle case when selection spans across multiple cells but still\n        // has range selection, then we convert it into grid selection\n        if (!anchorCellNode.is(focusCellNode)) {\n          tableObserver.setAnchorCellForSelection(getObserverCellFromCellNode(anchorCellNode));\n          tableObserver.setFocusCellForSelection(getObserverCellFromCellNode(focusCellNode), true);\n        }\n      }\n    }\n    if (selection && !selection.is(prevSelection) && ($isTableSelection(selection) || $isTableSelection(prevSelection)) && tableObserver.tableSelection && !tableObserver.tableSelection.is(prevSelection)) {\n      if ($isTableSelection(selection) && selection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.updateTableTableSelection(selection);\n      } else if (!$isTableSelection(selection) && $isTableSelection(prevSelection) && prevSelection.tableKey === tableObserver.tableNodeKey) {\n        tableObserver.updateTableTableSelection(null);\n      }\n      return false;\n    }\n    if (tableObserver.hasHijackedSelectionStyles && !tableNode.isSelected()) {\n      $removeHighlightStyleToTable(editor, tableObserver);\n    } else if (!tableObserver.hasHijackedSelectionStyles && tableNode.isSelected()) {\n      $addHighlightStyleToTable(editor, tableObserver);\n    }\n    return false;\n  }, lexical.COMMAND_PRIORITY_CRITICAL));\n  return tableObserver;\n}\nfunction attachTableObserverToTableElement(tableElement, tableObserver) {\n  tableElement[LEXICAL_ELEMENT_KEY] = tableObserver;\n}\nfunction getTableObserverFromTableElement(tableElement) {\n  return tableElement[LEXICAL_ELEMENT_KEY];\n}\nfunction getDOMCellFromTarget(node) {\n  let currentNode = node;\n  while (currentNode != null) {\n    const nodeName = currentNode.nodeName;\n    if (nodeName === 'TD' || nodeName === 'TH') {\n      // @ts-expect-error: internal field\n      const cell = currentNode._cell;\n      if (cell === undefined) {\n        return null;\n      }\n      return cell;\n    }\n    currentNode = currentNode.parentNode;\n  }\n  return null;\n}\nfunction getTable(tableElement) {\n  const domRows = [];\n  const grid = {\n    columns: 0,\n    domRows,\n    rows: 0\n  };\n  let currentNode = tableElement.firstChild;\n  let x = 0;\n  let y = 0;\n  domRows.length = 0;\n  while (currentNode != null) {\n    const nodeMame = currentNode.nodeName;\n    if (nodeMame === 'TD' || nodeMame === 'TH') {\n      const elem = currentNode;\n      const cell = {\n        elem,\n        hasBackgroundColor: elem.style.backgroundColor !== '',\n        highlighted: false,\n        x,\n        y\n      };\n\n      // @ts-expect-error: internal field\n      currentNode._cell = cell;\n      let row = domRows[y];\n      if (row === undefined) {\n        row = domRows[y] = [];\n      }\n      row[x] = cell;\n    } else {\n      const child = currentNode.firstChild;\n      if (child != null) {\n        currentNode = child;\n        continue;\n      }\n    }\n    const sibling = currentNode.nextSibling;\n    if (sibling != null) {\n      x++;\n      currentNode = sibling;\n      continue;\n    }\n    const parent = currentNode.parentNode;\n    if (parent != null) {\n      const parentSibling = parent.nextSibling;\n      if (parentSibling == null) {\n        break;\n      }\n      y++;\n      x = 0;\n      currentNode = parentSibling;\n    }\n  }\n  grid.columns = x + 1;\n  grid.rows = y + 1;\n  return grid;\n}\nfunction $updateDOMForSelection(editor, table, selection) {\n  const selectedCellNodes = new Set(selection ? selection.getNodes() : []);\n  $forEachTableCell(table, (cell, lexicalNode) => {\n    const elem = cell.elem;\n    if (selectedCellNodes.has(lexicalNode)) {\n      cell.highlighted = true;\n      $addHighlightToDOM(editor, cell);\n    } else {\n      cell.highlighted = false;\n      $removeHighlightFromDOM(editor, cell);\n      if (!elem.getAttribute('style')) {\n        elem.removeAttribute('style');\n      }\n    }\n  });\n}\nfunction $forEachTableCell(grid, cb) {\n  const {\n    domRows\n  } = grid;\n  for (let y = 0; y < domRows.length; y++) {\n    const row = domRows[y];\n    if (!row) {\n      continue;\n    }\n    for (let x = 0; x < row.length; x++) {\n      const cell = row[x];\n      if (!cell) {\n        continue;\n      }\n      const lexicalNode = lexical.$getNearestNodeFromDOMNode(cell.elem);\n      if (lexicalNode !== null) {\n        cb(cell, lexicalNode, {\n          x,\n          y\n        });\n      }\n    }\n  }\n}\nfunction $addHighlightStyleToTable(editor, tableSelection) {\n  tableSelection.disableHighlightStyle();\n  $forEachTableCell(tableSelection.table, cell => {\n    cell.highlighted = true;\n    $addHighlightToDOM(editor, cell);\n  });\n}\nfunction $removeHighlightStyleToTable(editor, tableObserver) {\n  tableObserver.enableHighlightStyle();\n  $forEachTableCell(tableObserver.table, cell => {\n    const elem = cell.elem;\n    cell.highlighted = false;\n    $removeHighlightFromDOM(editor, cell);\n    if (!elem.getAttribute('style')) {\n      elem.removeAttribute('style');\n    }\n  });\n}\nconst selectTableNodeInDirection = (tableObserver, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableObserver.table.columns - 1 : 0)) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableObserver.table), isForward);\n      } else {\n        if (y !== (isForward ? tableObserver.table.rows - 1 : 0)) {\n          selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(isForward ? 0 : tableObserver.table.columns - 1, y + (isForward ? 1 : -1), tableObserver.table), isForward);\n        } else if (!isForward) {\n          tableNode.selectPrevious();\n        } else {\n          tableNode.selectNext();\n        }\n      }\n      return true;\n    case 'up':\n      if (y !== 0) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y - 1, tableObserver.table), false);\n      } else {\n        tableNode.selectPrevious();\n      }\n      return true;\n    case 'down':\n      if (y !== tableObserver.table.rows - 1) {\n        selectTableCellNode(tableNode.getCellNodeFromCordsOrThrow(x, y + 1, tableObserver.table), true);\n      } else {\n        tableNode.selectNext();\n      }\n      return true;\n    default:\n      return false;\n  }\n};\nconst adjustFocusNodeInDirection = (tableObserver, tableNode, x, y, direction) => {\n  const isForward = direction === 'forward';\n  switch (direction) {\n    case 'backward':\n    case 'forward':\n      if (x !== (isForward ? tableObserver.table.columns - 1 : 0)) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x + (isForward ? 1 : -1), y, tableObserver.table));\n      }\n      return true;\n    case 'up':\n      if (y !== 0) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x, y - 1, tableObserver.table));\n        return true;\n      } else {\n        return false;\n      }\n    case 'down':\n      if (y !== tableObserver.table.rows - 1) {\n        tableObserver.setFocusCellForSelection(tableNode.getDOMCellFromCordsOrThrow(x, y + 1, tableObserver.table));\n        return true;\n      } else {\n        return false;\n      }\n    default:\n      return false;\n  }\n};\nfunction $isSelectionInTable(selection, tableNode) {\n  if (lexical.$isRangeSelection(selection) || $isTableSelection(selection)) {\n    const isAnchorInside = tableNode.isParentOf(selection.anchor.getNode());\n    const isFocusInside = tableNode.isParentOf(selection.focus.getNode());\n    return isAnchorInside && isFocusInside;\n  }\n  return false;\n}\nfunction selectTableCellNode(tableCell, fromStart) {\n  if (fromStart) {\n    tableCell.selectStart();\n  } else {\n    tableCell.selectEnd();\n  }\n}\nconst BROWSER_BLUE_RGB = '172,206,247';\nfunction $addHighlightToDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  const backgroundColor = node.getBackgroundColor();\n  if (backgroundColor === null) {\n    element.style.setProperty('background-color', `rgb(${BROWSER_BLUE_RGB})`);\n  } else {\n    element.style.setProperty('background-image', `linear-gradient(to right, rgba(${BROWSER_BLUE_RGB},0.85), rgba(${BROWSER_BLUE_RGB},0.85))`);\n  }\n  element.style.setProperty('caret-color', 'transparent');\n}\nfunction $removeHighlightFromDOM(editor, cell) {\n  const element = cell.elem;\n  const node = lexical.$getNearestNodeFromDOMNode(element);\n  if (!$isTableCellNode(node)) {\n    throw Error(`Expected to find LexicalNode from Table Cell DOMNode`);\n  }\n  const backgroundColor = node.getBackgroundColor();\n  if (backgroundColor === null) {\n    element.style.removeProperty('background-color');\n  }\n  element.style.removeProperty('background-image');\n  element.style.removeProperty('caret-color');\n}\nfunction $findCellNode(node) {\n  const cellNode = utils.$findMatchingParent(node, $isTableCellNode);\n  return $isTableCellNode(cellNode) ? cellNode : null;\n}\nfunction $findTableNode(node) {\n  const tableNode = utils.$findMatchingParent(node, $isTableNode);\n  return $isTableNode(tableNode) ? tableNode : null;\n}\nfunction $handleArrowKey(editor, event, direction, tableNode, tableObserver) {\n  const selection = lexical.$getSelection();\n  if (!$isSelectionInTable(selection, tableNode)) {\n    return false;\n  }\n  if (lexical.$isRangeSelection(selection) && selection.isCollapsed()) {\n    // Horizontal move between cels seem to work well without interruption\n    // so just exit early, and handle vertical moves\n    if (direction === 'backward' || direction === 'forward') {\n      return false;\n    }\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n    if (!$isTableCellNode(anchorCellNode) || !anchorCellNode.is(focusCellNode)) {\n      return false;\n    }\n    const anchorCellTable = $findTableNode(anchorCellNode);\n    if (anchorCellTable !== tableNode && anchorCellTable != null) {\n      const anchorCellTableElement = editor.getElementByKey(anchorCellTable.getKey());\n      if (anchorCellTableElement != null) {\n        tableObserver.table = getTable(anchorCellTableElement);\n        return $handleArrowKey(editor, event, direction, anchorCellTable, tableObserver);\n      }\n    }\n    const anchorCellDom = editor.getElementByKey(anchorCellNode.__key);\n    const anchorDOM = editor.getElementByKey(anchor.key);\n    if (anchorDOM == null || anchorCellDom == null) {\n      return false;\n    }\n    let edgeSelectionRect;\n    if (anchor.type === 'element') {\n      edgeSelectionRect = anchorDOM.getBoundingClientRect();\n    } else {\n      const domSelection = window.getSelection();\n      if (domSelection === null || domSelection.rangeCount === 0) {\n        return false;\n      }\n      const range = domSelection.getRangeAt(0);\n      edgeSelectionRect = range.getBoundingClientRect();\n    }\n    const edgeChild = direction === 'up' ? anchorCellNode.getFirstChild() : anchorCellNode.getLastChild();\n    if (edgeChild == null) {\n      return false;\n    }\n    const edgeChildDOM = editor.getElementByKey(edgeChild.__key);\n    if (edgeChildDOM == null) {\n      return false;\n    }\n    const edgeRect = edgeChildDOM.getBoundingClientRect();\n    const isExiting = direction === 'up' ? edgeRect.top > edgeSelectionRect.top - edgeSelectionRect.height : edgeSelectionRect.bottom + edgeSelectionRect.height > edgeRect.bottom;\n    if (isExiting) {\n      stopEvent(event);\n      const cords = tableNode.getCordsFromCellNode(anchorCellNode, tableObserver.table);\n      if (event.shiftKey) {\n        const cell = tableNode.getDOMCellFromCordsOrThrow(cords.x, cords.y, tableObserver.table);\n        tableObserver.setAnchorCellForSelection(cell);\n        tableObserver.setFocusCellForSelection(cell, true);\n      } else {\n        return selectTableNodeInDirection(tableObserver, tableNode, cords.x, cords.y, direction);\n      }\n      return true;\n    }\n  } else if ($isTableSelection(selection)) {\n    const {\n      anchor,\n      focus\n    } = selection;\n    const anchorCellNode = utils.$findMatchingParent(anchor.getNode(), $isTableCellNode);\n    const focusCellNode = utils.$findMatchingParent(focus.getNode(), $isTableCellNode);\n    const [tableNodeFromSelection] = selection.getNodes();\n    const tableElement = editor.getElementByKey(tableNodeFromSelection.getKey());\n    if (!$isTableCellNode(anchorCellNode) || !$isTableCellNode(focusCellNode) || !$isTableNode(tableNodeFromSelection) || tableElement == null) {\n      return false;\n    }\n    tableObserver.updateTableTableSelection(selection);\n    const grid = getTable(tableElement);\n    const cordsAnchor = tableNode.getCordsFromCellNode(anchorCellNode, grid);\n    const anchorCell = tableNode.getDOMCellFromCordsOrThrow(cordsAnchor.x, cordsAnchor.y, grid);\n    tableObserver.setAnchorCellForSelection(anchorCell);\n    stopEvent(event);\n    if (event.shiftKey) {\n      const cords = tableNode.getCordsFromCellNode(focusCellNode, grid);\n      return adjustFocusNodeInDirection(tableObserver, tableNodeFromSelection, cords.x, cords.y, direction);\n    } else {\n      focusCellNode.selectEnd();\n    }\n    return true;\n  }\n  return false;\n}\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n  event.stopPropagation();\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/** @noInheritDoc */\nclass TableNode extends lexical.ElementNode {\n  static getType() {\n    return 'table';\n  }\n  static clone(node) {\n    return new TableNode(node.__key);\n  }\n  static importDOM() {\n    return {\n      table: _node => ({\n        conversion: convertTableElement,\n        priority: 1\n      })\n    };\n  }\n  static importJSON(_serializedNode) {\n    return $createTableNode();\n  }\n  constructor(key) {\n    super(key);\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      type: 'table',\n      version: 1\n    };\n  }\n  createDOM(config, editor) {\n    const tableElement = document.createElement('table');\n    utils.addClassNamesToElement(tableElement, config.theme.table);\n    return tableElement;\n  }\n  updateDOM() {\n    return false;\n  }\n  exportDOM(editor) {\n    return {\n      ...super.exportDOM(editor),\n      after: tableElement => {\n        if (tableElement) {\n          const newElement = tableElement.cloneNode();\n          const colGroup = document.createElement('colgroup');\n          const tBody = document.createElement('tbody');\n          if (utils.isHTMLElement(tableElement)) {\n            tBody.append(...tableElement.children);\n          }\n          const firstRow = this.getFirstChildOrThrow();\n          if (!$isTableRowNode(firstRow)) {\n            throw new Error('Expected to find row node.');\n          }\n          const colCount = firstRow.getChildrenSize();\n          for (let i = 0; i < colCount; i++) {\n            const col = document.createElement('col');\n            colGroup.append(col);\n          }\n          newElement.replaceChildren(colGroup, tBody);\n          return newElement;\n        }\n      }\n    };\n  }\n\n  // TODO 0.10 deprecate\n  canExtractContents() {\n    return false;\n  }\n  canBeEmpty() {\n    return false;\n  }\n  isShadowRoot() {\n    return true;\n  }\n  getCordsFromCellNode(tableCellNode, table) {\n    const {\n      rows,\n      domRows\n    } = table;\n    for (let y = 0; y < rows; y++) {\n      const row = domRows[y];\n      if (row == null) {\n        continue;\n      }\n      const x = row.findIndex(cell => {\n        if (!cell) return;\n        const {\n          elem\n        } = cell;\n        const cellNode = lexical.$getNearestNodeFromDOMNode(elem);\n        return cellNode === tableCellNode;\n      });\n      if (x !== -1) {\n        return {\n          x,\n          y\n        };\n      }\n    }\n    throw new Error('Cell not found in table.');\n  }\n  getDOMCellFromCords(x, y, table) {\n    const {\n      domRows\n    } = table;\n    const row = domRows[y];\n    if (row == null) {\n      return null;\n    }\n    const cell = row[x];\n    if (cell == null) {\n      return null;\n    }\n    return cell;\n  }\n  getDOMCellFromCordsOrThrow(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (!cell) {\n      throw new Error('Cell not found at cords.');\n    }\n    return cell;\n  }\n  getCellNodeFromCords(x, y, table) {\n    const cell = this.getDOMCellFromCords(x, y, table);\n    if (cell == null) {\n      return null;\n    }\n    const node = lexical.$getNearestNodeFromDOMNode(cell.elem);\n    if ($isTableCellNode(node)) {\n      return node;\n    }\n    return null;\n  }\n  getCellNodeFromCordsOrThrow(x, y, table) {\n    const node = this.getCellNodeFromCords(x, y, table);\n    if (!node) {\n      throw new Error('Node at cords not TableCellNode.');\n    }\n    return node;\n  }\n  canSelectBefore() {\n    return true;\n  }\n  canIndent() {\n    return false;\n  }\n}\nfunction $getElementForTableNode(editor, tableNode) {\n  const tableElement = editor.getElementByKey(tableNode.getKey());\n  if (tableElement == null) {\n    throw new Error('Table Element Not Found');\n  }\n  return getTable(tableElement);\n}\nfunction convertTableElement(_domNode) {\n  return {\n    node: $createTableNode()\n  };\n}\nfunction $createTableNode() {\n  return lexical.$applyNodeReplacement(new TableNode());\n}\nfunction $isTableNode(node) {\n  return node instanceof TableNode;\n}\n\nexports.$computeTableMap = $computeTableMap;\nexports.$createTableCellNode = $createTableCellNode;\nexports.$createTableNode = $createTableNode;\nexports.$createTableNodeWithDimensions = $createTableNodeWithDimensions;\nexports.$createTableRowNode = $createTableRowNode;\nexports.$createTableSelection = $createTableSelection;\nexports.$deleteTableColumn = $deleteTableColumn;\nexports.$deleteTableColumn__EXPERIMENTAL = $deleteTableColumn__EXPERIMENTAL;\nexports.$deleteTableRow__EXPERIMENTAL = $deleteTableRow__EXPERIMENTAL;\nexports.$getElementForTableNode = $getElementForTableNode;\nexports.$getNodeTriplet = $getNodeTriplet;\nexports.$getTableCellNodeFromLexicalNode = $getTableCellNodeFromLexicalNode;\nexports.$getTableCellNodeRect = $getTableCellNodeRect;\nexports.$getTableColumnIndexFromTableCellNode = $getTableColumnIndexFromTableCellNode;\nexports.$getTableNodeFromLexicalNodeOrThrow = $getTableNodeFromLexicalNodeOrThrow;\nexports.$getTableRowIndexFromTableCellNode = $getTableRowIndexFromTableCellNode;\nexports.$getTableRowNodeFromTableCellNodeOrThrow = $getTableRowNodeFromTableCellNodeOrThrow;\nexports.$insertTableColumn = $insertTableColumn;\nexports.$insertTableColumn__EXPERIMENTAL = $insertTableColumn__EXPERIMENTAL;\nexports.$insertTableRow = $insertTableRow;\nexports.$insertTableRow__EXPERIMENTAL = $insertTableRow__EXPERIMENTAL;\nexports.$isTableCellNode = $isTableCellNode;\nexports.$isTableNode = $isTableNode;\nexports.$isTableRowNode = $isTableRowNode;\nexports.$isTableSelection = $isTableSelection;\nexports.$removeTableRowAtIndex = $removeTableRowAtIndex;\nexports.$unmergeCell = $unmergeCell;\nexports.INSERT_TABLE_COMMAND = INSERT_TABLE_COMMAND;\nexports.TableCellHeaderStates = TableCellHeaderStates;\nexports.TableCellNode = TableCellNode;\nexports.TableNode = TableNode;\nexports.TableObserver = TableObserver;\nexports.TableRowNode = TableRowNode;\nexports.applyTableHandlers = applyTableHandlers;\nexports.getDOMCellFromTarget = getDOMCellFromTarget;\nexports.getTableObserverFromTableElement = getTableObserverFromTableElement;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACrC,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,mBAAmB,GAAG,qBAAqB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG;EAC5BC,IAAI,EAAE,CAAC;EACPC,MAAM,EAAE,CAAC;EACTC,SAAS,EAAE,CAAC;EACZC,GAAG,EAAE;AACP,CAAC;AACD;AACA,MAAMC,aAAa,SAASP,OAAO,CAACQ,WAAW,CAAC;EAC9C;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA,OAAOC,OAAOA,CAAA,EAAG;IACf,OAAO,WAAW;EACpB;EACA,OAAOC,KAAKA,CAACC,IAAI,EAAE;IACjB,MAAMC,QAAQ,GAAG,IAAIL,aAAa,CAACI,IAAI,CAACE,aAAa,EAAEF,IAAI,CAACG,SAAS,EAAEH,IAAI,CAACI,OAAO,EAAEJ,IAAI,CAACK,KAAK,CAAC;IAChGJ,QAAQ,CAACK,SAAS,GAAGN,IAAI,CAACM,SAAS;IACnCL,QAAQ,CAACM,iBAAiB,GAAGP,IAAI,CAACO,iBAAiB;IACnD,OAAON,QAAQ;EACjB;EACA,OAAOO,SAASA,CAAA,EAAG;IACjB,OAAO;MACLC,EAAE,EAAET,IAAI,KAAK;QACXU,UAAU,EAAEC,2BAA2B;QACvCC,QAAQ,EAAE;MACZ,CAAC,CAAC;MACFC,EAAE,EAAEb,IAAI,KAAK;QACXU,UAAU,EAAEC,2BAA2B;QACvCC,QAAQ,EAAE;MACZ,CAAC;IACH,CAAC;EACH;EACA,OAAOE,UAAUA,CAACC,cAAc,EAAE;IAChC,MAAMC,OAAO,GAAGD,cAAc,CAACC,OAAO,IAAI,CAAC;IAC3C,MAAMC,OAAO,GAAGF,cAAc,CAACE,OAAO,IAAI,CAAC;IAC3C,MAAMhB,QAAQ,GAAGiB,oBAAoB,CAACH,cAAc,CAACI,WAAW,EAAEH,OAAO,EAAED,cAAc,CAACK,KAAK,IAAIC,SAAS,CAAC;IAC7GpB,QAAQ,CAACK,SAAS,GAAGW,OAAO;IAC5BhB,QAAQ,CAACM,iBAAiB,GAAGQ,cAAc,CAACO,eAAe,IAAI,IAAI;IACnE,OAAOrB,QAAQ;EACjB;EACAsB,WAAWA,CAAA,EAAyE;IAAA,IAAxEJ,WAAW,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAGjC,qBAAqB,CAACG,SAAS;IAAA,IAAEsB,OAAO,GAAAQ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,CAAC;IAAA,IAAEJ,KAAK,GAAAI,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;IAAA,IAAEK,GAAG,GAAAF,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;IAChF,KAAK,CAACK,GAAG,CAAC;IACV,IAAI,CAACvB,SAAS,GAAGa,OAAO;IACxB,IAAI,CAACV,SAAS,GAAG,CAAC;IAClB,IAAI,CAACJ,aAAa,GAAGiB,WAAW;IAChC,IAAI,CAACf,OAAO,GAAGgB,KAAK;IACpB,IAAI,CAACb,iBAAiB,GAAG,IAAI;EAC/B;EACAoB,SAASA,CAACC,MAAM,EAAE;IAChB,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;IACrD,IAAI,IAAI,CAAC5B,OAAO,EAAE;MAChByB,OAAO,CAACI,KAAK,CAACb,KAAK,GAAG,GAAG,IAAI,CAAChB,OAAO,IAAI;IAC3C;IACA,IAAI,IAAI,CAACD,SAAS,GAAG,CAAC,EAAE;MACtB0B,OAAO,CAACb,OAAO,GAAG,IAAI,CAACb,SAAS;IAClC;IACA,IAAI,IAAI,CAACG,SAAS,GAAG,CAAC,EAAE;MACtBuB,OAAO,CAACZ,OAAO,GAAG,IAAI,CAACX,SAAS;IAClC;IACA,IAAI,IAAI,CAACC,iBAAiB,KAAK,IAAI,EAAE;MACnCsB,OAAO,CAACI,KAAK,CAACX,eAAe,GAAG,IAAI,CAACf,iBAAiB;IACxD;IACApB,KAAK,CAAC+C,sBAAsB,CAACL,OAAO,EAAED,MAAM,CAACO,KAAK,CAACC,SAAS,EAAE,IAAI,CAACC,SAAS,CAAC,CAAC,IAAIT,MAAM,CAACO,KAAK,CAACG,eAAe,CAAC;IAC/G,OAAOT,OAAO;EAChB;EACAU,SAASA,CAACC,MAAM,EAAE;IAChB,MAAM;MACJX;IACF,CAAC,GAAG,KAAK,CAACU,SAAS,CAACC,MAAM,CAAC;IAC3B,IAAIX,OAAO,EAAE;MACX,MAAMY,QAAQ,GAAGZ,OAAO;MACxB,MAAMa,QAAQ,GAAG,GAAG;MACpB,MAAMC,QAAQ,GAAG,IAAI,CAACC,gBAAgB,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC;MAC1DJ,QAAQ,CAACR,KAAK,CAACa,MAAM,GAAG,iBAAiB;MACzC,IAAI,IAAI,CAAC3C,SAAS,GAAG,CAAC,EAAE;QACtBsC,QAAQ,CAACzB,OAAO,GAAG,IAAI,CAACb,SAAS;MACnC;MACA,IAAI,IAAI,CAACG,SAAS,GAAG,CAAC,EAAE;QACtBmC,QAAQ,CAACxB,OAAO,GAAG,IAAI,CAACX,SAAS;MACnC;MACAmC,QAAQ,CAACR,KAAK,CAACb,KAAK,GAAG,GAAG,IAAI,CAAC2B,QAAQ,CAAC,CAAC,IAAIC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEP,QAAQ,GAAGC,QAAQ,CAAC,IAAI;MAClFF,QAAQ,CAACR,KAAK,CAACiB,aAAa,GAAG,KAAK;MACpCT,QAAQ,CAACR,KAAK,CAACkB,SAAS,GAAG,OAAO;MAClC,MAAM7B,eAAe,GAAG,IAAI,CAAC8B,kBAAkB,CAAC,CAAC;MACjD,IAAI9B,eAAe,KAAK,IAAI,EAAE;QAC5BmB,QAAQ,CAACR,KAAK,CAACX,eAAe,GAAGA,eAAe;MAClD,CAAC,MAAM,IAAI,IAAI,CAACe,SAAS,CAAC,CAAC,EAAE;QAC3BI,QAAQ,CAACR,KAAK,CAACX,eAAe,GAAG,SAAS;MAC5C;IACF;IACA,OAAO;MACLO;IACF,CAAC;EACH;EACAwB,UAAUA,CAAA,EAAG;IACX,OAAO;MACL,GAAG,KAAK,CAACA,UAAU,CAAC,CAAC;MACrB/B,eAAe,EAAE,IAAI,CAAC8B,kBAAkB,CAAC,CAAC;MAC1CpC,OAAO,EAAE,IAAI,CAACb,SAAS;MACvBgB,WAAW,EAAE,IAAI,CAACjB,aAAa;MAC/Be,OAAO,EAAE,IAAI,CAACX,SAAS;MACvBgD,IAAI,EAAE,WAAW;MACjBlC,KAAK,EAAE,IAAI,CAAC2B,QAAQ,CAAC;IACvB,CAAC;EACH;EACAQ,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACpD,SAAS;EACvB;EACAqD,UAAUA,CAACxC,OAAO,EAAE;IAClB,IAAI,CAACyC,WAAW,CAAC,CAAC,CAACtD,SAAS,GAAGa,OAAO;IACtC,OAAO,IAAI;EACb;EACA0C,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACpD,SAAS;EACvB;EACAqD,UAAUA,CAAC1C,OAAO,EAAE;IAClB,IAAI,CAACwC,WAAW,CAAC,CAAC,CAACnD,SAAS,GAAGW,OAAO;IACtC,OAAO,IAAI;EACb;EACAe,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACK,SAAS,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI;EACvC;EACAuB,eAAeA,CAACzC,WAAW,EAAE;IAC3B,MAAM0C,IAAI,GAAG,IAAI,CAACJ,WAAW,CAAC,CAAC;IAC/BI,IAAI,CAAC3D,aAAa,GAAGiB,WAAW;IAChC,OAAO,IAAI,CAACjB,aAAa;EAC3B;EACA4D,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC7D,aAAa;EACvC;EACA8D,QAAQA,CAAC5C,KAAK,EAAE;IACd,MAAMyC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAAC,CAAC;IAC/BI,IAAI,CAACzD,OAAO,GAAGgB,KAAK;IACpB,OAAO,IAAI,CAAChB,OAAO;EACrB;EACA2C,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACgB,SAAS,CAAC,CAAC,CAAC3D,OAAO;EACjC;EACAgD,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACW,SAAS,CAAC,CAAC,CAACxD,iBAAiB;EAC3C;EACA0D,kBAAkBA,CAACC,kBAAkB,EAAE;IACrC,IAAI,CAACT,WAAW,CAAC,CAAC,CAAClD,iBAAiB,GAAG2D,kBAAkB;EAC3D;EACAC,iBAAiBA,CAACC,mBAAmB,EAAE;IACrC,MAAMP,IAAI,GAAG,IAAI,CAACJ,WAAW,CAAC,CAAC;IAC/B,IAAI,CAACI,IAAI,CAAC3D,aAAa,GAAGkE,mBAAmB,MAAMA,mBAAmB,EAAE;MACtEP,IAAI,CAAC3D,aAAa,IAAIkE,mBAAmB;IAC3C,CAAC,MAAM;MACLP,IAAI,CAAC3D,aAAa,IAAIkE,mBAAmB;IAC3C;IACA,OAAOP,IAAI;EACb;EACAQ,cAAcA,CAAClD,WAAW,EAAE;IAC1B,OAAO,CAAC,IAAI,CAAC2C,eAAe,CAAC,CAAC,GAAG3C,WAAW,MAAMA,WAAW;EAC/D;EACAkB,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC0B,SAAS,CAAC,CAAC,CAAC7D,aAAa,KAAKX,qBAAqB,CAACG,SAAS;EAC3E;EACA4E,SAASA,CAACC,QAAQ,EAAE;IAClB,OAAOA,QAAQ,CAACrE,aAAa,KAAK,IAAI,CAACA,aAAa,IAAIqE,QAAQ,CAACnE,OAAO,KAAK,IAAI,CAACA,OAAO,IAAImE,QAAQ,CAACpE,SAAS,KAAK,IAAI,CAACA,SAAS,IAAIoE,QAAQ,CAACjE,SAAS,KAAK,IAAI,CAACA,SAAS,IAAIiE,QAAQ,CAAChE,iBAAiB,KAAK,IAAI,CAACA,iBAAiB;EACtO;EACAiE,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI;EACb;EACAC,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI;EACb;EACAC,UAAUA,CAAA,EAAG;IACX,OAAO,KAAK;EACd;EACAC,SAASA,CAAA,EAAG;IACV,OAAO,KAAK;EACd;AACF;AACA,SAAShE,2BAA2BA,CAACiE,OAAO,EAAE;EAC5C,MAAMC,QAAQ,GAAGD,OAAO;EACxB,MAAME,QAAQ,GAAGF,OAAO,CAACE,QAAQ,CAACC,WAAW,CAAC,CAAC;EAC/C,IAAI3D,KAAK,GAAGC,SAAS;EACrB,IAAI/B,mBAAmB,CAAC0F,IAAI,CAACH,QAAQ,CAAC5C,KAAK,CAACb,KAAK,CAAC,EAAE;IAClDA,KAAK,GAAG6D,UAAU,CAACJ,QAAQ,CAAC5C,KAAK,CAACb,KAAK,CAAC;EAC1C;EACA,MAAM8D,aAAa,GAAGhE,oBAAoB,CAAC4D,QAAQ,KAAK,IAAI,GAAGvF,qBAAqB,CAACI,GAAG,GAAGJ,qBAAqB,CAACG,SAAS,EAAEmF,QAAQ,CAAC7D,OAAO,EAAEI,KAAK,CAAC;EACpJ8D,aAAa,CAAC5E,SAAS,GAAGuE,QAAQ,CAAC5D,OAAO;EAC1C,MAAMK,eAAe,GAAGuD,QAAQ,CAAC5C,KAAK,CAACX,eAAe;EACtD,IAAIA,eAAe,KAAK,EAAE,EAAE;IAC1B4D,aAAa,CAAC3E,iBAAiB,GAAGe,eAAe;EACnD;EACA,OAAO;IACL6D,QAAQ,EAAEA,CAACC,WAAW,EAAEC,iBAAiB,KAAK;MAC5C,IAAIC,gBAAgB,CAACD,iBAAiB,CAAC,IAAI,CAAChG,OAAO,CAACkG,cAAc,CAACH,WAAW,CAAC,EAAE;QAC/E,MAAMI,aAAa,GAAGnG,OAAO,CAACoG,oBAAoB,CAAC,CAAC;QACpD,IAAIpG,OAAO,CAACqG,gBAAgB,CAACN,WAAW,CAAC,IAAIA,WAAW,CAACO,cAAc,CAAC,CAAC,KAAK,IAAI,EAAE;UAClF,OAAO,IAAI;QACb;QACAH,aAAa,CAACI,MAAM,CAACR,WAAW,CAAC;QACjC,OAAOI,aAAa;MACtB;MACA,OAAOJ,WAAW;IACpB,CAAC;IACDpF,IAAI,EAAEkF;EACR,CAAC;AACH;AACA,SAAShE,oBAAoBA,CAACC,WAAW,EAAsB;EAAA,IAApBH,OAAO,GAAAQ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,CAAC;EAAA,IAAEJ,KAAK,GAAAI,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;EAC3D,OAAOhC,OAAO,CAACwG,qBAAqB,CAAC,IAAIjG,aAAa,CAACuB,WAAW,EAAEH,OAAO,EAAEI,KAAK,CAAC,CAAC;AACtF;AACA,SAASkE,gBAAgBA,CAACtF,IAAI,EAAE;EAC9B,OAAOA,IAAI,YAAYJ,aAAa;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkG,oBAAoB,GAAGzG,OAAO,CAAC0G,aAAa,CAAC,sBAAsB,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,SAAS3G,OAAO,CAACQ,WAAW,CAAC;EAC7C;;EAEA,OAAOC,OAAOA,CAAA,EAAG;IACf,OAAO,UAAU;EACnB;EACA,OAAOC,KAAKA,CAACC,IAAI,EAAE;IACjB,OAAO,IAAIgG,YAAY,CAAChG,IAAI,CAACiG,QAAQ,EAAEjG,IAAI,CAACK,KAAK,CAAC;EACpD;EACA,OAAOG,SAASA,CAAA,EAAG;IACjB,OAAO;MACL0F,EAAE,EAAElG,IAAI,KAAK;QACXU,UAAU,EAAEyF,sBAAsB;QAClCvF,QAAQ,EAAE;MACZ,CAAC;IACH,CAAC;EACH;EACA,OAAOE,UAAUA,CAACC,cAAc,EAAE;IAChC,OAAOqF,mBAAmB,CAACrF,cAAc,CAACsF,MAAM,CAAC;EACnD;EACA9E,WAAWA,CAAC8E,MAAM,EAAE3E,GAAG,EAAE;IACvB,KAAK,CAACA,GAAG,CAAC;IACV,IAAI,CAACuE,QAAQ,GAAGI,MAAM;EACxB;EACAhD,UAAUA,CAAA,EAAG;IACX,OAAO;MACL,GAAG,KAAK,CAACA,UAAU,CAAC,CAAC;MACrBC,IAAI,EAAE,UAAU;MAChBgD,OAAO,EAAE;IACX,CAAC;EACH;EACA3E,SAASA,CAACC,MAAM,EAAE;IAChB,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,IAAI,CAAC;IAC5C,IAAI,IAAI,CAACkE,QAAQ,EAAE;MACjBpE,OAAO,CAACI,KAAK,CAACoE,MAAM,GAAG,GAAG,IAAI,CAACJ,QAAQ,IAAI;IAC7C;IACA9G,KAAK,CAAC+C,sBAAsB,CAACL,OAAO,EAAED,MAAM,CAACO,KAAK,CAACoE,QAAQ,CAAC;IAC5D,OAAO1E,OAAO;EAChB;EACA2C,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI;EACb;EACAgC,SAASA,CAACH,MAAM,EAAE;IAChB,MAAMxC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAAC,CAAC;IAC/BI,IAAI,CAACoC,QAAQ,GAAGI,MAAM;IACtB,OAAO,IAAI,CAACJ,QAAQ;EACtB;EACAQ,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC1C,SAAS,CAAC,CAAC,CAACkC,QAAQ;EAClC;EACA3B,SAASA,CAACC,QAAQ,EAAE;IAClB,OAAOA,QAAQ,CAAC0B,QAAQ,KAAK,IAAI,CAACA,QAAQ;EAC5C;EACAvB,UAAUA,CAAA,EAAG;IACX,OAAO,KAAK;EACd;EACAC,SAASA,CAAA,EAAG;IACV,OAAO,KAAK;EACd;AACF;AACA,SAASwB,sBAAsBA,CAACvB,OAAO,EAAE;EACvC,MAAMC,QAAQ,GAAGD,OAAO;EACxB,IAAIyB,MAAM,GAAGhF,SAAS;EACtB,IAAI/B,mBAAmB,CAAC0F,IAAI,CAACH,QAAQ,CAAC5C,KAAK,CAACoE,MAAM,CAAC,EAAE;IACnDA,MAAM,GAAGpB,UAAU,CAACJ,QAAQ,CAAC5C,KAAK,CAACoE,MAAM,CAAC;EAC5C;EACA,OAAO;IACLrG,IAAI,EAAEoG,mBAAmB,CAACC,MAAM;EAClC,CAAC;AACH;AACA,SAASD,mBAAmBA,CAACC,MAAM,EAAE;EACnC,OAAOhH,OAAO,CAACwG,qBAAqB,CAAC,IAAIG,YAAY,CAACK,MAAM,CAAC,CAAC;AAChE;AACA,SAASK,eAAeA,CAAC1G,IAAI,EAAE;EAC7B,OAAOA,IAAI,YAAYgG,YAAY;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMW,WAAW,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAAC9E,QAAQ,KAAK,WAAW,IAAI,OAAO8E,MAAM,CAAC9E,QAAQ,CAACC,aAAa,KAAK,WAAW;;AAEnJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8E,8BAA8BA,CAACC,QAAQ,EAAEC,WAAW,EAAyB;EAAA,IAAvBC,cAAc,GAAAxF,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,IAAI;EAClF,MAAMyF,SAAS,GAAGC,gBAAgB,CAAC,CAAC;EACpC,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,QAAQ,EAAEK,IAAI,EAAE,EAAE;IAC1C,MAAMC,YAAY,GAAGhB,mBAAmB,CAAC,CAAC;IAC1C,KAAK,IAAIiB,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAGN,WAAW,EAAEM,OAAO,EAAE,EAAE;MACtD,IAAIlG,WAAW,GAAG5B,qBAAqB,CAACG,SAAS;MACjD,IAAI,OAAOsH,cAAc,KAAK,QAAQ,EAAE;QACtC,IAAIG,IAAI,KAAK,CAAC,IAAIH,cAAc,CAACM,IAAI,EAAEnG,WAAW,IAAI5B,qBAAqB,CAACI,GAAG;QAC/E,IAAI0H,OAAO,KAAK,CAAC,IAAIL,cAAc,CAACO,OAAO,EAAEpG,WAAW,IAAI5B,qBAAqB,CAACE,MAAM;MAC1F,CAAC,MAAM,IAAIuH,cAAc,EAAE;QACzB,IAAIG,IAAI,KAAK,CAAC,EAAEhG,WAAW,IAAI5B,qBAAqB,CAACI,GAAG;QACxD,IAAI0H,OAAO,KAAK,CAAC,EAAElG,WAAW,IAAI5B,qBAAqB,CAACE,MAAM;MAChE;MACA,MAAMyF,aAAa,GAAGhE,oBAAoB,CAACC,WAAW,CAAC;MACvD,MAAMqE,aAAa,GAAGnG,OAAO,CAACoG,oBAAoB,CAAC,CAAC;MACpDD,aAAa,CAACI,MAAM,CAACvG,OAAO,CAACmI,eAAe,CAAC,CAAC,CAAC;MAC/CtC,aAAa,CAACU,MAAM,CAACJ,aAAa,CAAC;MACnC4B,YAAY,CAACxB,MAAM,CAACV,aAAa,CAAC;IACpC;IACA+B,SAAS,CAACrB,MAAM,CAACwB,YAAY,CAAC;EAChC;EACA,OAAOH,SAAS;AAClB;AACA,SAASQ,gCAAgCA,CAACC,YAAY,EAAE;EACtD,MAAM1H,IAAI,GAAGb,KAAK,CAACwI,mBAAmB,CAACD,YAAY,EAAEE,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC;EAC9E,IAAItC,gBAAgB,CAACtF,IAAI,CAAC,EAAE;IAC1B,OAAOA,IAAI;EACb;EACA,OAAO,IAAI;AACb;AACA,SAAS6H,wCAAwCA,CAACH,YAAY,EAAE;EAC9D,MAAM1H,IAAI,GAAGb,KAAK,CAACwI,mBAAmB,CAACD,YAAY,EAAEE,CAAC,IAAIlB,eAAe,CAACkB,CAAC,CAAC,CAAC;EAC7E,IAAIlB,eAAe,CAAC1G,IAAI,CAAC,EAAE;IACzB,OAAOA,IAAI;EACb;EACA,MAAM,IAAI8H,KAAK,CAAC,gDAAgD,CAAC;AACnE;AACA,SAASC,mCAAmCA,CAACL,YAAY,EAAE;EACzD,MAAM1H,IAAI,GAAGb,KAAK,CAACwI,mBAAmB,CAACD,YAAY,EAAEE,CAAC,IAAII,YAAY,CAACJ,CAAC,CAAC,CAAC;EAC1E,IAAII,YAAY,CAAChI,IAAI,CAAC,EAAE;IACtB,OAAOA,IAAI;EACb;EACA,MAAM,IAAI8H,KAAK,CAAC,4CAA4C,CAAC;AAC/D;AACA,SAASG,kCAAkCA,CAAC/C,aAAa,EAAE;EACzD,MAAMkC,YAAY,GAAGS,wCAAwC,CAAC3C,aAAa,CAAC;EAC5E,MAAM+B,SAAS,GAAGc,mCAAmC,CAACX,YAAY,CAAC;EACnE,OAAOH,SAAS,CAACiB,WAAW,CAAC,CAAC,CAACC,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACQ,EAAE,CAAChB,YAAY,CAAC,CAAC;AACnE;AACA,SAASiB,qCAAqCA,CAACnD,aAAa,EAAE;EAC5D,MAAMkC,YAAY,GAAGS,wCAAwC,CAAC3C,aAAa,CAAC;EAC5E,OAAOkC,YAAY,CAACc,WAAW,CAAC,CAAC,CAACC,SAAS,CAACP,CAAC,IAAIA,CAAC,CAACQ,EAAE,CAAClD,aAAa,CAAC,CAAC;AACvE;AACA,SAASoD,sCAAsCA,CAACpD,aAAa,EAAEqD,KAAK,EAAE;EACpE,MAAMtB,SAAS,GAAGc,mCAAmC,CAAC7C,aAAa,CAAC;EACpE,MAAM;IACJsD,CAAC;IACDC;EACF,CAAC,GAAGxB,SAAS,CAACyB,oBAAoB,CAACxD,aAAa,EAAEqD,KAAK,CAAC;EACxD,OAAO;IACLI,KAAK,EAAE1B,SAAS,CAAC2B,oBAAoB,CAACJ,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEF,KAAK,CAAC;IACtDM,KAAK,EAAE5B,SAAS,CAAC2B,oBAAoB,CAACJ,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEF,KAAK,CAAC;IACtDO,IAAI,EAAE7B,SAAS,CAAC2B,oBAAoB,CAACJ,CAAC,GAAG,CAAC,EAAEC,CAAC,EAAEF,KAAK,CAAC;IACrDQ,KAAK,EAAE9B,SAAS,CAAC2B,oBAAoB,CAACJ,CAAC,GAAG,CAAC,EAAEC,CAAC,EAAEF,KAAK;EACvD,CAAC;AACH;AACA,SAASS,sBAAsBA,CAAC/B,SAAS,EAAEgC,aAAa,EAAE;EACxD,MAAMC,SAAS,GAAGjC,SAAS,CAACiB,WAAW,CAAC,CAAC;EACzC,IAAIe,aAAa,IAAIC,SAAS,CAACzH,MAAM,IAAIwH,aAAa,GAAG,CAAC,EAAE;IAC1D,MAAM,IAAInB,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,MAAMqB,aAAa,GAAGD,SAAS,CAACD,aAAa,CAAC;EAC9CE,aAAa,CAACC,MAAM,CAAC,CAAC;EACtB,OAAOnC,SAAS;AAClB;AACA,SAASoC,eAAeA,CAACpC,SAAS,EAAEqC,WAAW,EAA6C;EAAA,IAA3CC,iBAAiB,GAAA/H,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,IAAI;EAAA,IAAEsF,QAAQ,GAAAtF,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;EAAA,IAAEkH,KAAK,GAAA/G,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;EACxF,MAAM6H,SAAS,GAAGjC,SAAS,CAACiB,WAAW,CAAC,CAAC;EACzC,IAAIoB,WAAW,IAAIJ,SAAS,CAACzH,MAAM,IAAI6H,WAAW,GAAG,CAAC,EAAE;IACtD,MAAM,IAAIxB,KAAK,CAAC,qCAAqC,CAAC;EACxD;EACA,MAAMqB,aAAa,GAAGD,SAAS,CAACI,WAAW,CAAC;EAC5C,IAAI5C,eAAe,CAACyC,aAAa,CAAC,EAAE;IAClC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1C,QAAQ,EAAE0C,CAAC,EAAE,EAAE;MACjC,MAAMC,aAAa,GAAGN,aAAa,CAACjB,WAAW,CAAC,CAAC;MACjD,MAAMwB,gBAAgB,GAAGD,aAAa,CAAChI,MAAM;MAC7C,MAAMkI,eAAe,GAAGvD,mBAAmB,CAAC,CAAC;MAC7C,KAAK,IAAIwD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,gBAAgB,EAAEE,CAAC,EAAE,EAAE;QACzC,MAAMC,sBAAsB,GAAGJ,aAAa,CAACG,CAAC,CAAC;QAC/C,IAAI,CAACtE,gBAAgB,CAACuE,sBAAsB,CAAC,EAAE;UAC7C,MAAM/B,KAAK,CAAC,qBAAqB,CAAC;QACpC;QACA,MAAM;UACJa,KAAK;UACLE;QACF,CAAC,GAAGP,sCAAsC,CAACuB,sBAAsB,EAAEtB,KAAK,CAAC;QACzE,IAAIpH,WAAW,GAAG5B,qBAAqB,CAACG,SAAS;QACjD,MAAM0B,KAAK,GAAGuH,KAAK,IAAIA,KAAK,CAAC5F,QAAQ,CAAC,CAAC,IAAI8F,KAAK,IAAIA,KAAK,CAAC9F,QAAQ,CAAC,CAAC,IAAI1B,SAAS;QACjF,IAAIsH,KAAK,IAAIA,KAAK,CAACtE,cAAc,CAAC9E,qBAAqB,CAACE,MAAM,CAAC,IAAIoJ,KAAK,IAAIA,KAAK,CAACxE,cAAc,CAAC9E,qBAAqB,CAACE,MAAM,CAAC,EAAE;UAC9H0B,WAAW,IAAI5B,qBAAqB,CAACE,MAAM;QAC7C;QACA,MAAMyF,aAAa,GAAGhE,oBAAoB,CAACC,WAAW,EAAE,CAAC,EAAEC,KAAK,CAAC;QACjE8D,aAAa,CAACU,MAAM,CAACvG,OAAO,CAACoG,oBAAoB,CAAC,CAAC,CAAC;QACpDkE,eAAe,CAAC/D,MAAM,CAACV,aAAa,CAAC;MACvC;MACA,IAAIqE,iBAAiB,EAAE;QACrBJ,aAAa,CAACW,WAAW,CAACH,eAAe,CAAC;MAC5C,CAAC,MAAM;QACLR,aAAa,CAACY,YAAY,CAACJ,eAAe,CAAC;MAC7C;IACF;EACF,CAAC,MAAM;IACL,MAAM,IAAI7B,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOb,SAAS;AAClB;AACA,MAAM+C,cAAc,GAAGA,CAACC,YAAY,EAAEC,aAAa,KAAK;EACtD,IAAID,YAAY,KAAK1K,qBAAqB,CAACC,IAAI,IAAIyK,YAAY,KAAKC,aAAa,EAAE;IACjF,OAAOA,aAAa;EACtB;EACA,OAAO3K,qBAAqB,CAACG,SAAS;AACxC,CAAC;AACD,SAASyK,6BAA6BA,CAAA,EAAqB;EAAA,IAApBL,WAAW,GAAAtI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,IAAI;EACvD,MAAM4I,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;EACzC,IAAI,EAAEhL,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAIG,iBAAiB,CAACH,SAAS,CAAC,CAAC,EAAE;IAC3E,MAAMtC,KAAK,CAAC,4CAA4C,CAAC;EAC3D;EACA,MAAM0C,KAAK,GAAGJ,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC;EACvC,MAAM,CAACC,SAAS,GAAGC,IAAI,CAAC,GAAGC,eAAe,CAACJ,KAAK,CAAC;EACjD,MAAM,CAACK,OAAO,EAAEC,YAAY,CAAC,GAAGC,gBAAgB,CAACJ,IAAI,EAAED,SAAS,EAAEA,SAAS,CAAC;EAC5E,MAAM3D,WAAW,GAAG8D,OAAO,CAAC,CAAC,CAAC,CAACpJ,MAAM;EACrC,MAAM;IACJuJ,QAAQ,EAAEC;EACZ,CAAC,GAAGH,YAAY;EAChB,IAAIhB,WAAW,EAAE;IACf,MAAMoB,WAAW,GAAGD,aAAa,GAAGP,SAAS,CAACpK,SAAS,GAAG,CAAC;IAC3D,MAAM6K,cAAc,GAAGN,OAAO,CAACK,WAAW,CAAC;IAC3C,MAAME,MAAM,GAAGhF,mBAAmB,CAAC,CAAC;IACpC,KAAK,IAAIiF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtE,WAAW,EAAEsE,CAAC,EAAE,EAAE;MACpC,MAAM;QACJC,IAAI;QACJN;MACF,CAAC,GAAGG,cAAc,CAACE,CAAC,CAAC;MACrB,IAAIL,QAAQ,GAAGM,IAAI,CAAChL,SAAS,GAAG,CAAC,IAAI4K,WAAW,EAAE;QAChD,MAAMK,WAAW,GAAGJ,cAAc,CAACE,CAAC,CAAC,CAACC,IAAI;QAC1C,MAAME,sBAAsB,GAAGD,WAAW,CAACrL,aAAa;QACxD,MAAMiB,WAAW,GAAG6I,cAAc,CAACwB,sBAAsB,EAAEjM,qBAAqB,CAACE,MAAM,CAAC;QACxF2L,MAAM,CAACxF,MAAM,CAAC1E,oBAAoB,CAACC,WAAW,CAAC,CAACyE,MAAM,CAACvG,OAAO,CAACoG,oBAAoB,CAAC,CAAC,CAAC,CAAC;MACzF,CAAC,MAAM;QACL6F,IAAI,CAAC3H,UAAU,CAAC2H,IAAI,CAAChL,SAAS,GAAG,CAAC,CAAC;MACrC;IACF;IACA,MAAMmL,eAAe,GAAGd,IAAI,CAACe,eAAe,CAACR,WAAW,CAAC;IACzD,IAAI,CAACxE,eAAe,CAAC+E,eAAe,CAAC,EAAE;MACrC,MAAM3D,KAAK,CAAC,mCAAmC,CAAC;IAClD;IACA2D,eAAe,CAAC3B,WAAW,CAACsB,MAAM,CAAC;EACrC,CAAC,MAAM;IACL,MAAMO,gBAAgB,GAAGd,OAAO,CAACI,aAAa,CAAC;IAC/C,MAAMG,MAAM,GAAGhF,mBAAmB,CAAC,CAAC;IACpC,KAAK,IAAIiF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtE,WAAW,EAAEsE,CAAC,EAAE,EAAE;MACpC,MAAM;QACJC,IAAI;QACJN;MACF,CAAC,GAAGW,gBAAgB,CAACN,CAAC,CAAC;MACvB,IAAIL,QAAQ,KAAKC,aAAa,EAAE;QAC9B,MAAMM,WAAW,GAAGI,gBAAgB,CAACN,CAAC,CAAC,CAACC,IAAI;QAC5C,MAAME,sBAAsB,GAAGD,WAAW,CAACrL,aAAa;QACxD,MAAMiB,WAAW,GAAG6I,cAAc,CAACwB,sBAAsB,EAAEjM,qBAAqB,CAACE,MAAM,CAAC;QACxF2L,MAAM,CAACxF,MAAM,CAAC1E,oBAAoB,CAACC,WAAW,CAAC,CAACyE,MAAM,CAACvG,OAAO,CAACoG,oBAAoB,CAAC,CAAC,CAAC,CAAC;MACzF,CAAC,MAAM;QACL6F,IAAI,CAAC3H,UAAU,CAAC2H,IAAI,CAAChL,SAAS,GAAG,CAAC,CAAC;MACrC;IACF;IACA,MAAMsL,iBAAiB,GAAGjB,IAAI,CAACe,eAAe,CAACT,aAAa,CAAC;IAC7D,IAAI,CAACvE,eAAe,CAACkF,iBAAiB,CAAC,EAAE;MACvC,MAAM9D,KAAK,CAAC,mCAAmC,CAAC;IAClD;IACA8D,iBAAiB,CAAC7B,YAAY,CAACqB,MAAM,CAAC;EACxC;AACF;AACA,SAASS,kBAAkBA,CAAC5E,SAAS,EAAEqC,WAAW,EAAgD;EAAA,IAA9CC,iBAAiB,GAAA/H,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,IAAI;EAAA,IAAEuF,WAAW,GAAAvF,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;EAAA,IAAEkH,KAAK,GAAA/G,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAH,SAAA;EAC9F,MAAM6H,SAAS,GAAGjC,SAAS,CAACiB,WAAW,CAAC,CAAC;EACzC,MAAM4D,sBAAsB,GAAG,EAAE;EACjC,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,SAAS,CAACzH,MAAM,EAAE+H,CAAC,EAAE,EAAE;IACzC,MAAMuC,mBAAmB,GAAG7C,SAAS,CAACM,CAAC,CAAC;IACxC,IAAI9C,eAAe,CAACqF,mBAAmB,CAAC,EAAE;MACxC,KAAK,IAAInC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7C,WAAW,EAAE6C,CAAC,EAAE,EAAE;QACpC,MAAMoC,gBAAgB,GAAGD,mBAAmB,CAAC7D,WAAW,CAAC,CAAC;QAC1D,IAAIoB,WAAW,IAAI0C,gBAAgB,CAACvK,MAAM,IAAI6H,WAAW,GAAG,CAAC,EAAE;UAC7D,MAAM,IAAIxB,KAAK,CAAC,wCAAwC,CAAC;QAC3D;QACA,MAAMmE,UAAU,GAAGD,gBAAgB,CAAC1C,WAAW,CAAC;QAChD,IAAI,CAAChE,gBAAgB,CAAC2G,UAAU,CAAC,EAAE;UACjC,MAAMnE,KAAK,CAAC,qBAAqB,CAAC;QACpC;QACA,MAAM;UACJgB,IAAI;UACJC;QACF,CAAC,GAAGT,sCAAsC,CAAC2D,UAAU,EAAE1D,KAAK,CAAC;QAC7D,IAAIpH,WAAW,GAAG5B,qBAAqB,CAACG,SAAS;QACjD,IAAIoJ,IAAI,IAAIA,IAAI,CAACzE,cAAc,CAAC9E,qBAAqB,CAACI,GAAG,CAAC,IAAIoJ,KAAK,IAAIA,KAAK,CAAC1E,cAAc,CAAC9E,qBAAqB,CAACI,GAAG,CAAC,EAAE;UACtHwB,WAAW,IAAI5B,qBAAqB,CAACI,GAAG;QAC1C;QACA,MAAMuM,YAAY,GAAGhL,oBAAoB,CAACC,WAAW,CAAC;QACtD+K,YAAY,CAACtG,MAAM,CAACvG,OAAO,CAACoG,oBAAoB,CAAC,CAAC,CAAC;QACnDqG,sBAAsB,CAACK,IAAI,CAAC;UAC1BD,YAAY;UACZD;QACF,CAAC,CAAC;MACJ;IACF;EACF;EACAH,sBAAsB,CAACM,OAAO,CAACC,IAAA,IAGzB;IAAA,IAH0B;MAC9BH,YAAY;MACZD;IACF,CAAC,GAAAI,IAAA;IACC,IAAI9C,iBAAiB,EAAE;MACrB0C,UAAU,CAACnC,WAAW,CAACoC,YAAY,CAAC;IACtC,CAAC,MAAM;MACLD,UAAU,CAAClC,YAAY,CAACmC,YAAY,CAAC;IACvC;EACF,CAAC,CAAC;EACF,OAAOjF,SAAS;AAClB;AACA,SAASqF,gCAAgCA,CAAA,EAAqB;EAAA,IAApBxC,WAAW,GAAAtI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,IAAI;EAC1D,MAAM4I,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;EACzC,IAAI,EAAEhL,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAIG,iBAAiB,CAACH,SAAS,CAAC,CAAC,EAAE;IAC3E,MAAMtC,KAAK,CAAC,4CAA4C,CAAC;EAC3D;EACA,MAAMyE,MAAM,GAAGnC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC;EACzC,MAAMD,KAAK,GAAGJ,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC;EACvC,MAAM,CAAC+B,UAAU,CAAC,GAAG5B,eAAe,CAAC2B,MAAM,CAAC;EAC5C,MAAM,CAAC7B,SAAS,GAAGC,IAAI,CAAC,GAAGC,eAAe,CAACJ,KAAK,CAAC;EACjD,MAAM,CAACK,OAAO,EAAEC,YAAY,EAAE2B,aAAa,CAAC,GAAG1B,gBAAgB,CAACJ,IAAI,EAAED,SAAS,EAAE8B,UAAU,CAAC;EAC5F,MAAM1F,QAAQ,GAAG+D,OAAO,CAACpJ,MAAM;EAC/B,MAAMiL,WAAW,GAAG5C,WAAW,GAAG9G,IAAI,CAACC,GAAG,CAAC6H,YAAY,CAAC4B,WAAW,EAAED,aAAa,CAACC,WAAW,CAAC,GAAG1J,IAAI,CAAC2J,GAAG,CAAC7B,YAAY,CAAC4B,WAAW,EAAED,aAAa,CAACC,WAAW,CAAC;EAC/J,MAAME,iBAAiB,GAAG9C,WAAW,GAAG4C,WAAW,GAAGhC,SAAS,CAACvK,SAAS,GAAG,CAAC,GAAGuM,WAAW,GAAG,CAAC;EAC/F,MAAMG,cAAc,GAAGlC,IAAI,CAACmC,aAAa,CAAC,CAAC;EAC3C,IAAI,CAACpG,eAAe,CAACmG,cAAc,CAAC,EAAE;IACpC,MAAM/E,KAAK,CAAC,uCAAuC,CAAC;EACtD;EACA,IAAIiF,iBAAiB,GAAG,IAAI;EAC5B,SAASC,wCAAwCA,CAAA,EAAgD;IAAA,IAA/C7L,WAAW,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAGjC,qBAAqB,CAACG,SAAS;IAC7F,MAAM4L,IAAI,GAAGpK,oBAAoB,CAACC,WAAW,CAAC,CAACyE,MAAM,CAACvG,OAAO,CAACoG,oBAAoB,CAAC,CAAC,CAAC;IACrF,IAAIsH,iBAAiB,KAAK,IAAI,EAAE;MAC9BA,iBAAiB,GAAGzB,IAAI;IAC1B;IACA,OAAOA,IAAI;EACb;EACA,IAAI2B,OAAO,GAAGJ,cAAc;EAC5BK,OAAO,EAAE,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvE,QAAQ,EAAEuE,CAAC,EAAE,EAAE;IAC1C,IAAIA,CAAC,KAAK,CAAC,EAAE;MACX,MAAM8B,UAAU,GAAGF,OAAO,CAACG,cAAc,CAAC,CAAC;MAC3C,IAAI,CAAC1G,eAAe,CAACyG,UAAU,CAAC,EAAE;QAChC,MAAMrF,KAAK,CAAC,sCAAsC,CAAC;MACrD;MACAmF,OAAO,GAAGE,UAAU;IACtB;IACA,MAAME,MAAM,GAAGxC,OAAO,CAACQ,CAAC,CAAC;IACzB,MAAMG,sBAAsB,GAAG6B,MAAM,CAACT,iBAAiB,GAAG,CAAC,GAAG,CAAC,GAAGA,iBAAiB,CAAC,CAACtB,IAAI,CAACpL,aAAa;IACvG,MAAMiB,WAAW,GAAG6I,cAAc,CAACwB,sBAAsB,EAAEjM,qBAAqB,CAACI,GAAG,CAAC;IACrF,IAAIiN,iBAAiB,GAAG,CAAC,EAAE;MACzBU,YAAY,CAACL,OAAO,EAAED,wCAAwC,CAAC7L,WAAW,CAAC,CAAC;MAC5E;IACF;IACA,MAAM;MACJmK,IAAI,EAAEC,WAAW;MACjBmB,WAAW,EAAEa,kBAAkB;MAC/BvC,QAAQ,EAAEwC;IACZ,CAAC,GAAGH,MAAM,CAACT,iBAAiB,CAAC;IAC7B,IAAIW,kBAAkB,GAAGhC,WAAW,CAACpL,SAAS,GAAG,CAAC,IAAIyM,iBAAiB,EAAE;MACvE,IAAIa,eAAe,GAAGlC,WAAW;MACjC,IAAImC,uBAAuB,GAAGF,eAAe;MAC7C,IAAIG,aAAa,GAAGf,iBAAiB;MACrC,OAAOc,uBAAuB,KAAKrC,CAAC,IAAIoC,eAAe,CAACnN,SAAS,GAAG,CAAC,EAAE;QACrEqN,aAAa,IAAIpC,WAAW,CAACpL,SAAS;QACtC,IAAIwN,aAAa,IAAI,CAAC,EAAE;UACtB,MAAM;YACJrC,IAAI,EAAEsC,KAAK;YACX5C,QAAQ,EAAE6C;UACZ,CAAC,GAAGR,MAAM,CAACM,aAAa,CAAC;UACzBF,eAAe,GAAGG,KAAK;UACvBF,uBAAuB,GAAGG,SAAS;QACrC,CAAC,MAAM;UACLZ,OAAO,CAACrH,MAAM,CAACoH,wCAAwC,CAAC7L,WAAW,CAAC,CAAC;UACrE,SAAS+L,OAAO;QAClB;MACF;MACAO,eAAe,CAAC3D,WAAW,CAACkD,wCAAwC,CAAC7L,WAAW,CAAC,CAAC;IACpF,CAAC,MAAM;MACLoK,WAAW,CAAC/H,UAAU,CAAC+H,WAAW,CAACpL,SAAS,GAAG,CAAC,CAAC;IACnD;EACF;EACA,IAAI4M,iBAAiB,KAAK,IAAI,EAAE;IAC9Be,oBAAoB,CAACf,iBAAiB,CAAC;EACzC;AACF;AACA,SAASgB,kBAAkBA,CAAC9G,SAAS,EAAEqC,WAAW,EAAE;EAClD,MAAMJ,SAAS,GAAGjC,SAAS,CAACiB,WAAW,CAAC,CAAC;EACzC,KAAK,IAAImD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnC,SAAS,CAACzH,MAAM,EAAE4J,CAAC,EAAE,EAAE;IACzC,MAAMU,mBAAmB,GAAG7C,SAAS,CAACmC,CAAC,CAAC;IACxC,IAAI3E,eAAe,CAACqF,mBAAmB,CAAC,EAAE;MACxC,MAAMC,gBAAgB,GAAGD,mBAAmB,CAAC7D,WAAW,CAAC,CAAC;MAC1D,IAAIoB,WAAW,IAAI0C,gBAAgB,CAACvK,MAAM,IAAI6H,WAAW,GAAG,CAAC,EAAE;QAC7D,MAAM,IAAIxB,KAAK,CAAC,wCAAwC,CAAC;MAC3D;MACAkE,gBAAgB,CAAC1C,WAAW,CAAC,CAACF,MAAM,CAAC,CAAC;IACxC;EACF;EACA,OAAOnC,SAAS;AAClB;AACA,SAAS+G,6BAA6BA,CAAA,EAAG;EACvC,MAAM5D,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;EACzC,IAAI,EAAEhL,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAIG,iBAAiB,CAACH,SAAS,CAAC,CAAC,EAAE;IAC3E,MAAMtC,KAAK,CAAC,4CAA4C,CAAC;EAC3D;EACA,MAAMyE,MAAM,GAAGnC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC;EACzC,MAAMD,KAAK,GAAGJ,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC;EACvC,MAAM,CAAC+B,UAAU,GAAG7B,IAAI,CAAC,GAAGC,eAAe,CAAC2B,MAAM,CAAC;EACnD,MAAM,CAAC7B,SAAS,CAAC,GAAGE,eAAe,CAACJ,KAAK,CAAC;EAC1C,MAAM,CAACK,OAAO,EAAE4B,aAAa,EAAE3B,YAAY,CAAC,GAAGC,gBAAgB,CAACJ,IAAI,EAAE6B,UAAU,EAAE9B,SAAS,CAAC;EAC5F,MAAM;IACJM,QAAQ,EAAEiD;EACZ,CAAC,GAAGxB,aAAa;EACjB,MAAM;IACJzB,QAAQ,EAAEC;EACZ,CAAC,GAAGH,YAAY;EAChB,MAAMI,WAAW,GAAGD,aAAa,GAAGP,SAAS,CAACpK,SAAS,GAAG,CAAC;EAC3D,IAAIuK,OAAO,CAACpJ,MAAM,KAAKyJ,WAAW,GAAG+C,cAAc,GAAG,CAAC,EAAE;IACvD;IACAtD,IAAI,CAACvB,MAAM,CAAC,CAAC;IACb;EACF;EACA,MAAMrC,WAAW,GAAG8D,OAAO,CAAC,CAAC,CAAC,CAACpJ,MAAM;EACrC,MAAMyM,OAAO,GAAGrD,OAAO,CAACK,WAAW,GAAG,CAAC,CAAC;EACxC,MAAMiD,WAAW,GAAGxD,IAAI,CAACe,eAAe,CAACR,WAAW,GAAG,CAAC,CAAC;EACzD,KAAK,IAAIkD,GAAG,GAAGlD,WAAW,EAAEkD,GAAG,IAAIH,cAAc,EAAEG,GAAG,EAAE,EAAE;IACxD,KAAK,IAAIC,MAAM,GAAGtH,WAAW,GAAG,CAAC,EAAEsH,MAAM,IAAI,CAAC,EAAEA,MAAM,EAAE,EAAE;MACxD,MAAM;QACJ/C,IAAI;QACJN,QAAQ,EAAEsD,YAAY;QACtB5B,WAAW,EAAE6B;MACf,CAAC,GAAG1D,OAAO,CAACuD,GAAG,CAAC,CAACC,MAAM,CAAC;MACxB,IAAIE,eAAe,KAAKF,MAAM,EAAE;QAC9B;QACA;MACF;MACA;MACA,IAAID,GAAG,KAAKH,cAAc,IAAIK,YAAY,GAAGL,cAAc,EAAE;QAC3D3C,IAAI,CAAC3H,UAAU,CAAC2H,IAAI,CAAChL,SAAS,IAAIgO,YAAY,GAAGL,cAAc,CAAC,CAAC;MACnE;MACA;MACA,IAAIK,YAAY,IAAIL,cAAc,IAAIK,YAAY,GAAGhD,IAAI,CAAChL,SAAS,GAAG,CAAC,GAAG4K,WAAW,EAAE;QACrFI,IAAI,CAAC3H,UAAU,CAAC2H,IAAI,CAAChL,SAAS,IAAI4K,WAAW,GAAGoD,YAAY,GAAG,CAAC,CAAC,CAAC;QAClE,IAAI,EAAEH,WAAW,KAAK,IAAI,CAAC,EAAE;UAC3B,MAAMrG,KAAK,CAAC,qCAAqC,CAAC;QACpD;QACA,IAAIuG,MAAM,KAAK,CAAC,EAAE;UAChBf,YAAY,CAACa,WAAW,EAAE7C,IAAI,CAAC;QACjC,CAAC,MAAM;UACL,MAAM;YACJA,IAAI,EAAEkD;UACR,CAAC,GAAGN,OAAO,CAACG,MAAM,GAAG,CAAC,CAAC;UACvBG,YAAY,CAAC1E,WAAW,CAACwB,IAAI,CAAC;QAChC;MACF;IACF;IACA,MAAMmD,OAAO,GAAG9D,IAAI,CAACe,eAAe,CAAC0C,GAAG,CAAC;IACzC,IAAI,CAAC1H,eAAe,CAAC+H,OAAO,CAAC,EAAE;MAC7B,MAAM3G,KAAK,CAAC,kCAAkC4G,MAAM,CAACN,GAAG,CAAC,iBAAiB,CAAC;IAC7E;IACAK,OAAO,CAACrF,MAAM,CAAC,CAAC;EAClB;EACA,IAAI8E,OAAO,KAAK7M,SAAS,EAAE;IACzB,MAAM;MACJiK;IACF,CAAC,GAAG4C,OAAO,CAAC,CAAC,CAAC;IACdJ,oBAAoB,CAACxC,IAAI,CAAC;EAC5B,CAAC,MAAM;IACL,MAAMqD,WAAW,GAAG9D,OAAO,CAACoD,cAAc,GAAG,CAAC,CAAC;IAC/C,MAAM;MACJ3C;IACF,CAAC,GAAGqD,WAAW,CAAC,CAAC,CAAC;IAClBb,oBAAoB,CAACxC,IAAI,CAAC;EAC5B;AACF;AACA,SAASsD,gCAAgCA,CAAA,EAAG;EAC1C,MAAMxE,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;EACzC,IAAI,EAAEhL,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAIG,iBAAiB,CAACH,SAAS,CAAC,CAAC,EAAE;IAC3E,MAAMtC,KAAK,CAAC,4CAA4C,CAAC;EAC3D;EACA,MAAMyE,MAAM,GAAGnC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC;EACzC,MAAMD,KAAK,GAAGJ,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC;EACvC,MAAM,CAAC+B,UAAU,GAAG7B,IAAI,CAAC,GAAGC,eAAe,CAAC2B,MAAM,CAAC;EACnD,MAAM,CAAC7B,SAAS,CAAC,GAAGE,eAAe,CAACJ,KAAK,CAAC;EAC1C,MAAM,CAACK,OAAO,EAAE4B,aAAa,EAAE3B,YAAY,CAAC,GAAGC,gBAAgB,CAACJ,IAAI,EAAE6B,UAAU,EAAE9B,SAAS,CAAC;EAC5F,MAAM;IACJgC,WAAW,EAAEmC;EACf,CAAC,GAAGpC,aAAa;EACjB,MAAM;IACJzB,QAAQ,EAAEC,aAAa;IACvByB,WAAW,EAAEoC;EACf,CAAC,GAAGhE,YAAY;EAChB,MAAM4B,WAAW,GAAG1J,IAAI,CAAC2J,GAAG,CAACkC,iBAAiB,EAAEC,gBAAgB,CAAC;EACjE,MAAMC,SAAS,GAAG/L,IAAI,CAACC,GAAG,CAAC4L,iBAAiB,GAAGrC,UAAU,CAACrM,SAAS,GAAG,CAAC,EAAE2O,gBAAgB,GAAGpE,SAAS,CAACvK,SAAS,GAAG,CAAC,CAAC;EACpH,MAAM6O,mBAAmB,GAAGD,SAAS,GAAGrC,WAAW,GAAG,CAAC;EACvD,MAAM3F,WAAW,GAAG8D,OAAO,CAAC,CAAC,CAAC,CAACpJ,MAAM;EACrC,IAAIsF,WAAW,KAAKgI,SAAS,GAAGrC,WAAW,GAAG,CAAC,EAAE;IAC/C;IACA/B,IAAI,CAACsE,cAAc,CAAC,CAAC;IACrBtE,IAAI,CAACvB,MAAM,CAAC,CAAC;IACb;EACF;EACA,MAAMtC,QAAQ,GAAG+D,OAAO,CAACpJ,MAAM;EAC/B,KAAK,IAAI2M,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGtH,QAAQ,EAAEsH,GAAG,EAAE,EAAE;IACvC,KAAK,IAAIC,MAAM,GAAG3B,WAAW,EAAE2B,MAAM,IAAIU,SAAS,EAAEV,MAAM,EAAE,EAAE;MAC5D,MAAM;QACJ/C,IAAI;QACJoB,WAAW,EAAE6B;MACf,CAAC,GAAG1D,OAAO,CAACuD,GAAG,CAAC,CAACC,MAAM,CAAC;MACxB,IAAIE,eAAe,GAAG7B,WAAW,EAAE;QACjC,IAAI2B,MAAM,KAAK3B,WAAW,EAAE;UAC1B,MAAMwC,YAAY,GAAGxC,WAAW,GAAG6B,eAAe;UAClD;UACAjD,IAAI,CAAC9H,UAAU,CAAC8H,IAAI,CAACnL,SAAS;UAC9B;UACA6C,IAAI,CAAC2J,GAAG,CAACqC,mBAAmB,EAAE1D,IAAI,CAACnL,SAAS,GAAG+O,YAAY,CAAC,CAAC;QAC/D;MACF,CAAC,MAAM,IAAIX,eAAe,GAAGjD,IAAI,CAACnL,SAAS,GAAG,CAAC,GAAG4O,SAAS,EAAE;QAC3D,IAAIV,MAAM,KAAKU,SAAS,EAAE;UACxB;UACA,MAAMI,cAAc,GAAGJ,SAAS,GAAGR,eAAe,GAAG,CAAC;UACtDjD,IAAI,CAAC9H,UAAU,CAAC8H,IAAI,CAACnL,SAAS,GAAGgP,cAAc,CAAC;QAClD;MACF,CAAC,MAAM;QACL7D,IAAI,CAAClC,MAAM,CAAC,CAAC;MACf;IACF;EACF;EACA,MAAMgG,WAAW,GAAGvE,OAAO,CAACI,aAAa,CAAC;EAC1C,MAAMoE,UAAU,GAAGD,WAAW,CAACN,gBAAgB,GAAGpE,SAAS,CAACvK,SAAS,CAAC;EACtE,IAAIkP,UAAU,KAAKhO,SAAS,EAAE;IAC5B,MAAM;MACJiK;IACF,CAAC,GAAG+D,UAAU;IACdvB,oBAAoB,CAACxC,IAAI,CAAC;EAC5B,CAAC,MAAM;IACL,MAAMqD,WAAW,GAAGS,WAAW,CAACN,gBAAgB,GAAG,CAAC,CAAC;IACrD,MAAM;MACJxD;IACF,CAAC,GAAGqD,WAAW;IACfb,oBAAoB,CAACxC,IAAI,CAAC;EAC5B;AACF;AACA,SAASwC,oBAAoBA,CAACxC,IAAI,EAAE;EAClC,MAAMgE,eAAe,GAAGhE,IAAI,CAACiE,kBAAkB,CAAC,CAAC;EACjD,IAAID,eAAe,IAAI,IAAI,EAAE;IAC3BhE,IAAI,CAACkE,WAAW,CAAC,CAAC;EACpB,CAAC,MAAM;IACLF,eAAe,CAAC1M,gBAAgB,CAAC,CAAC,CAAC4M,WAAW,CAAC,CAAC;EAClD;AACF;AACA,SAASlC,YAAYA,CAACmC,MAAM,EAAEzP,IAAI,EAAE;EAClC,MAAM0P,UAAU,GAAGD,MAAM,CAAC3C,aAAa,CAAC,CAAC;EACzC,IAAI4C,UAAU,KAAK,IAAI,EAAE;IACvBA,UAAU,CAAC3F,YAAY,CAAC/J,IAAI,CAAC;EAC/B,CAAC,MAAM;IACLyP,MAAM,CAAC7J,MAAM,CAAC5F,IAAI,CAAC;EACrB;AACF;AACA,SAAS2P,YAAYA,CAAA,EAAG;EACtB,MAAMvF,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;EACzC,IAAI,EAAEhL,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAIG,iBAAiB,CAACH,SAAS,CAAC,CAAC,EAAE;IAC3E,MAAMtC,KAAK,CAAC,4CAA4C,CAAC;EAC3D;EACA,MAAMyE,MAAM,GAAGnC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC;EACzC,MAAM,CAACa,IAAI,EAAE8C,GAAG,EAAEzD,IAAI,CAAC,GAAGC,eAAe,CAAC2B,MAAM,CAAC;EACjD,MAAMvL,OAAO,GAAGsK,IAAI,CAACnL,SAAS;EAC9B,MAAMc,OAAO,GAAGqK,IAAI,CAAChL,SAAS;EAC9B,IAAIU,OAAO,GAAG,CAAC,EAAE;IACf,KAAK,IAAIqK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrK,OAAO,EAAEqK,CAAC,EAAE,EAAE;MAChCC,IAAI,CAACxB,WAAW,CAAC5I,oBAAoB,CAAC3B,qBAAqB,CAACG,SAAS,CAAC,CAAC;IACzE;IACA4L,IAAI,CAAC9H,UAAU,CAAC,CAAC,CAAC;EACpB;EACA,IAAIvC,OAAO,GAAG,CAAC,EAAE;IACf,MAAM,CAAC2O,GAAG,EAAEC,OAAO,CAAC,GAAG9E,gBAAgB,CAACJ,IAAI,EAAEW,IAAI,EAAEA,IAAI,CAAC;IACzD,MAAM;MACJoB,WAAW;MACX1B;IACF,CAAC,GAAG6E,OAAO;IACX,IAAIC,cAAc;IAClB,KAAK,IAAIzE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpK,OAAO,EAAEoK,CAAC,EAAE,EAAE;MAChC,MAAM8B,UAAU,GAAGnC,QAAQ,GAAGK,CAAC;MAC/B,MAAM0E,aAAa,GAAGH,GAAG,CAACzC,UAAU,CAAC;MACrC2C,cAAc,GAAG,CAACA,cAAc,IAAI1B,GAAG,EAAEhB,cAAc,CAAC,CAAC;MACzD,IAAI,CAAC1G,eAAe,CAACoJ,cAAc,CAAC,EAAE;QACpC,MAAMhI,KAAK,CAAC,uCAAuC,CAAC;MACtD;MACA,IAAI2F,eAAe,GAAG,IAAI;MAC1B,KAAK,IAAIY,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG3B,WAAW,EAAE2B,MAAM,EAAE,EAAE;QACnD,MAAM2B,cAAc,GAAGD,aAAa,CAAC1B,MAAM,CAAC;QAC5C,MAAM9C,WAAW,GAAGyE,cAAc,CAAC1E,IAAI;QACvC,IAAI0E,cAAc,CAAChF,QAAQ,KAAKmC,UAAU,EAAE;UAC1CM,eAAe,GAAGlC,WAAW;QAC/B;QACA,IAAIA,WAAW,CAACpL,SAAS,GAAG,CAAC,EAAE;UAC7BkO,MAAM,IAAI9C,WAAW,CAACpL,SAAS,GAAG,CAAC;QACrC;MACF;MACA,IAAIsN,eAAe,KAAK,IAAI,EAAE;QAC5B,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjP,OAAO,EAAEiP,CAAC,EAAE,EAAE;UAChC3C,YAAY,CAACwC,cAAc,EAAE5O,oBAAoB,CAAC3B,qBAAqB,CAACG,SAAS,CAAC,CAAC;QACrF;MACF,CAAC,MAAM;QACL,KAAK,IAAIuQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjP,OAAO,EAAEiP,CAAC,EAAE,EAAE;UAChCxC,eAAe,CAAC3D,WAAW,CAAC5I,oBAAoB,CAAC3B,qBAAqB,CAACG,SAAS,CAAC,CAAC;QACpF;MACF;IACF;IACA4L,IAAI,CAAC3H,UAAU,CAAC,CAAC,CAAC;EACpB;AACF;AACA,SAASoH,gBAAgBA,CAACJ,IAAI,EAAEuF,KAAK,EAAEC,KAAK,EAAE;EAC5C,MAAMC,QAAQ,GAAG,EAAE;EACnB,IAAIC,UAAU,GAAG,IAAI;EACrB,IAAIC,UAAU,GAAG,IAAI;EACrB,SAASC,KAAKA,CAACvF,QAAQ,EAAE0B,WAAW,EAAEpB,IAAI,EAAE;IAC1C,MAAMkF,KAAK,GAAG;MACZlF,IAAI;MACJoB,WAAW;MACX1B;IACF,CAAC;IACD,MAAM/J,OAAO,GAAGqK,IAAI,CAAChL,SAAS;IAC9B,MAAMU,OAAO,GAAGsK,IAAI,CAACnL,SAAS;IAC9B,KAAK,IAAIkL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpK,OAAO,EAAEoK,CAAC,EAAE,EAAE;MAChC,IAAI+E,QAAQ,CAACpF,QAAQ,GAAGK,CAAC,CAAC,KAAKhK,SAAS,EAAE;QACxC+O,QAAQ,CAACpF,QAAQ,GAAGK,CAAC,CAAC,GAAG,EAAE;MAC7B;MACA,KAAK,IAAI4E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjP,OAAO,EAAEiP,CAAC,EAAE,EAAE;QAChCG,QAAQ,CAACpF,QAAQ,GAAGK,CAAC,CAAC,CAACqB,WAAW,GAAGuD,CAAC,CAAC,GAAGO,KAAK;MACjD;IACF;IACA,IAAIN,KAAK,CAAC9H,EAAE,CAACkD,IAAI,CAAC,EAAE;MAClB+E,UAAU,GAAGG,KAAK;IACpB;IACA,IAAIL,KAAK,CAAC/H,EAAE,CAACkD,IAAI,CAAC,EAAE;MAClBgF,UAAU,GAAGE,KAAK;IACpB;EACF;EACA,SAASC,OAAOA,CAACrC,GAAG,EAAEC,MAAM,EAAE;IAC5B,OAAO+B,QAAQ,CAAChC,GAAG,CAAC,KAAK/M,SAAS,IAAI+O,QAAQ,CAAChC,GAAG,CAAC,CAACC,MAAM,CAAC,KAAKhN,SAAS;EAC3E;EACA,MAAMqP,YAAY,GAAG/F,IAAI,CAACzC,WAAW,CAAC,CAAC;EACvC,KAAK,IAAImD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqF,YAAY,CAACjP,MAAM,EAAE4J,CAAC,EAAE,EAAE;IAC5C,MAAM+C,GAAG,GAAGsC,YAAY,CAACrF,CAAC,CAAC;IAC3B,IAAI,CAAC3E,eAAe,CAAC0H,GAAG,CAAC,EAAE;MACzB,MAAMtG,KAAK,CAAC,+CAA+C,CAAC;IAC9D;IACA,MAAM6I,WAAW,GAAGvC,GAAG,CAAClG,WAAW,CAAC,CAAC;IACrC,IAAI+H,CAAC,GAAG,CAAC;IACT,KAAK,MAAM3E,IAAI,IAAIqF,WAAW,EAAE;MAC9B,IAAI,CAACrL,gBAAgB,CAACgG,IAAI,CAAC,EAAE;QAC3B,MAAMxD,KAAK,CAAC,oDAAoD,CAAC;MACnE;MACA,OAAO,CAAC2I,OAAO,CAACpF,CAAC,EAAE4E,CAAC,CAAC,EAAE;QACrBA,CAAC,EAAE;MACL;MACAM,KAAK,CAAClF,CAAC,EAAE4E,CAAC,EAAE3E,IAAI,CAAC;MACjB2E,CAAC,IAAI3E,IAAI,CAACnL,SAAS;IACrB;EACF;EACA,IAAI,EAAEkQ,UAAU,KAAK,IAAI,CAAC,EAAE;IAC1B,MAAMvI,KAAK,CAAC,0BAA0B,CAAC;EACzC;EACA,IAAI,EAAEwI,UAAU,KAAK,IAAI,CAAC,EAAE;IAC1B,MAAMxI,KAAK,CAAC,yBAAyB,CAAC;EACxC;EACA,OAAO,CAACsI,QAAQ,EAAEC,UAAU,EAAEC,UAAU,CAAC;AAC3C;AACA,SAAS1F,eAAeA,CAACgG,MAAM,EAAE;EAC/B,IAAItF,IAAI;EACR,IAAIsF,MAAM,YAAYhR,aAAa,EAAE;IACnC0L,IAAI,GAAGsF,MAAM;EACf,CAAC,MAAM,IAAI,QAAQ,IAAIA,MAAM,EAAE;IAC7B,MAAMhD,KAAK,GAAGzO,KAAK,CAACwI,mBAAmB,CAACiJ,MAAM,EAAEtL,gBAAgB,CAAC;IACjE,IAAI,CAACA,gBAAgB,CAACsI,KAAK,CAAC,EAAE;MAC5B,MAAM9F,KAAK,CAAC,yCAAyC,CAAC;IACxD;IACAwD,IAAI,GAAGsC,KAAK;EACd,CAAC,MAAM;IACL,MAAMA,KAAK,GAAGzO,KAAK,CAACwI,mBAAmB,CAACiJ,MAAM,CAACnG,OAAO,CAAC,CAAC,EAAEnF,gBAAgB,CAAC;IAC3E,IAAI,CAACA,gBAAgB,CAACsI,KAAK,CAAC,EAAE;MAC5B,MAAM9F,KAAK,CAAC,yCAAyC,CAAC;IACxD;IACAwD,IAAI,GAAGsC,KAAK;EACd;EACA,MAAMQ,GAAG,GAAG9C,IAAI,CAACuF,SAAS,CAAC,CAAC;EAC5B,IAAI,CAACnK,eAAe,CAAC0H,GAAG,CAAC,EAAE;IACzB,MAAMtG,KAAK,CAAC,sDAAsD,CAAC;EACrE;EACA,MAAM6C,IAAI,GAAGyD,GAAG,CAACyC,SAAS,CAAC,CAAC;EAC5B,IAAI,CAAC7I,YAAY,CAAC2C,IAAI,CAAC,EAAE;IACvB,MAAM7C,KAAK,CAAC,iDAAiD,CAAC;EAChE;EACA,OAAO,CAACwD,IAAI,EAAE8C,GAAG,EAAEzD,IAAI,CAAC;AAC1B;AACA,SAASmG,qBAAqBA,CAAC5L,aAAa,EAAE;EAC5C,MAAM,CAACjF,QAAQ,GAAG8Q,QAAQ,CAAC,GAAGnG,eAAe,CAAC1F,aAAa,CAAC;EAC5D,MAAMoC,IAAI,GAAGyJ,QAAQ,CAAC7I,WAAW,CAAC,CAAC;EACnC,MAAMpB,QAAQ,GAAGQ,IAAI,CAAC7F,MAAM;EAC5B,MAAMsF,WAAW,GAAGO,IAAI,CAAC,CAAC,CAAC,CAACY,WAAW,CAAC,CAAC,CAACzG,MAAM;;EAEhD;EACA,MAAMuP,UAAU,GAAG,IAAIC,KAAK,CAACnK,QAAQ,CAAC;EACtC,KAAK,IAAIuE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvE,QAAQ,EAAEuE,CAAC,EAAE,EAAE;IACjC2F,UAAU,CAAC3F,CAAC,CAAC,GAAG,IAAI4F,KAAK,CAAClK,WAAW,CAAC;EACxC;EACA,KAAK,IAAImK,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGpK,QAAQ,EAAEoK,QAAQ,EAAE,EAAE;IACtD,MAAM9C,GAAG,GAAG9G,IAAI,CAAC4J,QAAQ,CAAC;IAC1B,MAAMC,KAAK,GAAG/C,GAAG,CAAClG,WAAW,CAAC,CAAC;IAC/B,IAAIkJ,WAAW,GAAG,CAAC;IACnB,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGF,KAAK,CAAC1P,MAAM,EAAE4P,SAAS,EAAE,EAAE;MAC7D;MACA,OAAOL,UAAU,CAACE,QAAQ,CAAC,CAACE,WAAW,CAAC,EAAE;QACxCA,WAAW,EAAE;MACf;MACA,MAAM9F,IAAI,GAAG6F,KAAK,CAACE,SAAS,CAAC;MAC7B,MAAMpQ,OAAO,GAAGqK,IAAI,CAAChL,SAAS,IAAI,CAAC;MACnC,MAAMU,OAAO,GAAGsK,IAAI,CAACnL,SAAS,IAAI,CAAC;;MAEnC;MACA,KAAK,IAAIkL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpK,OAAO,EAAEoK,CAAC,EAAE,EAAE;QAChC,KAAK,IAAI4E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjP,OAAO,EAAEiP,CAAC,EAAE,EAAE;UAChCe,UAAU,CAACE,QAAQ,GAAG7F,CAAC,CAAC,CAAC+F,WAAW,GAAGnB,CAAC,CAAC,GAAG3E,IAAI;QAClD;MACF;;MAEA;MACA,IAAIrL,QAAQ,KAAKqL,IAAI,EAAE;QACrB,OAAO;UACLtK,OAAO;UACPoQ,WAAW;UACXF,QAAQ;UACRjQ;QACF,CAAC;MACH;MACAmQ,WAAW,IAAIpQ,OAAO;IACxB;EACF;EACA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMsQ,cAAc,CAAC;EACnB/P,WAAWA,CAACgQ,QAAQ,EAAEhF,MAAM,EAAE/B,KAAK,EAAE;IACnC,IAAI,CAAC+B,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC/B,KAAK,GAAGA,KAAK;IAClB+B,MAAM,CAACiF,UAAU,GAAG,IAAI;IACxBhH,KAAK,CAACgH,UAAU,GAAG,IAAI;IACvB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,KAAK,GAAG,KAAK;IAClB,IAAI,CAACH,QAAQ,GAAGA,QAAQ;EAC1B;EACAI,iBAAiBA,CAAA,EAAG;IAClB,OAAO,CAAC,IAAI,CAACpF,MAAM,EAAE,IAAI,CAAC/B,KAAK,CAAC;EAClC;;EAEA;AACF;AACA;AACA;AACA;EACEoH,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAACpH,KAAK,CAACqH,QAAQ,CAAC,IAAI,CAACtF,MAAM,CAAC;EACzC;EACAuF,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACL,YAAY;EAC1B;EACAM,cAAcA,CAACC,KAAK,EAAE;IACpB,IAAI,CAACP,YAAY,GAAGO,KAAK;EAC3B;EACA5J,EAAEA,CAACgC,SAAS,EAAE;IACZ,IAAI,CAACG,iBAAiB,CAACH,SAAS,CAAC,EAAE;MACjC,OAAO,KAAK;IACd;IACA,OAAO,IAAI,CAACmH,QAAQ,KAAKnH,SAAS,CAACmH,QAAQ,IAAI,IAAI,CAAChF,MAAM,CAACnE,EAAE,CAACgC,SAAS,CAACmC,MAAM,CAAC,IAAI,IAAI,CAAC/B,KAAK,CAACpC,EAAE,CAACgC,SAAS,CAACI,KAAK,CAAC;EACnH;EACAyH,GAAGA,CAACV,QAAQ,EAAEW,aAAa,EAAEC,YAAY,EAAE;IACzC,IAAI,CAACT,KAAK,GAAG,IAAI;IACjB,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAChF,MAAM,CAAC7K,GAAG,GAAGwQ,aAAa;IAC/B,IAAI,CAAC1H,KAAK,CAAC9I,GAAG,GAAGyQ,YAAY;IAC7B,IAAI,CAACV,YAAY,GAAG,IAAI;EAC1B;EACA1R,KAAKA,CAAA,EAAG;IACN,OAAO,IAAIuR,cAAc,CAAC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAAChF,MAAM,EAAE,IAAI,CAAC/B,KAAK,CAAC;EACnE;EACA4H,WAAWA,CAAA,EAAG;IACZ,OAAO,KAAK;EACd;EACAC,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC;EACxB;EACAC,aAAaA,CAACC,IAAI,EAAE;IAClB;EAAA;EAEFC,UAAUA,CAAA,EAAG;IACX;EAAA;EAEFC,WAAWA,CAACV,KAAK,EAAE;IACjB,MAAMW,SAAS,GAAG,IAAI,CAACnI,KAAK,CAACC,OAAO,CAAC,CAAC;IACtC,IAAI,CAACpL,OAAO,CAACkG,cAAc,CAACoN,SAAS,CAAC,EAAE;MACtC,MAAM7K,KAAK,CAAC,oDAAoD,CAAC;IACnE;IACA,MAAMsC,SAAS,GAAG/K,OAAO,CAACuT,iCAAiC,CAACD,SAAS,CAACE,MAAM,CAAC,CAAC,EAAEF,SAAS,CAAC9P,eAAe,CAAC,CAAC,CAAC,CAAC;IAC7GuH,SAAS,CAACsI,WAAW,CAACV,KAAK,CAAC;EAC9B;;EAEA;EACAc,QAAQA,CAAA,EAAG;IACT,MAAMC,cAAc,GAAG1T,OAAO,CAAC2T,aAAa,CAAC,IAAI,CAACzG,MAAM,CAAC7K,GAAG,CAAC;IAC7D,IAAI,CAAC4D,gBAAgB,CAACyN,cAAc,CAAC,EAAE;MACrC,MAAMjL,KAAK,CAAC,oEAAoE,CAAC;IACnF;IACA,MAAMmL,kBAAkB,GAAGnC,qBAAqB,CAACiC,cAAc,CAAC;IAChE,IAAI,EAAEE,kBAAkB,KAAK,IAAI,CAAC,EAAE;MAClC,MAAMnL,KAAK,CAAC,0CAA0C,CAAC;IACzD;IACA,MAAMoL,aAAa,GAAG7T,OAAO,CAAC2T,aAAa,CAAC,IAAI,CAACxI,KAAK,CAAC9I,GAAG,CAAC;IAC3D,IAAI,CAAC4D,gBAAgB,CAAC4N,aAAa,CAAC,EAAE;MACpC,MAAMpL,KAAK,CAAC,mEAAmE,CAAC;IAClF;IACA,MAAMqL,iBAAiB,GAAGrC,qBAAqB,CAACoC,aAAa,CAAC;IAC9D,IAAI,EAAEC,iBAAiB,KAAK,IAAI,CAAC,EAAE;MACjC,MAAMrL,KAAK,CAAC,6CAA6C,CAAC;IAC5D;IACA,MAAMsL,MAAM,GAAGpQ,IAAI,CAAC2J,GAAG,CAACsG,kBAAkB,CAAC7B,WAAW,EAAE+B,iBAAiB,CAAC/B,WAAW,CAAC;IACtF,MAAMiC,KAAK,GAAGrQ,IAAI,CAACC,GAAG,CAACgQ,kBAAkB,CAAC7B,WAAW,EAAE+B,iBAAiB,CAAC/B,WAAW,CAAC;IACrF,MAAMkC,MAAM,GAAGtQ,IAAI,CAAC2J,GAAG,CAACsG,kBAAkB,CAAC/B,QAAQ,EAAEiC,iBAAiB,CAACjC,QAAQ,CAAC;IAChF,MAAMqC,KAAK,GAAGvQ,IAAI,CAACC,GAAG,CAACgQ,kBAAkB,CAAC/B,QAAQ,EAAEiC,iBAAiB,CAACjC,QAAQ,CAAC;IAC/E,OAAO;MACLsC,KAAK,EAAExQ,IAAI,CAAC2J,GAAG,CAACyG,MAAM,EAAEC,KAAK,CAAC;MAC9BI,KAAK,EAAEzQ,IAAI,CAAC2J,GAAG,CAAC2G,MAAM,EAAEC,KAAK,CAAC;MAC9BG,GAAG,EAAE1Q,IAAI,CAACC,GAAG,CAACmQ,MAAM,EAAEC,KAAK,CAAC;MAC5BM,GAAG,EAAE3Q,IAAI,CAACC,GAAG,CAACqQ,MAAM,EAAEC,KAAK;IAC7B,CAAC;EACH;EACAjB,QAAQA,CAAA,EAAG;IACT,MAAMsB,WAAW,GAAG,IAAI,CAACnC,YAAY;IACrC,IAAImC,WAAW,KAAK,IAAI,EAAE;MACxB,OAAOA,WAAW;IACpB;IACA,MAAMC,UAAU,GAAG,IAAI,CAACtH,MAAM,CAAC9B,OAAO,CAAC,CAAC;IACxC,MAAMkI,SAAS,GAAG,IAAI,CAACnI,KAAK,CAACC,OAAO,CAAC,CAAC;IACtC,MAAM+B,UAAU,GAAGrN,KAAK,CAACwI,mBAAmB,CAACkM,UAAU,EAAEvO,gBAAgB,CAAC;IAC1E;IACA,MAAMoF,SAAS,GAAGvL,KAAK,CAACwI,mBAAmB,CAACgL,SAAS,EAAErN,gBAAgB,CAAC;IACxE,IAAI,CAACA,gBAAgB,CAACkH,UAAU,CAAC,EAAE;MACjC,MAAM1E,KAAK,CAAC,oEAAoE,CAAC;IACnF;IACA,IAAI,CAACxC,gBAAgB,CAACoF,SAAS,CAAC,EAAE;MAChC,MAAM5C,KAAK,CAAC,mEAAmE,CAAC;IAClF;IACA,MAAMgM,SAAS,GAAGtH,UAAU,CAACqE,SAAS,CAAC,CAAC;IACxC,IAAI,CAACnK,eAAe,CAACoN,SAAS,CAAC,EAAE;MAC/B,MAAMhM,KAAK,CAAC,mDAAmD,CAAC;IAClE;IACA,MAAMb,SAAS,GAAG6M,SAAS,CAACjD,SAAS,CAAC,CAAC;IACvC,IAAI,CAAC7I,YAAY,CAACf,SAAS,CAAC,EAAE;MAC5B,MAAMa,KAAK,CAAC,+CAA+C,CAAC;IAC9D;IACA,MAAMiM,aAAa,GAAGrJ,SAAS,CAACsJ,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/C,IAAID,aAAa,KAAK9M,SAAS,EAAE;MAC/B,IAAI,CAACA,SAAS,CAACgN,UAAU,CAACvJ,SAAS,CAAC,EAAE;QACpC;QACA,MAAMwJ,UAAU,GAAGjN,SAAS,CAAC4J,SAAS,CAAC,CAAC;QACxC,IAAI,EAAEqD,UAAU,IAAI,IAAI,CAAC,EAAE;UACzB,MAAMpM,KAAK,CAAC,sCAAsC,CAAC;QACrD;QACA,IAAI,CAACmK,GAAG,CAAC,IAAI,CAACV,QAAQ,EAAE2C,UAAU,CAACC,MAAM,CAAC,CAAC,EAAEzJ,SAAS,CAACyJ,MAAM,CAAC,CAAC,CAAC;MAClE,CAAC,MAAM;QACL;QACA,MAAMC,eAAe,GAAGL,aAAa,CAAClD,SAAS,CAAC,CAAC;QACjD,IAAI,EAAEuD,eAAe,IAAI,IAAI,CAAC,EAAE;UAC9B,MAAMtM,KAAK,CAAC,2CAA2C,CAAC;QAC1D;QACA,IAAI,CAACmK,GAAG,CAAC,IAAI,CAACV,QAAQ,EAAE7G,SAAS,CAACyJ,MAAM,CAAC,CAAC,EAAEC,eAAe,CAACD,MAAM,CAAC,CAAC,CAAC;MACvE;MACA,OAAO,IAAI,CAAC7B,QAAQ,CAAC,CAAC;IACxB;;IAEA;IACA;IACA;IACA;IACA,MAAM,CAAC1C,GAAG,EAAEyE,QAAQ,EAAEC,QAAQ,CAAC,GAAGvJ,gBAAgB,CAAC9D,SAAS,EAAEuF,UAAU,EAAE9B,SAAS,CAAC;IACpF,IAAI6J,SAAS,GAAGvR,IAAI,CAAC2J,GAAG,CAAC0H,QAAQ,CAAC3H,WAAW,EAAE4H,QAAQ,CAAC5H,WAAW,CAAC;IACpE,IAAI8H,MAAM,GAAGxR,IAAI,CAAC2J,GAAG,CAAC0H,QAAQ,CAACrJ,QAAQ,EAAEsJ,QAAQ,CAACtJ,QAAQ,CAAC;IAC3D,IAAIyJ,SAAS,GAAGzR,IAAI,CAACC,GAAG,CAACoR,QAAQ,CAAC3H,WAAW,GAAG2H,QAAQ,CAAC/I,IAAI,CAACnL,SAAS,GAAG,CAAC,EAAEmU,QAAQ,CAAC5H,WAAW,GAAG4H,QAAQ,CAAChJ,IAAI,CAACnL,SAAS,GAAG,CAAC,CAAC;IAChI,IAAIuU,MAAM,GAAG1R,IAAI,CAACC,GAAG,CAACoR,QAAQ,CAACrJ,QAAQ,GAAGqJ,QAAQ,CAAC/I,IAAI,CAAChL,SAAS,GAAG,CAAC,EAAEgU,QAAQ,CAACtJ,QAAQ,GAAGsJ,QAAQ,CAAChJ,IAAI,CAAChL,SAAS,GAAG,CAAC,CAAC;IACvH,IAAIqU,iBAAiB,GAAGJ,SAAS;IACjC,IAAIK,cAAc,GAAGJ,MAAM;IAC3B,IAAIK,iBAAiB,GAAGN,SAAS;IACjC,IAAIO,cAAc,GAAGN,MAAM;IAC3B,SAASO,cAAcA,CAACC,QAAQ,EAAE;MAChC,MAAM;QACJ1J,IAAI;QACJoB,WAAW,EAAE6B,eAAe;QAC5BvD,QAAQ,EAAEsD;MACZ,CAAC,GAAG0G,QAAQ;MACZT,SAAS,GAAGvR,IAAI,CAAC2J,GAAG,CAAC4H,SAAS,EAAEhG,eAAe,CAAC;MAChDiG,MAAM,GAAGxR,IAAI,CAAC2J,GAAG,CAAC6H,MAAM,EAAElG,YAAY,CAAC;MACvCmG,SAAS,GAAGzR,IAAI,CAACC,GAAG,CAACwR,SAAS,EAAElG,eAAe,GAAGjD,IAAI,CAACnL,SAAS,GAAG,CAAC,CAAC;MACrEuU,MAAM,GAAG1R,IAAI,CAACC,GAAG,CAACyR,MAAM,EAAEpG,YAAY,GAAGhD,IAAI,CAAChL,SAAS,GAAG,CAAC,CAAC;IAC9D;IACA,OAAOiU,SAAS,GAAGI,iBAAiB,IAAIH,MAAM,GAAGI,cAAc,IAAIH,SAAS,GAAGI,iBAAiB,IAAIH,MAAM,GAAGI,cAAc,EAAE;MAC3H,IAAIP,SAAS,GAAGI,iBAAiB,EAAE;QACjC;QACA,MAAMM,OAAO,GAAGH,cAAc,GAAGF,cAAc;QAC/C,MAAMM,cAAc,GAAGP,iBAAiB,GAAG,CAAC;QAC5C,KAAK,IAAItJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI4J,OAAO,EAAE5J,CAAC,EAAE,EAAE;UACjC0J,cAAc,CAACnF,GAAG,CAACgF,cAAc,GAAGvJ,CAAC,CAAC,CAAC6J,cAAc,CAAC,CAAC;QACzD;QACAP,iBAAiB,GAAGO,cAAc;MACpC;MACA,IAAIV,MAAM,GAAGI,cAAc,EAAE;QAC3B;QACA,MAAMO,UAAU,GAAGN,iBAAiB,GAAGF,iBAAiB;QACxD,MAAMhG,WAAW,GAAGiG,cAAc,GAAG,CAAC;QACtC,KAAK,IAAIvJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI8J,UAAU,EAAE9J,CAAC,EAAE,EAAE;UACpC0J,cAAc,CAACnF,GAAG,CAACjB,WAAW,CAAC,CAACgG,iBAAiB,GAAGtJ,CAAC,CAAC,CAAC;QACzD;QACAuJ,cAAc,GAAGjG,WAAW;MAC9B;MACA,IAAI8F,SAAS,GAAGI,iBAAiB,EAAE;QACjC;QACA,MAAMI,OAAO,GAAGH,cAAc,GAAGF,cAAc;QAC/C,MAAMvF,UAAU,GAAGwF,iBAAiB,GAAG,CAAC;QACxC,KAAK,IAAIxJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI4J,OAAO,EAAE5J,CAAC,EAAE,EAAE;UACjC0J,cAAc,CAACnF,GAAG,CAACgF,cAAc,GAAGvJ,CAAC,CAAC,CAACgE,UAAU,CAAC,CAAC;QACrD;QACAwF,iBAAiB,GAAGxF,UAAU;MAChC;MACA,IAAIqF,MAAM,GAAGI,cAAc,EAAE;QAC3B;QACA,MAAMK,UAAU,GAAGN,iBAAiB,GAAGF,iBAAiB;QACxD,MAAMzG,OAAO,GAAG4G,cAAc,GAAG,CAAC;QAClC,KAAK,IAAIzJ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI8J,UAAU,EAAE9J,CAAC,EAAE,EAAE;UACpC0J,cAAc,CAACnF,GAAG,CAAC1B,OAAO,CAAC,CAACyG,iBAAiB,GAAGtJ,CAAC,CAAC,CAAC;QACrD;QACAyJ,cAAc,GAAG5G,OAAO;MAC1B;IACF;IACA,MAAM8D,KAAK,GAAG,CAAC/K,SAAS,CAAC;IACzB,IAAImO,OAAO,GAAG,IAAI;IAClB,KAAK,IAAI/J,CAAC,GAAGmJ,MAAM,EAAEnJ,CAAC,IAAIqJ,MAAM,EAAErJ,CAAC,EAAE,EAAE;MACrC,KAAK,IAAI4E,CAAC,GAAGsE,SAAS,EAAEtE,CAAC,IAAIwE,SAAS,EAAExE,CAAC,EAAE,EAAE;QAC3C,MAAM;UACJ3E;QACF,CAAC,GAAGsE,GAAG,CAACvE,CAAC,CAAC,CAAC4E,CAAC,CAAC;QACb,MAAM9C,UAAU,GAAG7B,IAAI,CAACuF,SAAS,CAAC,CAAC;QACnC,IAAI,CAACnK,eAAe,CAACyG,UAAU,CAAC,EAAE;UAChC,MAAMrF,KAAK,CAAC,oDAAoD,CAAC;QACnE;QACA,IAAIqF,UAAU,KAAKiI,OAAO,EAAE;UAC1BpD,KAAK,CAAC7F,IAAI,CAACgB,UAAU,CAAC;QACxB;QACA6E,KAAK,CAAC7F,IAAI,CAACb,IAAI,EAAE,GAAG+J,uBAAuB,CAAC/J,IAAI,CAAC,CAAC;QAClD8J,OAAO,GAAGjI,UAAU;MACtB;IACF;IACA,IAAI,CAAC9N,OAAO,CAACiW,uBAAuB,CAAC,CAAC,EAAE;MACtC,IAAI,CAAC7D,YAAY,GAAGO,KAAK;IAC3B;IACA,OAAOA,KAAK;EACd;EACArM,cAAcA,CAAA,EAAG;IACf,MAAMqM,KAAK,GAAG,IAAI,CAACM,QAAQ,CAAC,CAAC;IAC7B,IAAIiD,WAAW,GAAG,EAAE;IACpB,KAAK,IAAIlK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2G,KAAK,CAACvQ,MAAM,EAAE4J,CAAC,EAAE,EAAE;MACrCkK,WAAW,IAAIvD,KAAK,CAAC3G,CAAC,CAAC,CAAC1F,cAAc,CAAC,CAAC;IAC1C;IACA,OAAO4P,WAAW;EACpB;AACF;AACA,SAAShL,iBAAiBA,CAAC/B,CAAC,EAAE;EAC5B,OAAOA,CAAC,YAAY8I,cAAc;AACpC;AACA,SAASkE,qBAAqBA,CAAA,EAAG;EAC/B,MAAMjJ,MAAM,GAAGlN,OAAO,CAACoW,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,SAAS,CAAC;EACzD,MAAMjL,KAAK,GAAGnL,OAAO,CAACoW,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,SAAS,CAAC;EACxD,OAAO,IAAInE,cAAc,CAAC,MAAM,EAAE/E,MAAM,EAAE/B,KAAK,CAAC;AAClD;AACA,SAAS6K,uBAAuBA,CAACrV,IAAI,EAAE;EACrC,MAAMgS,KAAK,GAAG,EAAE;EAChB,MAAM0D,KAAK,GAAG,CAAC1V,IAAI,CAAC;EACpB,OAAO0V,KAAK,CAACjU,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMkU,WAAW,GAAGD,KAAK,CAACE,GAAG,CAAC,CAAC;IAC/B,IAAI,EAAED,WAAW,KAAKtU,SAAS,CAAC,EAAE;MAChC,MAAMyG,KAAK,CAAC,sCAAsC,CAAC;IACrD;IACA,IAAIzI,OAAO,CAACkG,cAAc,CAACoQ,WAAW,CAAC,EAAE;MACvCD,KAAK,CAACG,OAAO,CAAC,GAAGF,WAAW,CAACzN,WAAW,CAAC,CAAC,CAAC;IAC7C;IACA,IAAIyN,WAAW,KAAK3V,IAAI,EAAE;MACxBgS,KAAK,CAAC7F,IAAI,CAACwJ,WAAW,CAAC;IACzB;EACF;EACA,OAAO3D,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM8D,eAAe,GAAGC,YAAY,IAAIpP,WAAW,GAAG,CAACoP,YAAY,IAAInP,MAAM,EAAEoP,YAAY,CAAC,CAAC,GAAG,IAAI;AACpG,MAAMC,aAAa,CAAC;EAClB1U,WAAWA,CAACiB,MAAM,EAAE0T,YAAY,EAAE;IAChC,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAAC;IAClC,IAAI,CAACP,YAAY,GAAGA,YAAY;IAChC,IAAI,CAAC1T,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC+F,KAAK,GAAG;MACXhB,OAAO,EAAE,CAAC;MACVmP,OAAO,EAAE,EAAE;MACXpP,IAAI,EAAE;IACR,CAAC;IACD,IAAI,CAACqP,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACrK,UAAU,GAAG,IAAI;IACtB,IAAI,CAAC9B,SAAS,GAAG,IAAI;IACrB,IAAI,CAACoM,0BAA0B,GAAG,KAAK;IACvC,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB;EACAC,QAAQA,CAAA,EAAG;IACT,OAAO,IAAI,CAACzO,KAAK;EACnB;EACA0O,eAAeA,CAAA,EAAG;IAChBhG,KAAK,CAACiG,IAAI,CAAC,IAAI,CAACV,iBAAiB,CAAC,CAACpK,OAAO,CAAC+K,cAAc,IAAIA,cAAc,CAAC,CAAC,CAAC;EAChF;EACAJ,UAAUA,CAAA,EAAG;IACX,MAAMK,QAAQ,GAAG,IAAIC,gBAAgB,CAACC,OAAO,IAAI;MAC/C,IAAI,CAAC9U,MAAM,CAAC+U,MAAM,CAAC,MAAM;QACvB,IAAIC,eAAe,GAAG,KAAK;QAC3B,KAAK,IAAInM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiM,OAAO,CAAC7V,MAAM,EAAE4J,CAAC,EAAE,EAAE;UACvC,MAAMoM,MAAM,GAAGH,OAAO,CAACjM,CAAC,CAAC;UACzB,MAAMqM,MAAM,GAAGD,MAAM,CAACC,MAAM;UAC5B,MAAM5S,QAAQ,GAAG4S,MAAM,CAAC5S,QAAQ;UAChC,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,IAAI,EAAE;YAC7C0S,eAAe,GAAG,IAAI;YACtB;UACF;QACF;QACA,IAAI,CAACA,eAAe,EAAE;UACpB;QACF;QACA,MAAMG,YAAY,GAAG,IAAI,CAACnV,MAAM,CAACoV,eAAe,CAAC,IAAI,CAAC1B,YAAY,CAAC;QACnE,IAAI,CAACyB,YAAY,EAAE;UACjB,MAAM,IAAI7P,KAAK,CAAC,sCAAsC,CAAC;QACzD;QACA,IAAI,CAACS,KAAK,GAAGyO,QAAQ,CAACW,YAAY,CAAC;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,IAAI,CAACnV,MAAM,CAAC+U,MAAM,CAAC,MAAM;MACvB,MAAMI,YAAY,GAAG,IAAI,CAACnV,MAAM,CAACoV,eAAe,CAAC,IAAI,CAAC1B,YAAY,CAAC;MACnE,IAAI,CAACyB,YAAY,EAAE;QACjB,MAAM,IAAI7P,KAAK,CAAC,sCAAsC,CAAC;MACzD;MACA,IAAI,CAACS,KAAK,GAAGyO,QAAQ,CAACW,YAAY,CAAC;MACnCP,QAAQ,CAACS,OAAO,CAACF,YAAY,EAAE;QAC7BG,SAAS,EAAE,IAAI;QACfC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EACAC,cAAcA,CAAA,EAAG;IACf,MAAMxV,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,IAAI,CAAC2T,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACI,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACrK,UAAU,GAAG,IAAI;IACtB,IAAI,CAAC9B,SAAS,GAAG,IAAI;IACrB,IAAI,CAACoM,0BAA0B,GAAG,KAAK;IACvC,IAAI,CAACmB,oBAAoB,CAAC,CAAC;IAC3BzV,MAAM,CAAC+U,MAAM,CAAC,MAAM;MAClB,MAAMtQ,SAAS,GAAG5H,OAAO,CAAC2T,aAAa,CAAC,IAAI,CAACkD,YAAY,CAAC;MAC1D,IAAI,CAAClO,YAAY,CAACf,SAAS,CAAC,EAAE;QAC5B,MAAM,IAAIa,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAM6P,YAAY,GAAGnV,MAAM,CAACoV,eAAe,CAAC,IAAI,CAAC1B,YAAY,CAAC;MAC9D,IAAI,CAACyB,YAAY,EAAE;QACjB,MAAM,IAAI7P,KAAK,CAAC,sCAAsC,CAAC;MACzD;MACA,MAAM6C,IAAI,GAAGqM,QAAQ,CAACW,YAAY,CAAC;MACnCO,sBAAsB,CAAC1V,MAAM,EAAEmI,IAAI,EAAE,IAAI,CAAC;MAC1CtL,OAAO,CAAC8Y,aAAa,CAAC,IAAI,CAAC;MAC3B3V,MAAM,CAAC4V,eAAe,CAAC/Y,OAAO,CAACgZ,wBAAwB,EAAEhX,SAAS,CAAC;IACrE,CAAC,CAAC;EACJ;EACA4W,oBAAoBA,CAAA,EAAG;IACrB,MAAMzV,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1BA,MAAM,CAAC+U,MAAM,CAAC,MAAM;MAClB,MAAMI,YAAY,GAAGnV,MAAM,CAACoV,eAAe,CAAC,IAAI,CAAC1B,YAAY,CAAC;MAC9D,IAAI,CAACyB,YAAY,EAAE;QACjB,MAAM,IAAI7P,KAAK,CAAC,sCAAsC,CAAC;MACzD;MACA3I,KAAK,CAACmZ,2BAA2B,CAACX,YAAY,EAAEnV,MAAM,CAAC+V,OAAO,CAACpW,KAAK,CAACwU,cAAc,CAAC;MACpFgB,YAAY,CAACa,SAAS,CAACpP,MAAM,CAAC,mBAAmB,CAAC;MAClD,IAAI,CAAC0N,0BAA0B,GAAG,KAAK;IACzC,CAAC,CAAC;EACJ;EACA2B,qBAAqBA,CAAA,EAAG;IACtB,MAAMjW,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1BA,MAAM,CAAC+U,MAAM,CAAC,MAAM;MAClB,MAAMI,YAAY,GAAGnV,MAAM,CAACoV,eAAe,CAAC,IAAI,CAAC1B,YAAY,CAAC;MAC9D,IAAI,CAACyB,YAAY,EAAE;QACjB,MAAM,IAAI7P,KAAK,CAAC,sCAAsC,CAAC;MACzD;MACA3I,KAAK,CAAC+C,sBAAsB,CAACyV,YAAY,EAAEnV,MAAM,CAAC+V,OAAO,CAACpW,KAAK,CAACwU,cAAc,CAAC;MAC/E,IAAI,CAACG,0BAA0B,GAAG,IAAI;IACxC,CAAC,CAAC;EACJ;EACA4B,yBAAyBA,CAACtO,SAAS,EAAE;IACnC,IAAIA,SAAS,KAAK,IAAI,IAAIA,SAAS,CAACmH,QAAQ,KAAK,IAAI,CAAC2E,YAAY,EAAE;MAClE,MAAM1T,MAAM,GAAG,IAAI,CAACA,MAAM;MAC1B,IAAI,CAACmU,cAAc,GAAGvM,SAAS;MAC/B,IAAI,CAAC+L,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CAACsC,qBAAqB,CAAC,CAAC;MAC5BP,sBAAsB,CAAC1V,MAAM,EAAE,IAAI,CAAC+F,KAAK,EAAE,IAAI,CAACoO,cAAc,CAAC;IACjE,CAAC,MAAM,IAAIvM,SAAS,IAAI,IAAI,EAAE;MAC5B,IAAI,CAAC4N,cAAc,CAAC,CAAC;IACvB,CAAC,MAAM;MACL,IAAI,CAAC9B,YAAY,GAAG9L,SAAS,CAACmH,QAAQ;MACtC,IAAI,CAACmH,yBAAyB,CAACtO,SAAS,CAAC;IAC3C;EACF;EACAuO,wBAAwBA,CAACrN,IAAI,EAAuB;IAAA,IAArBsN,WAAW,GAAApX,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAH,SAAA,GAAAG,SAAA,MAAG,KAAK;IAChD,MAAMgB,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1BA,MAAM,CAAC+U,MAAM,CAAC,MAAM;MAClB,MAAMtQ,SAAS,GAAG5H,OAAO,CAAC2T,aAAa,CAAC,IAAI,CAACkD,YAAY,CAAC;MAC1D,IAAI,CAAClO,YAAY,CAACf,SAAS,CAAC,EAAE;QAC5B,MAAM,IAAIa,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAM6P,YAAY,GAAGnV,MAAM,CAACoV,eAAe,CAAC,IAAI,CAAC1B,YAAY,CAAC;MAC9D,IAAI,CAACyB,YAAY,EAAE;QACjB,MAAM,IAAI7P,KAAK,CAAC,sCAAsC,CAAC;MACzD;MACA,MAAM+Q,KAAK,GAAGvN,IAAI,CAAC9C,CAAC;MACpB,MAAMsQ,KAAK,GAAGxN,IAAI,CAAC7C,CAAC;MACpB,IAAI,CAACiC,SAAS,GAAGY,IAAI;MACrB,IAAI,IAAI,CAACkB,UAAU,KAAK,IAAI,EAAE;QAC5B,MAAMuM,YAAY,GAAGjD,eAAe,CAACtT,MAAM,CAACwW,OAAO,CAAC;QACpD;QACA,IAAID,YAAY,EAAE;UAChBA,YAAY,CAACE,gBAAgB,CAAC,IAAI,CAACzM,UAAU,CAAC0M,IAAI,EAAE,CAAC,EAAE,IAAI,CAACxO,SAAS,CAACwO,IAAI,EAAE,CAAC,CAAC;QAChF;MACF;MACA,IAAI,CAAC,IAAI,CAAC/C,mBAAmB,KAAK,IAAI,CAACC,OAAO,KAAKyC,KAAK,IAAI,IAAI,CAACxC,OAAO,KAAKyC,KAAK,IAAIF,WAAW,CAAC,EAAE;QAClG,IAAI,CAACzC,mBAAmB,GAAG,IAAI;QAC/B,IAAI,CAACsC,qBAAqB,CAAC,CAAC;MAC9B,CAAC,MAAM,IAAII,KAAK,KAAK,IAAI,CAACvC,MAAM,IAAIwC,KAAK,KAAK,IAAI,CAACvC,MAAM,EAAE;QACzD;MACF;MACA,IAAI,CAACD,MAAM,GAAGuC,KAAK;MACnB,IAAI,CAACtC,MAAM,GAAGuC,KAAK;MACnB,IAAI,IAAI,CAAC3C,mBAAmB,EAAE;QAC5B,MAAMgD,kBAAkB,GAAG9Z,OAAO,CAAC+Z,0BAA0B,CAAC9N,IAAI,CAAC4N,IAAI,CAAC;QACxE,IAAI,IAAI,CAACvC,cAAc,IAAI,IAAI,IAAI,IAAI,CAACC,iBAAiB,IAAI,IAAI,IAAItR,gBAAgB,CAAC6T,kBAAkB,CAAC,EAAE;UACzG,MAAME,YAAY,GAAGF,kBAAkB,CAAChF,MAAM,CAAC,CAAC;UAChD,IAAI,CAACwC,cAAc,GAAG,IAAI,CAACA,cAAc,CAAC5W,KAAK,CAAC,CAAC,IAAIyV,qBAAqB,CAAC,CAAC;UAC5E,IAAI,CAACqB,gBAAgB,GAAGwC,YAAY;UACpC,IAAI,CAAC1C,cAAc,CAAC1E,GAAG,CAAC,IAAI,CAACiE,YAAY,EAAE,IAAI,CAACU,iBAAiB,EAAE,IAAI,CAACC,gBAAgB,CAAC;UACzFxX,OAAO,CAAC8Y,aAAa,CAAC,IAAI,CAACxB,cAAc,CAAC;UAC1CnU,MAAM,CAAC4V,eAAe,CAAC/Y,OAAO,CAACgZ,wBAAwB,EAAEhX,SAAS,CAAC;UACnE6W,sBAAsB,CAAC1V,MAAM,EAAE,IAAI,CAAC+F,KAAK,EAAE,IAAI,CAACoO,cAAc,CAAC;QACjE;MACF;IACF,CAAC,CAAC;EACJ;EACA2C,yBAAyBA,CAAChO,IAAI,EAAE;IAC9B,IAAI,CAAC6K,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAAC3J,UAAU,GAAGlB,IAAI;IACtB,IAAI,CAAC8K,OAAO,GAAG9K,IAAI,CAAC9C,CAAC;IACrB,IAAI,CAAC6N,OAAO,GAAG/K,IAAI,CAAC7C,CAAC;IACrB,IAAI,CAACjG,MAAM,CAAC+U,MAAM,CAAC,MAAM;MACvB,MAAMgC,mBAAmB,GAAGla,OAAO,CAAC+Z,0BAA0B,CAAC9N,IAAI,CAAC4N,IAAI,CAAC;MACzE,IAAI5T,gBAAgB,CAACiU,mBAAmB,CAAC,EAAE;QACzC,MAAMC,aAAa,GAAGD,mBAAmB,CAACpF,MAAM,CAAC,CAAC;QAClD,IAAI,CAACwC,cAAc,GAAG,IAAI,CAACA,cAAc,IAAI,IAAI,GAAG,IAAI,CAACA,cAAc,CAAC5W,KAAK,CAAC,CAAC,GAAGyV,qBAAqB,CAAC,CAAC;QACzG,IAAI,CAACoB,iBAAiB,GAAG4C,aAAa;MACxC;IACF,CAAC,CAAC;EACJ;EACAC,WAAWA,CAACnW,IAAI,EAAE;IAChB,IAAI,CAACd,MAAM,CAAC+U,MAAM,CAAC,MAAM;MACvB,MAAMnN,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;MACzC,IAAI,CAACE,iBAAiB,CAACH,SAAS,CAAC,EAAE;QACjC;UACE,MAAMtC,KAAK,CAAC,yBAAyB,CAAC;QACxC;MACF;MACA,MAAM4R,eAAe,GAAGra,OAAO,CAACsa,qBAAqB,CAAC,CAAC;MACvD,MAAMpN,MAAM,GAAGmN,eAAe,CAACnN,MAAM;MACrC,MAAM/B,KAAK,GAAGkP,eAAe,CAAClP,KAAK;MACnCJ,SAAS,CAACkI,QAAQ,CAAC,CAAC,CAAClG,OAAO,CAACnM,QAAQ,IAAI;QACvC,IAAIqF,gBAAgB,CAACrF,QAAQ,CAAC,IAAIA,QAAQ,CAAC2Z,kBAAkB,CAAC,CAAC,KAAK,CAAC,EAAE;UACrErN,MAAM,CAAC0F,GAAG,CAAChS,QAAQ,CAACkU,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC;UAC3C3J,KAAK,CAACyH,GAAG,CAAChS,QAAQ,CAACkU,MAAM,CAAC,CAAC,EAAElU,QAAQ,CAAC4C,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC;UACnE6W,eAAe,CAACG,UAAU,CAACvW,IAAI,CAAC;QAClC;MACF,CAAC,CAAC;MACFjE,OAAO,CAAC8Y,aAAa,CAAC/N,SAAS,CAAC;MAChC,IAAI,CAAC5H,MAAM,CAAC4V,eAAe,CAAC/Y,OAAO,CAACgZ,wBAAwB,EAAEhX,SAAS,CAAC;IAC1E,CAAC,CAAC;EACJ;EACAyY,SAASA,CAAA,EAAG;IACV,MAAMtX,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1BA,MAAM,CAAC+U,MAAM,CAAC,MAAM;MAClB,MAAMtQ,SAAS,GAAG5H,OAAO,CAAC2T,aAAa,CAAC,IAAI,CAACkD,YAAY,CAAC;MAC1D,IAAI,CAAClO,YAAY,CAACf,SAAS,CAAC,EAAE;QAC5B,MAAM,IAAIa,KAAK,CAAC,qBAAqB,CAAC;MACxC;MACA,MAAMsC,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;MACzC,IAAI,CAACE,iBAAiB,CAACH,SAAS,CAAC,EAAE;QACjC;UACE,MAAMtC,KAAK,CAAC,yBAAyB,CAAC;QACxC;MACF;MACA,MAAMiS,aAAa,GAAG3P,SAAS,CAACkI,QAAQ,CAAC,CAAC,CAAC0H,MAAM,CAAC1U,gBAAgB,CAAC;MACnE,IAAIyU,aAAa,CAACtY,MAAM,KAAK,IAAI,CAAC8G,KAAK,CAAChB,OAAO,GAAG,IAAI,CAACgB,KAAK,CAACjB,IAAI,EAAE;QACjEL,SAAS,CAACgI,cAAc,CAAC,CAAC;QAC1B;QACAhI,SAAS,CAACmC,MAAM,CAAC,CAAC;QAClB,MAAM6Q,QAAQ,GAAG5a,OAAO,CAAC6a,QAAQ,CAAC,CAAC;QACnCD,QAAQ,CAACzK,WAAW,CAAC,CAAC;QACtB;MACF;MACAuK,aAAa,CAAC3N,OAAO,CAACnM,QAAQ,IAAI;QAChC,IAAIZ,OAAO,CAACkG,cAAc,CAACtF,QAAQ,CAAC,EAAE;UACpC,MAAMuF,aAAa,GAAGnG,OAAO,CAACoG,oBAAoB,CAAC,CAAC;UACpD,MAAM0U,QAAQ,GAAG9a,OAAO,CAACmI,eAAe,CAAC,CAAC;UAC1ChC,aAAa,CAACI,MAAM,CAACuU,QAAQ,CAAC;UAC9Bla,QAAQ,CAAC2F,MAAM,CAACJ,aAAa,CAAC;UAC9BvF,QAAQ,CAACiI,WAAW,CAAC,CAAC,CAACkE,OAAO,CAACgO,KAAK,IAAI;YACtC,IAAIA,KAAK,KAAK5U,aAAa,EAAE;cAC3B4U,KAAK,CAAChR,MAAM,CAAC,CAAC;YAChB;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MACF8O,sBAAsB,CAAC1V,MAAM,EAAE,IAAI,CAAC+F,KAAK,EAAE,IAAI,CAAC;MAChDlJ,OAAO,CAAC8Y,aAAa,CAAC,IAAI,CAAC;MAC3B3V,MAAM,CAAC4V,eAAe,CAAC/Y,OAAO,CAACgZ,wBAAwB,EAAEhX,SAAS,CAAC;IACrE,CAAC,CAAC;EACJ;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgZ,mBAAmB,GAAG,yBAAyB;AACrD,SAASC,kBAAkBA,CAACrT,SAAS,EAAE0Q,YAAY,EAAEnV,MAAM,EAAE+X,aAAa,EAAE;EAC1E,MAAMC,WAAW,GAAGhY,MAAM,CAACiY,cAAc,CAAC,CAAC;EAC3C,IAAID,WAAW,KAAK,IAAI,EAAE;IACxB,MAAM,IAAI1S,KAAK,CAAC,kBAAkB,CAAC;EACrC;EACA,MAAM4S,aAAa,GAAG,IAAIzE,aAAa,CAACzT,MAAM,EAAEyE,SAAS,CAACkN,MAAM,CAAC,CAAC,CAAC;EACnE,MAAMwG,YAAY,GAAGnY,MAAM,CAACwW,OAAO,IAAIpS,MAAM;EAC7CgU,iCAAiC,CAACjD,YAAY,EAAE+C,aAAa,CAAC;EAC9D/C,YAAY,CAACkD,gBAAgB,CAAC,WAAW,EAAEC,KAAK,IAAI;IAClDC,UAAU,CAAC,MAAM;MACf,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;QACtB;MACF;MACA,IAAI,CAACL,YAAY,EAAE;QACjB;MACF;MACA,MAAMnO,UAAU,GAAGyO,oBAAoB,CAACH,KAAK,CAACpD,MAAM,CAAC;MACrD,IAAIlL,UAAU,KAAK,IAAI,EAAE;QACvB0O,SAAS,CAACJ,KAAK,CAAC;QAChBJ,aAAa,CAACpB,yBAAyB,CAAC9M,UAAU,CAAC;MACrD;MACA,MAAM2O,SAAS,GAAGA,CAAA,KAAM;QACtBR,YAAY,CAACS,mBAAmB,CAAC,SAAS,EAAED,SAAS,CAAC;QACtDR,YAAY,CAACS,mBAAmB,CAAC,WAAW,EAAEC,WAAW,CAAC;MAC5D,CAAC;MACD,MAAMA,WAAW,GAAGC,SAAS,IAAI;QAC/B,MAAM5Q,SAAS,GAAGuQ,oBAAoB,CAACK,SAAS,CAAC5D,MAAM,CAAC;QACxD,IAAIhN,SAAS,KAAK,IAAI,KAAKgQ,aAAa,CAACtE,OAAO,KAAK1L,SAAS,CAAClC,CAAC,IAAIkS,aAAa,CAACrE,OAAO,KAAK3L,SAAS,CAACjC,CAAC,CAAC,EAAE;UAC1G6S,SAAS,CAACC,cAAc,CAAC,CAAC;UAC1Bb,aAAa,CAAC/B,wBAAwB,CAACjO,SAAS,CAAC;QACnD;MACF,CAAC;MACDiQ,YAAY,CAACE,gBAAgB,CAAC,SAAS,EAAEM,SAAS,CAAC;MACnDR,YAAY,CAACE,gBAAgB,CAAC,WAAW,EAAEQ,WAAW,CAAC;IACzD,CAAC,EAAE,CAAC,CAAC;EACP,CAAC,CAAC;;EAEF;EACA,MAAMG,iBAAiB,GAAGV,KAAK,IAAI;IACjC,IAAIA,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;MACtB;IACF;IACAxY,MAAM,CAAC+U,MAAM,CAAC,MAAM;MAClB,MAAMnN,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;MACzC,MAAMqN,MAAM,GAAGoD,KAAK,CAACpD,MAAM;MAC3B,IAAInN,iBAAiB,CAACH,SAAS,CAAC,IAAIA,SAAS,CAACmH,QAAQ,KAAKmJ,aAAa,CAACxE,YAAY,IAAIsE,WAAW,CAACiB,QAAQ,CAAC/D,MAAM,CAAC,EAAE;QACrHgD,aAAa,CAAC1C,cAAc,CAAC,CAAC;MAChC;IACF,CAAC,CAAC;EACJ,CAAC;EACD2C,YAAY,CAACE,gBAAgB,CAAC,WAAW,EAAEW,iBAAiB,CAAC;EAC7Dd,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAC,MAAMf,YAAY,CAACS,mBAAmB,CAAC,WAAW,EAAEI,iBAAiB,CAAC,CAAC;EAC3Gd,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACuc,sBAAsB,EAAEd,KAAK,IAAIe,eAAe,CAACrZ,MAAM,EAAEsY,KAAK,EAAE,MAAM,EAAE7T,SAAS,EAAEyT,aAAa,CAAC,EAAErb,OAAO,CAACyc,qBAAqB,CAAC,CAAC;EACrMpB,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAAC0c,oBAAoB,EAAEjB,KAAK,IAAIe,eAAe,CAACrZ,MAAM,EAAEsY,KAAK,EAAE,IAAI,EAAE7T,SAAS,EAAEyT,aAAa,CAAC,EAAErb,OAAO,CAACyc,qBAAqB,CAAC,CAAC;EACjMpB,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAAC2c,sBAAsB,EAAElB,KAAK,IAAIe,eAAe,CAACrZ,MAAM,EAAEsY,KAAK,EAAE,UAAU,EAAE7T,SAAS,EAAEyT,aAAa,CAAC,EAAErb,OAAO,CAACyc,qBAAqB,CAAC,CAAC;EACzMpB,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAAC4c,uBAAuB,EAAEnB,KAAK,IAAIe,eAAe,CAACrZ,MAAM,EAAEsY,KAAK,EAAE,SAAS,EAAE7T,SAAS,EAAEyT,aAAa,CAAC,EAAErb,OAAO,CAACyc,qBAAqB,CAAC,CAAC;EACzMpB,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAAC6c,kBAAkB,EAAEpB,KAAK,IAAI;IAC9F,MAAM1Q,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;IACzC,IAAIE,iBAAiB,CAACH,SAAS,CAAC,EAAE;MAChC,MAAM8I,aAAa,GAAG/T,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC,EAAEnF,gBAAgB,CAAC;MAC5F,IAAIA,gBAAgB,CAAC4N,aAAa,CAAC,EAAE;QACnCgI,SAAS,CAACJ,KAAK,CAAC;QAChB5H,aAAa,CAACiJ,SAAS,CAAC,CAAC;QACzB,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd,CAAC,EAAE9c,OAAO,CAACyc,qBAAqB,CAAC,CAAC;EAClC,MAAMM,iBAAiB,GAAGC,OAAO,IAAI,MAAM;IACzC,MAAMjS,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;IACzC,IAAI,CAACiS,mBAAmB,CAAClS,SAAS,EAAEnD,SAAS,CAAC,EAAE;MAC9C,OAAO,KAAK;IACd;IACA,IAAIsD,iBAAiB,CAACH,SAAS,CAAC,EAAE;MAChCsQ,aAAa,CAACZ,SAAS,CAAC,CAAC;MACzB,OAAO,IAAI;IACb,CAAC,MAAM,IAAIza,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,EAAE;MAC/C,MAAMlF,aAAa,GAAG/F,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC;MACrG,IAAI,CAACtC,gBAAgB,CAACJ,aAAa,CAAC,EAAE;QACpC,OAAO,KAAK;MACd;MACA,MAAM2O,UAAU,GAAGzJ,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC;MAC7C,MAAMkI,SAAS,GAAGvI,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC;MAC3C,MAAM8R,cAAc,GAAGtV,SAAS,CAACgN,UAAU,CAACJ,UAAU,CAAC;MACvD,MAAM2I,aAAa,GAAGvV,SAAS,CAACgN,UAAU,CAACtB,SAAS,CAAC;MACrD,MAAM8J,6BAA6B,GAAGF,cAAc,IAAI,CAACC,aAAa,IAAIA,aAAa,IAAI,CAACD,cAAc;MAC1G,IAAIE,6BAA6B,EAAE;QACjC/B,aAAa,CAACZ,SAAS,CAAC,CAAC;QACzB,OAAO,IAAI;MACb;MACA,MAAM4C,kBAAkB,GAAGvd,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAIvI,OAAO,CAACkG,cAAc,CAACqC,CAAC,CAAC,CAAC;MAChH,MAAM+U,uBAAuB,GAAGD,kBAAkB,IAAIvd,KAAK,CAACwI,mBAAmB,CAAC+U,kBAAkB,EAAE9U,CAAC,IAAIvI,OAAO,CAACkG,cAAc,CAACqC,CAAC,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAACiJ,SAAS,CAAC,CAAC,CAAC,CAAC;MACtK,IAAI,CAACxR,OAAO,CAACkG,cAAc,CAACoX,uBAAuB,CAAC,IAAI,CAACtd,OAAO,CAACkG,cAAc,CAACmX,kBAAkB,CAAC,EAAE;QACnG,OAAO,KAAK;MACd;MACA,IAAIL,OAAO,KAAKhd,OAAO,CAACud,mBAAmB,IAAID,uBAAuB,CAACE,kBAAkB,CAAC,CAAC,KAAK,IAAI,EAAE;QACpG;QACA,OAAO,IAAI;MACb;MACA,IAAIR,OAAO,KAAKhd,OAAO,CAACyd,wBAAwB,IAAIT,OAAO,KAAKhd,OAAO,CAAC0d,mBAAmB,EAAE;QAC3F,IAAI3S,SAAS,CAACgI,WAAW,CAAC,CAAC,IAAIhI,SAAS,CAACmC,MAAM,CAACyQ,MAAM,KAAK,CAAC,EAAE;UAC5D,IAAIN,kBAAkB,KAAKC,uBAAuB,EAAE;YAClD,MAAMM,QAAQ,GAAGP,kBAAkB,CAACxU,WAAW,CAAC,CAAC;YACjD,MAAMgV,gBAAgB,GAAG7d,OAAO,CAACoG,oBAAoB,CAAC,CAAC;YACvDwX,QAAQ,CAAC7Q,OAAO,CAACgO,KAAK,IAAI8C,gBAAgB,CAACtX,MAAM,CAACwU,KAAK,CAAC,CAAC;YACzDsC,kBAAkB,CAACS,OAAO,CAACD,gBAAgB,CAAC;YAC5CR,kBAAkB,CAACjZ,WAAW,CAAC,CAAC,CAAC2Z,QAAQ,GAAGlY,aAAa,CAACiP,MAAM,CAAC,CAAC;YAClE,OAAO,IAAI;UACb;QACF;MACF;IACF;IACA,OAAO,KAAK;EACd,CAAC;EACD,CAAC9U,OAAO,CAAC0d,mBAAmB,EAAE1d,OAAO,CAACud,mBAAmB,EAAEvd,OAAO,CAACyd,wBAAwB,CAAC,CAAC1Q,OAAO,CAACiQ,OAAO,IAAI;IAC9G3B,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACU,OAAO,EAAED,iBAAiB,CAACC,OAAO,CAAC,EAAEhd,OAAO,CAACge,yBAAyB,CAAC,CAAC;EACrI,CAAC,CAAC;EACF,MAAMC,iBAAiB,GAAGxC,KAAK,IAAI;IACjC,MAAM1Q,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;IACzC,IAAI,CAACiS,mBAAmB,CAAClS,SAAS,EAAEnD,SAAS,CAAC,EAAE;MAC9C,OAAO,KAAK;IACd;IACA,IAAIsD,iBAAiB,CAACH,SAAS,CAAC,EAAE;MAChC0Q,KAAK,CAACS,cAAc,CAAC,CAAC;MACtBT,KAAK,CAACyC,eAAe,CAAC,CAAC;MACvB7C,aAAa,CAACZ,SAAS,CAAC,CAAC;MACzB,OAAO,IAAI;IACb,CAAC,MAAM,IAAIza,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,EAAE;MAC/C,MAAMlF,aAAa,GAAG/F,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC;MACrG,IAAI,CAACtC,gBAAgB,CAACJ,aAAa,CAAC,EAAE;QACpC,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd,CAAC;EACDwV,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACme,qBAAqB,EAAEF,iBAAiB,EAAEje,OAAO,CAACge,yBAAyB,CAAC,CAAC;EAChJ3C,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACoe,kBAAkB,EAAEH,iBAAiB,EAAEje,OAAO,CAACge,yBAAyB,CAAC,CAAC;EAC7I3C,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACqe,mBAAmB,EAAEC,OAAO,IAAI;IACjG,MAAMvT,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;IACzC,IAAI,CAACiS,mBAAmB,CAAClS,SAAS,EAAEnD,SAAS,CAAC,EAAE;MAC9C,OAAO,KAAK;IACd;IACA,IAAIsD,iBAAiB,CAACH,SAAS,CAAC,EAAE;MAChCsQ,aAAa,CAACjB,WAAW,CAACkE,OAAO,CAAC;MAClC,OAAO,IAAI;IACb,CAAC,MAAM,IAAIte,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,EAAE;MAC/C,MAAMlF,aAAa,GAAG/F,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC;MACrG,IAAI,CAACtC,gBAAgB,CAACJ,aAAa,CAAC,EAAE;QACpC,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd,CAAC,EAAE7F,OAAO,CAACge,yBAAyB,CAAC,CAAC;EACtC3C,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACue,iCAAiC,EAAED,OAAO,IAAI;IAC/G,MAAMvT,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;IACzC,IAAI,CAACiS,mBAAmB,CAAClS,SAAS,EAAEnD,SAAS,CAAC,EAAE;MAC9C,OAAO,KAAK;IACd;IACA,IAAIsD,iBAAiB,CAACH,SAAS,CAAC,EAAE;MAChCsQ,aAAa,CAAC1C,cAAc,CAAC,CAAC;MAC9B,OAAO,KAAK;IACd,CAAC,MAAM,IAAI3Y,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,EAAE;MAC/C,MAAMlF,aAAa,GAAG/F,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC;MACrG,IAAI,CAACtC,gBAAgB,CAACJ,aAAa,CAAC,EAAE;QACpC,OAAO,KAAK;MACd;IACF;IACA,OAAO,KAAK;EACd,CAAC,EAAE7F,OAAO,CAACge,yBAAyB,CAAC,CAAC;EACtC,IAAI9C,aAAa,EAAE;IACjBG,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACwe,eAAe,EAAE/C,KAAK,IAAI;MAC3F,MAAM1Q,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;MACzC,IAAI,CAAChL,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAI,CAACA,SAAS,CAACgI,WAAW,CAAC,CAAC,IAAI,CAACkK,mBAAmB,CAAClS,SAAS,EAAEnD,SAAS,CAAC,EAAE;QACnH,OAAO,KAAK;MACd;MACA,MAAM/B,aAAa,GAAG4Y,aAAa,CAAC1T,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,CAAC;MAC/D,IAAIvF,aAAa,KAAK,IAAI,EAAE;QAC1B,OAAO,KAAK;MACd;MACAgW,SAAS,CAACJ,KAAK,CAAC;MAChB,MAAMiD,YAAY,GAAG9W,SAAS,CAACyB,oBAAoB,CAACxD,aAAa,EAAEwV,aAAa,CAACnS,KAAK,CAAC;MACvFyV,0BAA0B,CAACtD,aAAa,EAAEzT,SAAS,EAAE8W,YAAY,CAACvV,CAAC,EAAEuV,YAAY,CAACtV,CAAC,EAAE,CAACqS,KAAK,CAACmD,QAAQ,GAAG,SAAS,GAAG,UAAU,CAAC;MAC9H,OAAO,IAAI;IACb,CAAC,EAAE5e,OAAO,CAACge,yBAAyB,CAAC,CAAC;EACxC;EACA3C,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAAC6e,aAAa,EAAEP,OAAO,IAAI;IAC3F,OAAO1W,SAAS,CAACkX,UAAU,CAAC,CAAC;EAC/B,CAAC,EAAE9e,OAAO,CAACyc,qBAAqB,CAAC,CAAC;EAClC,SAASsC,2BAA2BA,CAAClZ,aAAa,EAAE;IAClD,MAAM6Y,YAAY,GAAG9W,SAAS,CAACyB,oBAAoB,CAACxD,aAAa,EAAEwV,aAAa,CAACnS,KAAK,CAAC;IACvF,OAAOtB,SAAS,CAACoX,0BAA0B,CAACN,YAAY,CAACvV,CAAC,EAAEuV,YAAY,CAACtV,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC;EAClG;EACAmS,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACif,wCAAwC,EAAEC,gBAAgB,IAAI;IAC/H,MAAM;MACJvM,KAAK;MACL5H;IACF,CAAC,GAAGmU,gBAAgB;IACpB,MAAMC,cAAc,GAAGpU,SAAS,CAACuH,iBAAiB,CAAC,CAAC;IACpD,MAAM8M,gBAAgB,GAAGlU,iBAAiB,CAACH,SAAS,CAAC;IACrD,MAAMsU,gBAAgB,GAAGrf,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC;IAC7D,MAAMuU,uBAAuB,GAAGD,gBAAgB,IAAIvf,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIzI,KAAK,CAACwI,mBAAmB,CAACyC,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI6W,gBAAgB;IAC3P,IAAIzM,KAAK,CAACvQ,MAAM,KAAK,CAAC,IAAI,CAACuG,YAAY,CAACgK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC2M,uBAAuB,IAAIH,cAAc,KAAK,IAAI,EAAE;MACxG,OAAO,KAAK;IACd;IACA,MAAM,CAACjS,MAAM,CAAC,GAAGiS,cAAc;IAC/B,MAAMI,OAAO,GAAG5M,KAAK,CAAC,CAAC,CAAC;IACxB,MAAM6M,WAAW,GAAGD,OAAO,CAAC1W,WAAW,CAAC,CAAC;IACzC,MAAM4W,cAAc,GAAGF,OAAO,CAACG,oBAAoB,CAAC,CAAC,CAAClc,eAAe,CAAC,CAAC;IACvE,MAAMmc,WAAW,GAAGJ,OAAO,CAAC/b,eAAe,CAAC,CAAC;IAC7C,MAAMoc,YAAY,GAAG9f,KAAK,CAACwI,mBAAmB,CAAC4E,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAE7C,CAAC,IAAItC,gBAAgB,CAACsC,CAAC,CAAC,CAAC;IAC1F,MAAMsX,WAAW,GAAGD,YAAY,IAAI9f,KAAK,CAACwI,mBAAmB,CAACsX,YAAY,EAAErX,CAAC,IAAIlB,eAAe,CAACkB,CAAC,CAAC,CAAC;IACpG,MAAMmJ,QAAQ,GAAGmO,WAAW,IAAI/f,KAAK,CAACwI,mBAAmB,CAACuX,WAAW,EAAEtX,CAAC,IAAII,YAAY,CAACJ,CAAC,CAAC,CAAC;IAC5F,IAAI,CAACtC,gBAAgB,CAAC2Z,YAAY,CAAC,IAAI,CAACvY,eAAe,CAACwY,WAAW,CAAC,IAAI,CAAClX,YAAY,CAAC+I,QAAQ,CAAC,EAAE;MAC/F,OAAO,KAAK;IACd;IACA,MAAMuC,MAAM,GAAG4L,WAAW,CAACC,oBAAoB,CAAC,CAAC;IACjD,MAAM5L,KAAK,GAAGvQ,IAAI,CAAC2J,GAAG,CAACoE,QAAQ,CAAClO,eAAe,CAAC,CAAC,GAAG,CAAC,EAAEyQ,MAAM,GAAG0L,WAAW,GAAG,CAAC,CAAC;IAChF,MAAM5L,MAAM,GAAG6L,YAAY,CAACE,oBAAoB,CAAC,CAAC;IAClD,MAAM9L,KAAK,GAAGrQ,IAAI,CAAC2J,GAAG,CAACuS,WAAW,CAACrc,eAAe,CAAC,CAAC,GAAG,CAAC,EAAEuQ,MAAM,GAAG0L,cAAc,GAAG,CAAC,CAAC;IACtF,MAAMtL,KAAK,GAAGxQ,IAAI,CAAC2J,GAAG,CAACyG,MAAM,EAAEC,KAAK,CAAC;IACrC,MAAMI,KAAK,GAAGzQ,IAAI,CAAC2J,GAAG,CAAC2G,MAAM,EAAEC,KAAK,CAAC;IACrC,MAAMG,GAAG,GAAG1Q,IAAI,CAACC,GAAG,CAACmQ,MAAM,EAAEC,KAAK,CAAC;IACnC,MAAMM,GAAG,GAAG3Q,IAAI,CAACC,GAAG,CAACqQ,MAAM,EAAEC,KAAK,CAAC;IACnC,MAAM6L,YAAY,GAAGrO,QAAQ,CAAC7I,WAAW,CAAC,CAAC;IAC3C,IAAImX,SAAS,GAAG,CAAC;IACjB,IAAIC,gBAAgB;IACpB,IAAIC,eAAe;IACnB,KAAK,IAAI/V,CAAC,GAAGiK,KAAK,EAAEjK,CAAC,IAAImK,GAAG,EAAEnK,CAAC,EAAE,EAAE;MACjC,MAAMgW,kBAAkB,GAAGJ,YAAY,CAAC5V,CAAC,CAAC;MAC1C,IAAI,CAAC9C,eAAe,CAAC8Y,kBAAkB,CAAC,EAAE;QACxC,OAAO,KAAK;MACd;MACA,MAAMC,cAAc,GAAGZ,WAAW,CAACQ,SAAS,CAAC;MAC7C,IAAI,CAAC3Y,eAAe,CAAC+Y,cAAc,CAAC,EAAE;QACpC,OAAO,KAAK;MACd;MACA,MAAMC,aAAa,GAAGF,kBAAkB,CAACtX,WAAW,CAAC,CAAC;MACtD,MAAMyX,gBAAgB,GAAGF,cAAc,CAACvX,WAAW,CAAC,CAAC;MACrD,IAAI0X,YAAY,GAAG,CAAC;MACpB,KAAK,IAAIhW,CAAC,GAAG4J,KAAK,EAAE5J,CAAC,IAAI8J,GAAG,EAAE9J,CAAC,EAAE,EAAE;QACjC,MAAMiW,mBAAmB,GAAGH,aAAa,CAAC9V,CAAC,CAAC;QAC5C,IAAI,CAACtE,gBAAgB,CAACua,mBAAmB,CAAC,EAAE;UAC1C,OAAO,KAAK;QACd;QACA,MAAMC,eAAe,GAAGH,gBAAgB,CAACC,YAAY,CAAC;QACtD,IAAI,CAACta,gBAAgB,CAACwa,eAAe,CAAC,EAAE;UACtC,OAAO,KAAK;QACd;QACA,IAAItW,CAAC,KAAKiK,KAAK,IAAI7J,CAAC,KAAK4J,KAAK,EAAE;UAC9B8L,gBAAgB,GAAGO,mBAAmB,CAAC1L,MAAM,CAAC,CAAC;QACjD,CAAC,MAAM,IAAI3K,CAAC,KAAKmK,GAAG,IAAI/J,CAAC,KAAK8J,GAAG,EAAE;UACjC6L,eAAe,GAAGM,mBAAmB,CAAC1L,MAAM,CAAC,CAAC;QAChD;QACA,MAAM4L,gBAAgB,GAAGF,mBAAmB,CAAC3X,WAAW,CAAC,CAAC;QAC1D4X,eAAe,CAAC5X,WAAW,CAAC,CAAC,CAACkE,OAAO,CAACgO,KAAK,IAAI;UAC7C,IAAI/a,OAAO,CAAC2gB,WAAW,CAAC5F,KAAK,CAAC,EAAE;YAC9B,MAAM5U,aAAa,GAAGnG,OAAO,CAACoG,oBAAoB,CAAC,CAAC;YACpDD,aAAa,CAACI,MAAM,CAACwU,KAAK,CAAC;YAC3ByF,mBAAmB,CAACja,MAAM,CAACwU,KAAK,CAAC;UACnC,CAAC,MAAM;YACLyF,mBAAmB,CAACja,MAAM,CAACwU,KAAK,CAAC;UACnC;QACF,CAAC,CAAC;QACF2F,gBAAgB,CAAC3T,OAAO,CAACxE,CAAC,IAAIA,CAAC,CAACwB,MAAM,CAAC,CAAC,CAAC;QACzCwW,YAAY,EAAE;MAChB;MACAP,SAAS,EAAE;IACb;IACA,IAAIC,gBAAgB,IAAIC,eAAe,EAAE;MACvC,MAAMU,iBAAiB,GAAGzK,qBAAqB,CAAC,CAAC;MACjDyK,iBAAiB,CAAChO,GAAG,CAACD,KAAK,CAAC,CAAC,CAAC,CAACmC,MAAM,CAAC,CAAC,EAAEmL,gBAAgB,EAAEC,eAAe,CAAC;MAC3ElgB,OAAO,CAAC8Y,aAAa,CAAC8H,iBAAiB,CAAC;IAC1C;IACA,OAAO,IAAI;EACb,CAAC,EAAE5gB,OAAO,CAACge,yBAAyB,CAAC,CAAC;EACtC3C,aAAa,CAAClE,iBAAiB,CAACkF,GAAG,CAAClZ,MAAM,CAACmZ,eAAe,CAACtc,OAAO,CAACgZ,wBAAwB,EAAE,MAAM;IACjG,MAAMjO,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;IACzC,MAAM6V,aAAa,GAAG7gB,OAAO,CAAC8gB,qBAAqB,CAAC,CAAC;IACrD,IAAI9gB,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,EAAE;MACxC,MAAM;QACJmC,MAAM;QACN/B;MACF,CAAC,GAAGJ,SAAS;MACb,MAAMyJ,UAAU,GAAGtH,MAAM,CAAC9B,OAAO,CAAC,CAAC;MACnC,MAAMkI,SAAS,GAAGnI,KAAK,CAACC,OAAO,CAAC,CAAC;MACjC;MACA;MACA,MAAMsI,cAAc,GAAG+K,aAAa,CAACjK,UAAU,CAAC;MAChD,MAAMX,aAAa,GAAG4K,aAAa,CAACnL,SAAS,CAAC;MAC9C,MAAM4J,cAAc,GAAGxJ,cAAc,IAAI9L,SAAS,CAACmB,EAAE,CAACgY,cAAc,CAACrN,cAAc,CAAC,CAAC;MACrF,MAAMyJ,aAAa,GAAGtJ,aAAa,IAAIjM,SAAS,CAACmB,EAAE,CAACgY,cAAc,CAAClN,aAAa,CAAC,CAAC;MAClF,MAAMmN,qBAAqB,GAAG9D,cAAc,KAAKC,aAAa;MAC9D,MAAM8D,aAAa,GAAG/D,cAAc,IAAIC,aAAa;MACrD,MAAM5K,UAAU,GAAGxH,SAAS,CAACwH,UAAU,CAAC,CAAC;MACzC,IAAIyO,qBAAqB,EAAE;QACzB,MAAME,YAAY,GAAGnW,SAAS,CAACrK,KAAK,CAAC,CAAC;QACtCwgB,YAAY,CAAC/V,KAAK,CAACyH,GAAG,CAAChL,SAAS,CAACkN,MAAM,CAAC,CAAC,EAAEvC,UAAU,GAAG,CAAC,GAAG3K,SAAS,CAACpE,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC;QACnGxD,OAAO,CAAC8Y,aAAa,CAACoI,YAAY,CAAC;QACnCC,yBAAyB,CAAChe,MAAM,EAAEkY,aAAa,CAAC;MAClD,CAAC,MAAM,IAAI4F,aAAa,EAAE;QACxB;QACA;QACA,IAAI,CAACvN,cAAc,CAAC3K,EAAE,CAAC8K,aAAa,CAAC,EAAE;UACrCwH,aAAa,CAACpB,yBAAyB,CAAC8E,2BAA2B,CAACrL,cAAc,CAAC,CAAC;UACpF2H,aAAa,CAAC/B,wBAAwB,CAACyF,2BAA2B,CAAClL,aAAa,CAAC,EAAE,IAAI,CAAC;QAC1F;MACF;IACF;IACA,IAAI9I,SAAS,IAAI,CAACA,SAAS,CAAChC,EAAE,CAAC8X,aAAa,CAAC,KAAK3V,iBAAiB,CAACH,SAAS,CAAC,IAAIG,iBAAiB,CAAC2V,aAAa,CAAC,CAAC,IAAIxF,aAAa,CAAC/D,cAAc,IAAI,CAAC+D,aAAa,CAAC/D,cAAc,CAACvO,EAAE,CAAC8X,aAAa,CAAC,EAAE;MACtM,IAAI3V,iBAAiB,CAACH,SAAS,CAAC,IAAIA,SAAS,CAACmH,QAAQ,KAAKmJ,aAAa,CAACxE,YAAY,EAAE;QACrFwE,aAAa,CAAChC,yBAAyB,CAACtO,SAAS,CAAC;MACpD,CAAC,MAAM,IAAI,CAACG,iBAAiB,CAACH,SAAS,CAAC,IAAIG,iBAAiB,CAAC2V,aAAa,CAAC,IAAIA,aAAa,CAAC3O,QAAQ,KAAKmJ,aAAa,CAACxE,YAAY,EAAE;QACrIwE,aAAa,CAAChC,yBAAyB,CAAC,IAAI,CAAC;MAC/C;MACA,OAAO,KAAK;IACd;IACA,IAAIgC,aAAa,CAAC5D,0BAA0B,IAAI,CAAC7P,SAAS,CAACkX,UAAU,CAAC,CAAC,EAAE;MACvEsC,4BAA4B,CAACje,MAAM,EAAEkY,aAAa,CAAC;IACrD,CAAC,MAAM,IAAI,CAACA,aAAa,CAAC5D,0BAA0B,IAAI7P,SAAS,CAACkX,UAAU,CAAC,CAAC,EAAE;MAC9EqC,yBAAyB,CAAChe,MAAM,EAAEkY,aAAa,CAAC;IAClD;IACA,OAAO,KAAK;EACd,CAAC,EAAErb,OAAO,CAACge,yBAAyB,CAAC,CAAC;EACtC,OAAO3C,aAAa;AACtB;AACA,SAASE,iCAAiCA,CAACjD,YAAY,EAAE+C,aAAa,EAAE;EACtE/C,YAAY,CAAC0C,mBAAmB,CAAC,GAAGK,aAAa;AACnD;AACA,SAASgG,gCAAgCA,CAAC/I,YAAY,EAAE;EACtD,OAAOA,YAAY,CAAC0C,mBAAmB,CAAC;AAC1C;AACA,SAASY,oBAAoBA,CAACjb,IAAI,EAAE;EAClC,IAAI2V,WAAW,GAAG3V,IAAI;EACtB,OAAO2V,WAAW,IAAI,IAAI,EAAE;IAC1B,MAAM7Q,QAAQ,GAAG6Q,WAAW,CAAC7Q,QAAQ;IACrC,IAAIA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;MAC1C;MACA,MAAMwG,IAAI,GAAGqK,WAAW,CAACgL,KAAK;MAC9B,IAAIrV,IAAI,KAAKjK,SAAS,EAAE;QACtB,OAAO,IAAI;MACb;MACA,OAAOiK,IAAI;IACb;IACAqK,WAAW,GAAGA,WAAW,CAACiL,UAAU;EACtC;EACA,OAAO,IAAI;AACb;AACA,SAAS5J,QAAQA,CAACW,YAAY,EAAE;EAC9B,MAAMjB,OAAO,GAAG,EAAE;EAClB,MAAM/L,IAAI,GAAG;IACXpD,OAAO,EAAE,CAAC;IACVmP,OAAO;IACPpP,IAAI,EAAE;EACR,CAAC;EACD,IAAIqO,WAAW,GAAGgC,YAAY,CAACjI,UAAU;EACzC,IAAIlH,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EACTiO,OAAO,CAACjV,MAAM,GAAG,CAAC;EAClB,OAAOkU,WAAW,IAAI,IAAI,EAAE;IAC1B,MAAMkL,QAAQ,GAAGlL,WAAW,CAAC7Q,QAAQ;IACrC,IAAI+b,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;MAC1C,MAAM3H,IAAI,GAAGvD,WAAW;MACxB,MAAMrK,IAAI,GAAG;QACX4N,IAAI;QACJ4H,kBAAkB,EAAE5H,IAAI,CAACjX,KAAK,CAACX,eAAe,KAAK,EAAE;QACrDyf,WAAW,EAAE,KAAK;QAClBvY,CAAC;QACDC;MACF,CAAC;;MAED;MACAkN,WAAW,CAACgL,KAAK,GAAGrV,IAAI;MACxB,IAAI8C,GAAG,GAAGsI,OAAO,CAACjO,CAAC,CAAC;MACpB,IAAI2F,GAAG,KAAK/M,SAAS,EAAE;QACrB+M,GAAG,GAAGsI,OAAO,CAACjO,CAAC,CAAC,GAAG,EAAE;MACvB;MACA2F,GAAG,CAAC5F,CAAC,CAAC,GAAG8C,IAAI;IACf,CAAC,MAAM;MACL,MAAM8O,KAAK,GAAGzE,WAAW,CAACjG,UAAU;MACpC,IAAI0K,KAAK,IAAI,IAAI,EAAE;QACjBzE,WAAW,GAAGyE,KAAK;QACnB;MACF;IACF;IACA,MAAM4G,OAAO,GAAGrL,WAAW,CAACsL,WAAW;IACvC,IAAID,OAAO,IAAI,IAAI,EAAE;MACnBxY,CAAC,EAAE;MACHmN,WAAW,GAAGqL,OAAO;MACrB;IACF;IACA,MAAMvR,MAAM,GAAGkG,WAAW,CAACiL,UAAU;IACrC,IAAInR,MAAM,IAAI,IAAI,EAAE;MAClB,MAAMyR,aAAa,GAAGzR,MAAM,CAACwR,WAAW;MACxC,IAAIC,aAAa,IAAI,IAAI,EAAE;QACzB;MACF;MACAzY,CAAC,EAAE;MACHD,CAAC,GAAG,CAAC;MACLmN,WAAW,GAAGuL,aAAa;IAC7B;EACF;EACAvW,IAAI,CAACpD,OAAO,GAAGiB,CAAC,GAAG,CAAC;EACpBmC,IAAI,CAACrD,IAAI,GAAGmB,CAAC,GAAG,CAAC;EACjB,OAAOkC,IAAI;AACb;AACA,SAASuN,sBAAsBA,CAAC1V,MAAM,EAAE+F,KAAK,EAAE6B,SAAS,EAAE;EACxD,MAAM+W,iBAAiB,GAAG,IAAI1K,GAAG,CAACrM,SAAS,GAAGA,SAAS,CAACkI,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;EACxE8O,iBAAiB,CAAC7Y,KAAK,EAAE,CAAC+C,IAAI,EAAElG,WAAW,KAAK;IAC9C,MAAM8T,IAAI,GAAG5N,IAAI,CAAC4N,IAAI;IACtB,IAAIiI,iBAAiB,CAACE,GAAG,CAACjc,WAAW,CAAC,EAAE;MACtCkG,IAAI,CAACyV,WAAW,GAAG,IAAI;MACvBO,kBAAkB,CAAC9e,MAAM,EAAE8I,IAAI,CAAC;IAClC,CAAC,MAAM;MACLA,IAAI,CAACyV,WAAW,GAAG,KAAK;MACxBQ,uBAAuB,CAAC/e,MAAM,EAAE8I,IAAI,CAAC;MACrC,IAAI,CAAC4N,IAAI,CAACsI,YAAY,CAAC,OAAO,CAAC,EAAE;QAC/BtI,IAAI,CAACuI,eAAe,CAAC,OAAO,CAAC;MAC/B;IACF;EACF,CAAC,CAAC;AACJ;AACA,SAASL,iBAAiBA,CAACzW,IAAI,EAAE+W,EAAE,EAAE;EACnC,MAAM;IACJhL;EACF,CAAC,GAAG/L,IAAI;EACR,KAAK,IAAIlC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiO,OAAO,CAACjV,MAAM,EAAEgH,CAAC,EAAE,EAAE;IACvC,MAAM2F,GAAG,GAAGsI,OAAO,CAACjO,CAAC,CAAC;IACtB,IAAI,CAAC2F,GAAG,EAAE;MACR;IACF;IACA,KAAK,IAAI5F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4F,GAAG,CAAC3M,MAAM,EAAE+G,CAAC,EAAE,EAAE;MACnC,MAAM8C,IAAI,GAAG8C,GAAG,CAAC5F,CAAC,CAAC;MACnB,IAAI,CAAC8C,IAAI,EAAE;QACT;MACF;MACA,MAAMlG,WAAW,GAAG/F,OAAO,CAAC+Z,0BAA0B,CAAC9N,IAAI,CAAC4N,IAAI,CAAC;MACjE,IAAI9T,WAAW,KAAK,IAAI,EAAE;QACxBsc,EAAE,CAACpW,IAAI,EAAElG,WAAW,EAAE;UACpBoD,CAAC;UACDC;QACF,CAAC,CAAC;MACJ;IACF;EACF;AACF;AACA,SAAS+X,yBAAyBA,CAAChe,MAAM,EAAEmU,cAAc,EAAE;EACzDA,cAAc,CAAC8B,qBAAqB,CAAC,CAAC;EACtC2I,iBAAiB,CAACzK,cAAc,CAACpO,KAAK,EAAE+C,IAAI,IAAI;IAC9CA,IAAI,CAACyV,WAAW,GAAG,IAAI;IACvBO,kBAAkB,CAAC9e,MAAM,EAAE8I,IAAI,CAAC;EAClC,CAAC,CAAC;AACJ;AACA,SAASmV,4BAA4BA,CAACje,MAAM,EAAEkY,aAAa,EAAE;EAC3DA,aAAa,CAACzC,oBAAoB,CAAC,CAAC;EACpCmJ,iBAAiB,CAAC1G,aAAa,CAACnS,KAAK,EAAE+C,IAAI,IAAI;IAC7C,MAAM4N,IAAI,GAAG5N,IAAI,CAAC4N,IAAI;IACtB5N,IAAI,CAACyV,WAAW,GAAG,KAAK;IACxBQ,uBAAuB,CAAC/e,MAAM,EAAE8I,IAAI,CAAC;IACrC,IAAI,CAAC4N,IAAI,CAACsI,YAAY,CAAC,OAAO,CAAC,EAAE;MAC/BtI,IAAI,CAACuI,eAAe,CAAC,OAAO,CAAC;IAC/B;EACF,CAAC,CAAC;AACJ;AACA,MAAMzD,0BAA0B,GAAGA,CAACtD,aAAa,EAAEzT,SAAS,EAAEuB,CAAC,EAAEC,CAAC,EAAEkZ,SAAS,KAAK;EAChF,MAAMC,SAAS,GAAGD,SAAS,KAAK,SAAS;EACzC,QAAQA,SAAS;IACf,KAAK,UAAU;IACf,KAAK,SAAS;MACZ,IAAInZ,CAAC,MAAMoZ,SAAS,GAAGlH,aAAa,CAACnS,KAAK,CAAChB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;QAC3Dsa,mBAAmB,CAAC5a,SAAS,CAAC6a,2BAA2B,CAACtZ,CAAC,IAAIoZ,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEnZ,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC,EAAEqZ,SAAS,CAAC;MACzH,CAAC,MAAM;QACL,IAAInZ,CAAC,MAAMmZ,SAAS,GAAGlH,aAAa,CAACnS,KAAK,CAACjB,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;UACxDua,mBAAmB,CAAC5a,SAAS,CAAC6a,2BAA2B,CAACF,SAAS,GAAG,CAAC,GAAGlH,aAAa,CAACnS,KAAK,CAAChB,OAAO,GAAG,CAAC,EAAEkB,CAAC,IAAImZ,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAElH,aAAa,CAACnS,KAAK,CAAC,EAAEqZ,SAAS,CAAC;QACvK,CAAC,MAAM,IAAI,CAACA,SAAS,EAAE;UACrB3a,SAAS,CAACgI,cAAc,CAAC,CAAC;QAC5B,CAAC,MAAM;UACLhI,SAAS,CAAC8a,UAAU,CAAC,CAAC;QACxB;MACF;MACA,OAAO,IAAI;IACb,KAAK,IAAI;MACP,IAAItZ,CAAC,KAAK,CAAC,EAAE;QACXoZ,mBAAmB,CAAC5a,SAAS,CAAC6a,2BAA2B,CAACtZ,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC,EAAE,KAAK,CAAC;MAClG,CAAC,MAAM;QACLtB,SAAS,CAACgI,cAAc,CAAC,CAAC;MAC5B;MACA,OAAO,IAAI;IACb,KAAK,MAAM;MACT,IAAIxG,CAAC,KAAKiS,aAAa,CAACnS,KAAK,CAACjB,IAAI,GAAG,CAAC,EAAE;QACtCua,mBAAmB,CAAC5a,SAAS,CAAC6a,2BAA2B,CAACtZ,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC,EAAE,IAAI,CAAC;MACjG,CAAC,MAAM;QACLtB,SAAS,CAAC8a,UAAU,CAAC,CAAC;MACxB;MACA,OAAO,IAAI;IACb;MACE,OAAO,KAAK;EAChB;AACF,CAAC;AACD,MAAMC,0BAA0B,GAAGA,CAACtH,aAAa,EAAEzT,SAAS,EAAEuB,CAAC,EAAEC,CAAC,EAAEkZ,SAAS,KAAK;EAChF,MAAMC,SAAS,GAAGD,SAAS,KAAK,SAAS;EACzC,QAAQA,SAAS;IACf,KAAK,UAAU;IACf,KAAK,SAAS;MACZ,IAAInZ,CAAC,MAAMoZ,SAAS,GAAGlH,aAAa,CAACnS,KAAK,CAAChB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;QAC3DmT,aAAa,CAAC/B,wBAAwB,CAAC1R,SAAS,CAACoX,0BAA0B,CAAC7V,CAAC,IAAIoZ,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAEnZ,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC,CAAC;MAChI;MACA,OAAO,IAAI;IACb,KAAK,IAAI;MACP,IAAIE,CAAC,KAAK,CAAC,EAAE;QACXiS,aAAa,CAAC/B,wBAAwB,CAAC1R,SAAS,CAACoX,0BAA0B,CAAC7V,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC,CAAC;QAC3G,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,KAAK,MAAM;MACT,IAAIE,CAAC,KAAKiS,aAAa,CAACnS,KAAK,CAACjB,IAAI,GAAG,CAAC,EAAE;QACtCoT,aAAa,CAAC/B,wBAAwB,CAAC1R,SAAS,CAACoX,0BAA0B,CAAC7V,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC,CAAC;QAC3G,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF;MACE,OAAO,KAAK;EAChB;AACF,CAAC;AACD,SAAS+T,mBAAmBA,CAAClS,SAAS,EAAEnD,SAAS,EAAE;EACjD,IAAI5H,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAIG,iBAAiB,CAACH,SAAS,CAAC,EAAE;IACxE,MAAMmS,cAAc,GAAGtV,SAAS,CAACgN,UAAU,CAAC7J,SAAS,CAACmC,MAAM,CAAC9B,OAAO,CAAC,CAAC,CAAC;IACvE,MAAM+R,aAAa,GAAGvV,SAAS,CAACgN,UAAU,CAAC7J,SAAS,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;IACrE,OAAO8R,cAAc,IAAIC,aAAa;EACxC;EACA,OAAO,KAAK;AACd;AACA,SAASqF,mBAAmBA,CAACzf,SAAS,EAAE6f,SAAS,EAAE;EACjD,IAAIA,SAAS,EAAE;IACb7f,SAAS,CAACoN,WAAW,CAAC,CAAC;EACzB,CAAC,MAAM;IACLpN,SAAS,CAAC+Z,SAAS,CAAC,CAAC;EACvB;AACF;AACA,MAAM+F,gBAAgB,GAAG,aAAa;AACtC,SAASZ,kBAAkBA,CAAC9e,MAAM,EAAE8I,IAAI,EAAE;EACxC,MAAMzJ,OAAO,GAAGyJ,IAAI,CAAC4N,IAAI;EACzB,MAAMlZ,IAAI,GAAGX,OAAO,CAAC+Z,0BAA0B,CAACvX,OAAO,CAAC;EACxD,IAAI,CAACyD,gBAAgB,CAACtF,IAAI,CAAC,EAAE;IAC3B,MAAM8H,KAAK,CAAC,sDAAsD,CAAC;EACrE;EACA,MAAMxG,eAAe,GAAGtB,IAAI,CAACoD,kBAAkB,CAAC,CAAC;EACjD,IAAI9B,eAAe,KAAK,IAAI,EAAE;IAC5BO,OAAO,CAACI,KAAK,CAACkgB,WAAW,CAAC,kBAAkB,EAAE,OAAOD,gBAAgB,GAAG,CAAC;EAC3E,CAAC,MAAM;IACLrgB,OAAO,CAACI,KAAK,CAACkgB,WAAW,CAAC,kBAAkB,EAAE,kCAAkCD,gBAAgB,gBAAgBA,gBAAgB,SAAS,CAAC;EAC5I;EACArgB,OAAO,CAACI,KAAK,CAACkgB,WAAW,CAAC,aAAa,EAAE,aAAa,CAAC;AACzD;AACA,SAASZ,uBAAuBA,CAAC/e,MAAM,EAAE8I,IAAI,EAAE;EAC7C,MAAMzJ,OAAO,GAAGyJ,IAAI,CAAC4N,IAAI;EACzB,MAAMlZ,IAAI,GAAGX,OAAO,CAAC+Z,0BAA0B,CAACvX,OAAO,CAAC;EACxD,IAAI,CAACyD,gBAAgB,CAACtF,IAAI,CAAC,EAAE;IAC3B,MAAM8H,KAAK,CAAC,sDAAsD,CAAC;EACrE;EACA,MAAMxG,eAAe,GAAGtB,IAAI,CAACoD,kBAAkB,CAAC,CAAC;EACjD,IAAI9B,eAAe,KAAK,IAAI,EAAE;IAC5BO,OAAO,CAACI,KAAK,CAACmgB,cAAc,CAAC,kBAAkB,CAAC;EAClD;EACAvgB,OAAO,CAACI,KAAK,CAACmgB,cAAc,CAAC,kBAAkB,CAAC;EAChDvgB,OAAO,CAACI,KAAK,CAACmgB,cAAc,CAAC,aAAa,CAAC;AAC7C;AACA,SAAStE,aAAaA,CAAC9d,IAAI,EAAE;EAC3B,MAAMC,QAAQ,GAAGd,KAAK,CAACwI,mBAAmB,CAAC3H,IAAI,EAAEsF,gBAAgB,CAAC;EAClE,OAAOA,gBAAgB,CAACrF,QAAQ,CAAC,GAAGA,QAAQ,GAAG,IAAI;AACrD;AACA,SAASmgB,cAAcA,CAACpgB,IAAI,EAAE;EAC5B,MAAMiH,SAAS,GAAG9H,KAAK,CAACwI,mBAAmB,CAAC3H,IAAI,EAAEgI,YAAY,CAAC;EAC/D,OAAOA,YAAY,CAACf,SAAS,CAAC,GAAGA,SAAS,GAAG,IAAI;AACnD;AACA,SAAS4U,eAAeA,CAACrZ,MAAM,EAAEsY,KAAK,EAAE6G,SAAS,EAAE1a,SAAS,EAAEyT,aAAa,EAAE;EAC3E,MAAMtQ,SAAS,GAAG/K,OAAO,CAACgL,aAAa,CAAC,CAAC;EACzC,IAAI,CAACiS,mBAAmB,CAAClS,SAAS,EAAEnD,SAAS,CAAC,EAAE;IAC9C,OAAO,KAAK;EACd;EACA,IAAI5H,OAAO,CAACiL,iBAAiB,CAACF,SAAS,CAAC,IAAIA,SAAS,CAACgI,WAAW,CAAC,CAAC,EAAE;IACnE;IACA;IACA,IAAIuP,SAAS,KAAK,UAAU,IAAIA,SAAS,KAAK,SAAS,EAAE;MACvD,OAAO,KAAK;IACd;IACA,MAAM;MACJpV,MAAM;MACN/B;IACF,CAAC,GAAGJ,SAAS;IACb,MAAM2I,cAAc,GAAG5T,KAAK,CAACwI,mBAAmB,CAAC4E,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAEnF,gBAAgB,CAAC;IACpF,MAAM4N,aAAa,GAAG/T,KAAK,CAACwI,mBAAmB,CAAC6C,KAAK,CAACC,OAAO,CAAC,CAAC,EAAEnF,gBAAgB,CAAC;IAClF,IAAI,CAACA,gBAAgB,CAACyN,cAAc,CAAC,IAAI,CAACA,cAAc,CAAC3K,EAAE,CAAC8K,aAAa,CAAC,EAAE;MAC1E,OAAO,KAAK;IACd;IACA,MAAMmP,eAAe,GAAGjC,cAAc,CAACrN,cAAc,CAAC;IACtD,IAAIsP,eAAe,KAAKpb,SAAS,IAAIob,eAAe,IAAI,IAAI,EAAE;MAC5D,MAAMC,sBAAsB,GAAG9f,MAAM,CAACoV,eAAe,CAACyK,eAAe,CAAClO,MAAM,CAAC,CAAC,CAAC;MAC/E,IAAImO,sBAAsB,IAAI,IAAI,EAAE;QAClC5H,aAAa,CAACnS,KAAK,GAAGyO,QAAQ,CAACsL,sBAAsB,CAAC;QACtD,OAAOzG,eAAe,CAACrZ,MAAM,EAAEsY,KAAK,EAAE6G,SAAS,EAAEU,eAAe,EAAE3H,aAAa,CAAC;MAClF;IACF;IACA,MAAM6H,aAAa,GAAG/f,MAAM,CAACoV,eAAe,CAAC7E,cAAc,CAAC1S,KAAK,CAAC;IAClE,MAAMmiB,SAAS,GAAGhgB,MAAM,CAACoV,eAAe,CAACrL,MAAM,CAAC7K,GAAG,CAAC;IACpD,IAAI8gB,SAAS,IAAI,IAAI,IAAID,aAAa,IAAI,IAAI,EAAE;MAC9C,OAAO,KAAK;IACd;IACA,IAAIE,iBAAiB;IACrB,IAAIlW,MAAM,CAACjJ,IAAI,KAAK,SAAS,EAAE;MAC7Bmf,iBAAiB,GAAGD,SAAS,CAACE,qBAAqB,CAAC,CAAC;IACvD,CAAC,MAAM;MACL,MAAM3J,YAAY,GAAGnS,MAAM,CAACoP,YAAY,CAAC,CAAC;MAC1C,IAAI+C,YAAY,KAAK,IAAI,IAAIA,YAAY,CAAC4J,UAAU,KAAK,CAAC,EAAE;QAC1D,OAAO,KAAK;MACd;MACA,MAAMC,KAAK,GAAG7J,YAAY,CAAC8J,UAAU,CAAC,CAAC,CAAC;MACxCJ,iBAAiB,GAAGG,KAAK,CAACF,qBAAqB,CAAC,CAAC;IACnD;IACA,MAAMI,SAAS,GAAGnB,SAAS,KAAK,IAAI,GAAG5O,cAAc,CAACjG,aAAa,CAAC,CAAC,GAAGiG,cAAc,CAACgQ,YAAY,CAAC,CAAC;IACrG,IAAID,SAAS,IAAI,IAAI,EAAE;MACrB,OAAO,KAAK;IACd;IACA,MAAME,YAAY,GAAGxgB,MAAM,CAACoV,eAAe,CAACkL,SAAS,CAACziB,KAAK,CAAC;IAC5D,IAAI2iB,YAAY,IAAI,IAAI,EAAE;MACxB,OAAO,KAAK;IACd;IACA,MAAMC,QAAQ,GAAGD,YAAY,CAACN,qBAAqB,CAAC,CAAC;IACrD,MAAMQ,SAAS,GAAGvB,SAAS,KAAK,IAAI,GAAGsB,QAAQ,CAACE,GAAG,GAAGV,iBAAiB,CAACU,GAAG,GAAGV,iBAAiB,CAACpc,MAAM,GAAGoc,iBAAiB,CAACW,MAAM,GAAGX,iBAAiB,CAACpc,MAAM,GAAG4c,QAAQ,CAACG,MAAM;IAC9K,IAAIF,SAAS,EAAE;MACbhI,SAAS,CAACJ,KAAK,CAAC;MAChB,MAAMuI,KAAK,GAAGpc,SAAS,CAACyB,oBAAoB,CAACqK,cAAc,EAAE2H,aAAa,CAACnS,KAAK,CAAC;MACjF,IAAIuS,KAAK,CAACmD,QAAQ,EAAE;QAClB,MAAM3S,IAAI,GAAGrE,SAAS,CAACoX,0BAA0B,CAACgF,KAAK,CAAC7a,CAAC,EAAE6a,KAAK,CAAC5a,CAAC,EAAEiS,aAAa,CAACnS,KAAK,CAAC;QACxFmS,aAAa,CAACpB,yBAAyB,CAAChO,IAAI,CAAC;QAC7CoP,aAAa,CAAC/B,wBAAwB,CAACrN,IAAI,EAAE,IAAI,CAAC;MACpD,CAAC,MAAM;QACL,OAAO0S,0BAA0B,CAACtD,aAAa,EAAEzT,SAAS,EAAEoc,KAAK,CAAC7a,CAAC,EAAE6a,KAAK,CAAC5a,CAAC,EAAEkZ,SAAS,CAAC;MAC1F;MACA,OAAO,IAAI;IACb;EACF,CAAC,MAAM,IAAIpX,iBAAiB,CAACH,SAAS,CAAC,EAAE;IACvC,MAAM;MACJmC,MAAM;MACN/B;IACF,CAAC,GAAGJ,SAAS;IACb,MAAM2I,cAAc,GAAG5T,KAAK,CAACwI,mBAAmB,CAAC4E,MAAM,CAAC9B,OAAO,CAAC,CAAC,EAAEnF,gBAAgB,CAAC;IACpF,MAAM4N,aAAa,GAAG/T,KAAK,CAACwI,mBAAmB,CAAC6C,KAAK,CAACC,OAAO,CAAC,CAAC,EAAEnF,gBAAgB,CAAC;IAClF,MAAM,CAACge,sBAAsB,CAAC,GAAGlZ,SAAS,CAACkI,QAAQ,CAAC,CAAC;IACrD,MAAMqF,YAAY,GAAGnV,MAAM,CAACoV,eAAe,CAAC0L,sBAAsB,CAACnP,MAAM,CAAC,CAAC,CAAC;IAC5E,IAAI,CAAC7O,gBAAgB,CAACyN,cAAc,CAAC,IAAI,CAACzN,gBAAgB,CAAC4N,aAAa,CAAC,IAAI,CAAClL,YAAY,CAACsb,sBAAsB,CAAC,IAAI3L,YAAY,IAAI,IAAI,EAAE;MAC1I,OAAO,KAAK;IACd;IACA+C,aAAa,CAAChC,yBAAyB,CAACtO,SAAS,CAAC;IAClD,MAAMO,IAAI,GAAGqM,QAAQ,CAACW,YAAY,CAAC;IACnC,MAAM4L,WAAW,GAAGtc,SAAS,CAACyB,oBAAoB,CAACqK,cAAc,EAAEpI,IAAI,CAAC;IACxE,MAAM6B,UAAU,GAAGvF,SAAS,CAACoX,0BAA0B,CAACkF,WAAW,CAAC/a,CAAC,EAAE+a,WAAW,CAAC9a,CAAC,EAAEkC,IAAI,CAAC;IAC3F+P,aAAa,CAACpB,yBAAyB,CAAC9M,UAAU,CAAC;IACnD0O,SAAS,CAACJ,KAAK,CAAC;IAChB,IAAIA,KAAK,CAACmD,QAAQ,EAAE;MAClB,MAAMoF,KAAK,GAAGpc,SAAS,CAACyB,oBAAoB,CAACwK,aAAa,EAAEvI,IAAI,CAAC;MACjE,OAAOqX,0BAA0B,CAACtH,aAAa,EAAE4I,sBAAsB,EAAED,KAAK,CAAC7a,CAAC,EAAE6a,KAAK,CAAC5a,CAAC,EAAEkZ,SAAS,CAAC;IACvG,CAAC,MAAM;MACLzO,aAAa,CAACiJ,SAAS,CAAC,CAAC;IAC3B;IACA,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;AACA,SAASjB,SAASA,CAACJ,KAAK,EAAE;EACxBA,KAAK,CAACS,cAAc,CAAC,CAAC;EACtBT,KAAK,CAAC0I,wBAAwB,CAAC,CAAC;EAChC1I,KAAK,CAACyC,eAAe,CAAC,CAAC;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkG,SAAS,SAASpkB,OAAO,CAACQ,WAAW,CAAC;EAC1C,OAAOC,OAAOA,CAAA,EAAG;IACf,OAAO,OAAO;EAChB;EACA,OAAOC,KAAKA,CAACC,IAAI,EAAE;IACjB,OAAO,IAAIyjB,SAAS,CAACzjB,IAAI,CAACK,KAAK,CAAC;EAClC;EACA,OAAOG,SAASA,CAAA,EAAG;IACjB,OAAO;MACL+H,KAAK,EAAEmb,KAAK,KAAK;QACfhjB,UAAU,EAAEijB,mBAAmB;QAC/B/iB,QAAQ,EAAE;MACZ,CAAC;IACH,CAAC;EACH;EACA,OAAOE,UAAUA,CAAC8iB,eAAe,EAAE;IACjC,OAAO1c,gBAAgB,CAAC,CAAC;EAC3B;EACA3F,WAAWA,CAACG,GAAG,EAAE;IACf,KAAK,CAACA,GAAG,CAAC;EACZ;EACA2B,UAAUA,CAAA,EAAG;IACX,OAAO;MACL,GAAG,KAAK,CAACA,UAAU,CAAC,CAAC;MACrBC,IAAI,EAAE,OAAO;MACbgD,OAAO,EAAE;IACX,CAAC;EACH;EACA3E,SAASA,CAACC,MAAM,EAAEY,MAAM,EAAE;IACxB,MAAMmV,YAAY,GAAG7V,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IACpD5C,KAAK,CAAC+C,sBAAsB,CAACyV,YAAY,EAAE/V,MAAM,CAACO,KAAK,CAACoG,KAAK,CAAC;IAC9D,OAAOoP,YAAY;EACrB;EACArT,SAASA,CAAA,EAAG;IACV,OAAO,KAAK;EACd;EACA/B,SAASA,CAACC,MAAM,EAAE;IAChB,OAAO;MACL,GAAG,KAAK,CAACD,SAAS,CAACC,MAAM,CAAC;MAC1BqhB,KAAK,EAAElM,YAAY,IAAI;QACrB,IAAIA,YAAY,EAAE;UAChB,MAAMmM,UAAU,GAAGnM,YAAY,CAACoM,SAAS,CAAC,CAAC;UAC3C,MAAMC,QAAQ,GAAGliB,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;UACnD,MAAMkiB,KAAK,GAAGniB,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;UAC7C,IAAI5C,KAAK,CAAC+kB,aAAa,CAACvM,YAAY,CAAC,EAAE;YACrCsM,KAAK,CAACre,MAAM,CAAC,GAAG+R,YAAY,CAACsF,QAAQ,CAAC;UACxC;UACA,MAAMkH,QAAQ,GAAG,IAAI,CAACpF,oBAAoB,CAAC,CAAC;UAC5C,IAAI,CAACrY,eAAe,CAACyd,QAAQ,CAAC,EAAE;YAC9B,MAAM,IAAIrc,KAAK,CAAC,4BAA4B,CAAC;UAC/C;UACA,MAAMnF,QAAQ,GAAGwhB,QAAQ,CAACthB,eAAe,CAAC,CAAC;UAC3C,KAAK,IAAIwI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1I,QAAQ,EAAE0I,CAAC,EAAE,EAAE;YACjC,MAAM+Y,GAAG,GAAGtiB,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;YACzCiiB,QAAQ,CAACpe,MAAM,CAACwe,GAAG,CAAC;UACtB;UACAN,UAAU,CAACO,eAAe,CAACL,QAAQ,EAAEC,KAAK,CAAC;UAC3C,OAAOH,UAAU;QACnB;MACF;IACF,CAAC;EACH;;EAEA;EACAQ,kBAAkBA,CAAA,EAAG;IACnB,OAAO,KAAK;EACd;EACA5f,UAAUA,CAAA,EAAG;IACX,OAAO,KAAK;EACd;EACAF,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI;EACb;EACAkE,oBAAoBA,CAACxD,aAAa,EAAEqD,KAAK,EAAE;IACzC,MAAM;MACJjB,IAAI;MACJoP;IACF,CAAC,GAAGnO,KAAK;IACT,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,IAAI,EAAEmB,CAAC,EAAE,EAAE;MAC7B,MAAM2F,GAAG,GAAGsI,OAAO,CAACjO,CAAC,CAAC;MACtB,IAAI2F,GAAG,IAAI,IAAI,EAAE;QACf;MACF;MACA,MAAM5F,CAAC,GAAG4F,GAAG,CAACjG,SAAS,CAACmD,IAAI,IAAI;QAC9B,IAAI,CAACA,IAAI,EAAE;QACX,MAAM;UACJ4N;QACF,CAAC,GAAG5N,IAAI;QACR,MAAMrL,QAAQ,GAAGZ,OAAO,CAAC+Z,0BAA0B,CAACF,IAAI,CAAC;QACzD,OAAOjZ,QAAQ,KAAKiF,aAAa;MACnC,CAAC,CAAC;MACF,IAAIsD,CAAC,KAAK,CAAC,CAAC,EAAE;QACZ,OAAO;UACLA,CAAC;UACDC;QACF,CAAC;MACH;IACF;IACA,MAAM,IAAIX,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACAyc,mBAAmBA,CAAC/b,CAAC,EAAEC,CAAC,EAAEF,KAAK,EAAE;IAC/B,MAAM;MACJmO;IACF,CAAC,GAAGnO,KAAK;IACT,MAAM6F,GAAG,GAAGsI,OAAO,CAACjO,CAAC,CAAC;IACtB,IAAI2F,GAAG,IAAI,IAAI,EAAE;MACf,OAAO,IAAI;IACb;IACA,MAAM9C,IAAI,GAAG8C,GAAG,CAAC5F,CAAC,CAAC;IACnB,IAAI8C,IAAI,IAAI,IAAI,EAAE;MAChB,OAAO,IAAI;IACb;IACA,OAAOA,IAAI;EACb;EACA+S,0BAA0BA,CAAC7V,CAAC,EAAEC,CAAC,EAAEF,KAAK,EAAE;IACtC,MAAM+C,IAAI,GAAG,IAAI,CAACiZ,mBAAmB,CAAC/b,CAAC,EAAEC,CAAC,EAAEF,KAAK,CAAC;IAClD,IAAI,CAAC+C,IAAI,EAAE;MACT,MAAM,IAAIxD,KAAK,CAAC,0BAA0B,CAAC;IAC7C;IACA,OAAOwD,IAAI;EACb;EACA1C,oBAAoBA,CAACJ,CAAC,EAAEC,CAAC,EAAEF,KAAK,EAAE;IAChC,MAAM+C,IAAI,GAAG,IAAI,CAACiZ,mBAAmB,CAAC/b,CAAC,EAAEC,CAAC,EAAEF,KAAK,CAAC;IAClD,IAAI+C,IAAI,IAAI,IAAI,EAAE;MAChB,OAAO,IAAI;IACb;IACA,MAAMtL,IAAI,GAAGX,OAAO,CAAC+Z,0BAA0B,CAAC9N,IAAI,CAAC4N,IAAI,CAAC;IAC1D,IAAI5T,gBAAgB,CAACtF,IAAI,CAAC,EAAE;MAC1B,OAAOA,IAAI;IACb;IACA,OAAO,IAAI;EACb;EACA8hB,2BAA2BA,CAACtZ,CAAC,EAAEC,CAAC,EAAEF,KAAK,EAAE;IACvC,MAAMvI,IAAI,GAAG,IAAI,CAAC4I,oBAAoB,CAACJ,CAAC,EAAEC,CAAC,EAAEF,KAAK,CAAC;IACnD,IAAI,CAACvI,IAAI,EAAE;MACT,MAAM,IAAI8H,KAAK,CAAC,kCAAkC,CAAC;IACrD;IACA,OAAO9H,IAAI;EACb;EACAwkB,eAAeA,CAAA,EAAG;IAChB,OAAO,IAAI;EACb;EACA7f,SAASA,CAAA,EAAG;IACV,OAAO,KAAK;EACd;AACF;AACA,SAAS8f,uBAAuBA,CAACjiB,MAAM,EAAEyE,SAAS,EAAE;EAClD,MAAM0Q,YAAY,GAAGnV,MAAM,CAACoV,eAAe,CAAC3Q,SAAS,CAACkN,MAAM,CAAC,CAAC,CAAC;EAC/D,IAAIwD,YAAY,IAAI,IAAI,EAAE;IACxB,MAAM,IAAI7P,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,OAAOkP,QAAQ,CAACW,YAAY,CAAC;AAC/B;AACA,SAASgM,mBAAmBA,CAACe,QAAQ,EAAE;EACrC,OAAO;IACL1kB,IAAI,EAAEkH,gBAAgB,CAAC;EACzB,CAAC;AACH;AACA,SAASA,gBAAgBA,CAAA,EAAG;EAC1B,OAAO7H,OAAO,CAACwG,qBAAqB,CAAC,IAAI4d,SAAS,CAAC,CAAC,CAAC;AACvD;AACA,SAASzb,YAAYA,CAAChI,IAAI,EAAE;EAC1B,OAAOA,IAAI,YAAYyjB,SAAS;AAClC;AAEAkB,OAAO,CAAC5Z,gBAAgB,GAAGA,gBAAgB;AAC3C4Z,OAAO,CAACzjB,oBAAoB,GAAGA,oBAAoB;AACnDyjB,OAAO,CAACzd,gBAAgB,GAAGA,gBAAgB;AAC3Cyd,OAAO,CAAC9d,8BAA8B,GAAGA,8BAA8B;AACvE8d,OAAO,CAACve,mBAAmB,GAAGA,mBAAmB;AACjDue,OAAO,CAACnP,qBAAqB,GAAGA,qBAAqB;AACrDmP,OAAO,CAAC5W,kBAAkB,GAAGA,kBAAkB;AAC/C4W,OAAO,CAAC/V,gCAAgC,GAAGA,gCAAgC;AAC3E+V,OAAO,CAAC3W,6BAA6B,GAAGA,6BAA6B;AACrE2W,OAAO,CAACF,uBAAuB,GAAGA,uBAAuB;AACzDE,OAAO,CAAC/Z,eAAe,GAAGA,eAAe;AACzC+Z,OAAO,CAACld,gCAAgC,GAAGA,gCAAgC;AAC3Ekd,OAAO,CAAC7T,qBAAqB,GAAGA,qBAAqB;AACrD6T,OAAO,CAACtc,qCAAqC,GAAGA,qCAAqC;AACrFsc,OAAO,CAAC5c,mCAAmC,GAAGA,mCAAmC;AACjF4c,OAAO,CAAC1c,kCAAkC,GAAGA,kCAAkC;AAC/E0c,OAAO,CAAC9c,wCAAwC,GAAGA,wCAAwC;AAC3F8c,OAAO,CAAC9Y,kBAAkB,GAAGA,kBAAkB;AAC/C8Y,OAAO,CAACrY,gCAAgC,GAAGA,gCAAgC;AAC3EqY,OAAO,CAACtb,eAAe,GAAGA,eAAe;AACzCsb,OAAO,CAACxa,6BAA6B,GAAGA,6BAA6B;AACrEwa,OAAO,CAACrf,gBAAgB,GAAGA,gBAAgB;AAC3Cqf,OAAO,CAAC3c,YAAY,GAAGA,YAAY;AACnC2c,OAAO,CAACje,eAAe,GAAGA,eAAe;AACzCie,OAAO,CAACpa,iBAAiB,GAAGA,iBAAiB;AAC7Coa,OAAO,CAAC3b,sBAAsB,GAAGA,sBAAsB;AACvD2b,OAAO,CAAChV,YAAY,GAAGA,YAAY;AACnCgV,OAAO,CAAC7e,oBAAoB,GAAGA,oBAAoB;AACnD6e,OAAO,CAACplB,qBAAqB,GAAGA,qBAAqB;AACrDolB,OAAO,CAAC/kB,aAAa,GAAGA,aAAa;AACrC+kB,OAAO,CAAClB,SAAS,GAAGA,SAAS;AAC7BkB,OAAO,CAAC1O,aAAa,GAAGA,aAAa;AACrC0O,OAAO,CAAC3e,YAAY,GAAGA,YAAY;AACnC2e,OAAO,CAACrK,kBAAkB,GAAGA,kBAAkB;AAC/CqK,OAAO,CAAC1J,oBAAoB,GAAGA,oBAAoB;AACnD0J,OAAO,CAACjE,gCAAgC,GAAGA,gCAAgC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}