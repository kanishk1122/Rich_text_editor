{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { TRANSFORMERS, registerMarkdownShortcuts } from '@lexical/markdown';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { HorizontalRuleNode, $isHorizontalRuleNode, $createHorizontalRuleNode } from '@lexical/react/LexicalHorizontalRuleNode';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HR = {\n  dependencies: [HorizontalRuleNode],\n  export: node => {\n    return $isHorizontalRuleNode(node) ? '***' : null;\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = $createHorizontalRuleNode();\n\n    // TODO: Get rid of isImport flag\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line);\n    } else {\n      parentNode.insertBefore(line);\n    }\n    line.selectNext();\n  },\n  type: 'element'\n};\nconst DEFAULT_TRANSFORMERS = [HR, ...TRANSFORMERS];\nfunction MarkdownShortcutPlugin(_ref) {\n  let {\n    transformers = DEFAULT_TRANSFORMERS\n  } = _ref;\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    return registerMarkdownShortcuts(editor, transformers);\n  }, [editor, transformers]);\n  return null;\n}\nexport { DEFAULT_TRANSFORMERS, MarkdownShortcutPlugin };","map":{"version":3,"names":["TRANSFORMERS","registerMarkdownShortcuts","useLexicalComposerContext","HorizontalRuleNode","$isHorizontalRuleNode","$createHorizontalRuleNode","useEffect","HR","dependencies","export","node","regExp","replace","parentNode","_1","_2","isImport","line","getNextSibling","insertBefore","selectNext","type","DEFAULT_TRANSFORMERS","MarkdownShortcutPlugin","_ref","transformers","editor"],"sources":["/media/ks/My thing/test/textditor/node_modules/@lexical/react/LexicalMarkdownShortcutPlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { TRANSFORMERS, registerMarkdownShortcuts } from '@lexical/markdown';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { HorizontalRuleNode, $isHorizontalRuleNode, $createHorizontalRuleNode } from '@lexical/react/LexicalHorizontalRuleNode';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst HR = {\n  dependencies: [HorizontalRuleNode],\n  export: node => {\n    return $isHorizontalRuleNode(node) ? '***' : null;\n  },\n  regExp: /^(---|\\*\\*\\*|___)\\s?$/,\n  replace: (parentNode, _1, _2, isImport) => {\n    const line = $createHorizontalRuleNode();\n\n    // TODO: Get rid of isImport flag\n    if (isImport || parentNode.getNextSibling() != null) {\n      parentNode.replace(line);\n    } else {\n      parentNode.insertBefore(line);\n    }\n    line.selectNext();\n  },\n  type: 'element'\n};\nconst DEFAULT_TRANSFORMERS = [HR, ...TRANSFORMERS];\nfunction MarkdownShortcutPlugin({\n  transformers = DEFAULT_TRANSFORMERS\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    return registerMarkdownShortcuts(editor, transformers);\n  }, [editor, transformers]);\n  return null;\n}\n\nexport { DEFAULT_TRANSFORMERS, MarkdownShortcutPlugin };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,EAAEC,yBAAyB,QAAQ,mBAAmB;AAC3E,SAASC,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,kBAAkB,EAAEC,qBAAqB,EAAEC,yBAAyB,QAAQ,0CAA0C;AAC/H,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,EAAE,GAAG;EACTC,YAAY,EAAE,CAACL,kBAAkB,CAAC;EAClCM,MAAM,EAAEC,IAAI,IAAI;IACd,OAAON,qBAAqB,CAACM,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI;EACnD,CAAC;EACDC,MAAM,EAAE,uBAAuB;EAC/BC,OAAO,EAAEA,CAACC,UAAU,EAAEC,EAAE,EAAEC,EAAE,EAAEC,QAAQ,KAAK;IACzC,MAAMC,IAAI,GAAGZ,yBAAyB,CAAC,CAAC;;IAExC;IACA,IAAIW,QAAQ,IAAIH,UAAU,CAACK,cAAc,CAAC,CAAC,IAAI,IAAI,EAAE;MACnDL,UAAU,CAACD,OAAO,CAACK,IAAI,CAAC;IAC1B,CAAC,MAAM;MACLJ,UAAU,CAACM,YAAY,CAACF,IAAI,CAAC;IAC/B;IACAA,IAAI,CAACG,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,IAAI,EAAE;AACR,CAAC;AACD,MAAMC,oBAAoB,GAAG,CAACf,EAAE,EAAE,GAAGP,YAAY,CAAC;AAClD,SAASuB,sBAAsBA,CAAAC,IAAA,EAE5B;EAAA,IAF6B;IAC9BC,YAAY,GAAGH;EACjB,CAAC,GAAAE,IAAA;EACC,MAAM,CAACE,MAAM,CAAC,GAAGxB,yBAAyB,CAAC,CAAC;EAC5CI,SAAS,CAAC,MAAM;IACd,OAAOL,yBAAyB,CAACyB,MAAM,EAAED,YAAY,CAAC;EACxD,CAAC,EAAE,CAACC,MAAM,EAAED,YAAY,CAAC,CAAC;EAC1B,OAAO,IAAI;AACb;AAEA,SAASH,oBAAoB,EAAEC,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}