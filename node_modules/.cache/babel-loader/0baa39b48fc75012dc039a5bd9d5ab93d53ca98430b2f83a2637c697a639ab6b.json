{"ast":null,"code":"var _s = $RefreshSig$();\nimport { $getListDepth, $isListItemNode, $isListNode } from \"@lexical/list\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport { $getSelection, $isElementNode, $isRangeSelection, INDENT_CONTENT_COMMAND, COMMAND_PRIORITY_HIGH } from \"lexical\";\nimport { useEffect } from \"react\";\nfunction getElementNodesInSelection(selection) {\n  const nodesInSelection = selection.getNodes();\n  if (nodesInSelection.length === 0) {\n    return new Set([selection.anchor.getNode().getParentOrThrow(), selection.focus.getNode().getParentOrThrow()]);\n  }\n  return new Set(nodesInSelection.map(n => $isElementNode(n) ? n : n.getParentOrThrow()));\n}\nfunction isIndentPermitted(maxDepth) {\n  const selection = $getSelection();\n  if (!$isRangeSelection(selection)) {\n    return false;\n  }\n  const elementNodesInSelection = getElementNodesInSelection(selection);\n  let totalDepth = 0;\n  for (const elementNode of elementNodesInSelection) {\n    if ($isListNode(elementNode)) {\n      totalDepth = Math.max($getListDepth(elementNode) + 1, totalDepth);\n    } else if ($isListItemNode(elementNode)) {\n      const parent = elementNode.getParent();\n      if (!$isListNode(parent)) {\n        throw new Error(\"ListMaxIndentLevelPlugin: A ListItemNode must have a ListNode for a parent.\");\n      }\n      totalDepth = Math.max($getListDepth(parent) + 1, totalDepth);\n    }\n  }\n  return totalDepth <= maxDepth;\n}\nexport default function ListMaxIndentLevelPlugin(_ref) {\n  _s();\n  let {\n    maxDepth\n  } = _ref;\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    return editor.registerCommand(INDENT_CONTENT_COMMAND, () => !isIndentPermitted(maxDepth !== null && maxDepth !== void 0 ? maxDepth : 7), COMMAND_PRIORITY_HIGH);\n  }, [editor, maxDepth]);\n  return null;\n}\n_s(ListMaxIndentLevelPlugin, \"mCqe7sh4aC9mLBXPHfG3d/PNTaQ=\", false, function () {\n  return [useLexicalComposerContext];\n});\n_c = ListMaxIndentLevelPlugin;\nvar _c;\n$RefreshReg$(_c, \"ListMaxIndentLevelPlugin\");","map":{"version":3,"names":["$getListDepth","$isListItemNode","$isListNode","useLexicalComposerContext","$getSelection","$isElementNode","$isRangeSelection","INDENT_CONTENT_COMMAND","COMMAND_PRIORITY_HIGH","useEffect","getElementNodesInSelection","selection","nodesInSelection","getNodes","length","Set","anchor","getNode","getParentOrThrow","focus","map","n","isIndentPermitted","maxDepth","elementNodesInSelection","totalDepth","elementNode","Math","max","parent","getParent","Error","ListMaxIndentLevelPlugin","_ref","_s","editor","registerCommand","_c","$RefreshReg$"],"sources":["/media/ks/My thing/test/textditor/src/plugins/ListMaxIndentLevelPlugin.js"],"sourcesContent":["import { $getListDepth, $isListItemNode, $isListNode } from \"@lexical/list\";\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\nimport {\n  $getSelection,\n  $isElementNode,\n  $isRangeSelection,\n  INDENT_CONTENT_COMMAND,\n  COMMAND_PRIORITY_HIGH\n} from \"lexical\";\nimport { useEffect } from \"react\";\n\nfunction getElementNodesInSelection(selection) {\n  const nodesInSelection = selection.getNodes();\n\n  if (nodesInSelection.length === 0) {\n    return new Set([\n      selection.anchor.getNode().getParentOrThrow(),\n      selection.focus.getNode().getParentOrThrow()\n    ]);\n  }\n\n  return new Set(\n    nodesInSelection.map((n) => ($isElementNode(n) ? n : n.getParentOrThrow()))\n  );\n}\n\nfunction isIndentPermitted(maxDepth) {\n  const selection = $getSelection();\n\n  if (!$isRangeSelection(selection)) {\n    return false;\n  }\n\n  const elementNodesInSelection = getElementNodesInSelection(selection);\n\n  let totalDepth = 0;\n\n  for (const elementNode of elementNodesInSelection) {\n    if ($isListNode(elementNode)) {\n      totalDepth = Math.max($getListDepth(elementNode) + 1, totalDepth);\n    } else if ($isListItemNode(elementNode)) {\n      const parent = elementNode.getParent();\n      if (!$isListNode(parent)) {\n        throw new Error(\n          \"ListMaxIndentLevelPlugin: A ListItemNode must have a ListNode for a parent.\"\n        );\n      }\n\n      totalDepth = Math.max($getListDepth(parent) + 1, totalDepth);\n    }\n  }\n\n  return totalDepth <= maxDepth;\n}\n\nexport default function ListMaxIndentLevelPlugin({ maxDepth }) {\n  const [editor] = useLexicalComposerContext();\n\n  useEffect(() => {\n    return editor.registerCommand(\n      INDENT_CONTENT_COMMAND,\n      () => !isIndentPermitted(maxDepth ?? 7),\n      COMMAND_PRIORITY_HIGH\n    );\n  }, [editor, maxDepth]);\n\n  return null;\n}\n"],"mappings":";AAAA,SAASA,aAAa,EAAEC,eAAe,EAAEC,WAAW,QAAQ,eAAe;AAC3E,SAASC,yBAAyB,QAAQ,uCAAuC;AACjF,SACEC,aAAa,EACbC,cAAc,EACdC,iBAAiB,EACjBC,sBAAsB,EACtBC,qBAAqB,QAChB,SAAS;AAChB,SAASC,SAAS,QAAQ,OAAO;AAEjC,SAASC,0BAA0BA,CAACC,SAAS,EAAE;EAC7C,MAAMC,gBAAgB,GAAGD,SAAS,CAACE,QAAQ,CAAC,CAAC;EAE7C,IAAID,gBAAgB,CAACE,MAAM,KAAK,CAAC,EAAE;IACjC,OAAO,IAAIC,GAAG,CAAC,CACbJ,SAAS,CAACK,MAAM,CAACC,OAAO,CAAC,CAAC,CAACC,gBAAgB,CAAC,CAAC,EAC7CP,SAAS,CAACQ,KAAK,CAACF,OAAO,CAAC,CAAC,CAACC,gBAAgB,CAAC,CAAC,CAC7C,CAAC;EACJ;EAEA,OAAO,IAAIH,GAAG,CACZH,gBAAgB,CAACQ,GAAG,CAAEC,CAAC,IAAMhB,cAAc,CAACgB,CAAC,CAAC,GAAGA,CAAC,GAAGA,CAAC,CAACH,gBAAgB,CAAC,CAAE,CAC5E,CAAC;AACH;AAEA,SAASI,iBAAiBA,CAACC,QAAQ,EAAE;EACnC,MAAMZ,SAAS,GAAGP,aAAa,CAAC,CAAC;EAEjC,IAAI,CAACE,iBAAiB,CAACK,SAAS,CAAC,EAAE;IACjC,OAAO,KAAK;EACd;EAEA,MAAMa,uBAAuB,GAAGd,0BAA0B,CAACC,SAAS,CAAC;EAErE,IAAIc,UAAU,GAAG,CAAC;EAElB,KAAK,MAAMC,WAAW,IAAIF,uBAAuB,EAAE;IACjD,IAAItB,WAAW,CAACwB,WAAW,CAAC,EAAE;MAC5BD,UAAU,GAAGE,IAAI,CAACC,GAAG,CAAC5B,aAAa,CAAC0B,WAAW,CAAC,GAAG,CAAC,EAAED,UAAU,CAAC;IACnE,CAAC,MAAM,IAAIxB,eAAe,CAACyB,WAAW,CAAC,EAAE;MACvC,MAAMG,MAAM,GAAGH,WAAW,CAACI,SAAS,CAAC,CAAC;MACtC,IAAI,CAAC5B,WAAW,CAAC2B,MAAM,CAAC,EAAE;QACxB,MAAM,IAAIE,KAAK,CACb,6EACF,CAAC;MACH;MAEAN,UAAU,GAAGE,IAAI,CAACC,GAAG,CAAC5B,aAAa,CAAC6B,MAAM,CAAC,GAAG,CAAC,EAAEJ,UAAU,CAAC;IAC9D;EACF;EAEA,OAAOA,UAAU,IAAIF,QAAQ;AAC/B;AAEA,eAAe,SAASS,wBAAwBA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEX;EAAS,CAAC,GAAAU,IAAA;EAC3D,MAAM,CAACE,MAAM,CAAC,GAAGhC,yBAAyB,CAAC,CAAC;EAE5CM,SAAS,CAAC,MAAM;IACd,OAAO0B,MAAM,CAACC,eAAe,CAC3B7B,sBAAsB,EACtB,MAAM,CAACe,iBAAiB,CAACC,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,CAAC,CAAC,EACvCf,qBACF,CAAC;EACH,CAAC,EAAE,CAAC2B,MAAM,EAAEZ,QAAQ,CAAC,CAAC;EAEtB,OAAO,IAAI;AACb;AAACW,EAAA,CAZuBF,wBAAwB;EAAA,QAC7B7B,yBAAyB;AAAA;AAAAkC,EAAA,GADpBL,wBAAwB;AAAA,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}